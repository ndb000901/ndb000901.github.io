{
    "version": "https://jsonfeed.org/version/1",
    "title": "wuhen's blog • All posts by \"python\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/05/08/opencv%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87/",
            "url": "http://example.com/2021/05/08/opencv%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87/",
            "title": "opencv处理图片",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"opencv处理图片\"><a class=\"markdownIt-Anchor\" href=\"#opencv处理图片\">#</a> opencv 处理图片</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.manjaro21-gnome</p>\n<p>2.python3.9</p>\n<p>3.opencv-python-4.5.1.48</p>\n<p>4.numpy-1.20.2</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 加载、显示、保存图片</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 加载、显示、保存图片</span><br><span class=\"line\">import cv2</span><br><span class=\"line\">img &#x3D; cv2.imread(&quot;1.jpeg&quot;)</span><br><span class=\"line\">cv2.imwrite(&quot;save.png&quot;, img)</span><br><span class=\"line\">cv2.imshow(&quot;img&quot;, img)</span><br><span class=\"line\">cv2.waitKey()</span><br></pre></td></tr></table></figure>\n<p><strong>2. 获取图片宽、高、通道数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取图片宽、高、通道数</span><br><span class=\"line\">import cv2</span><br><span class=\"line\"></span><br><span class=\"line\">img &#x3D; cv2.imread(&quot;1.jpeg&quot;)</span><br><span class=\"line\">print(img.shape)</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<p>返回图片的高、宽、通道，若图像为非彩色图，则不返回通道值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(750, 500, 3)</span><br></pre></td></tr></table></figure>\n<p><strong>3. 图像缩放</strong></p>\n<p>图像缩放使用 cv2.resize () 函数，第三个参数定义了缩放插值的方法。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>INTER_NEAREST</td>\n<td>最近邻插值法</td>\n</tr>\n<tr>\n<td>INTER_LINEAR</td>\n<td>双线性插值法（默认）</td>\n</tr>\n<tr>\n<td>INTER_AREA</td>\n<td>基于局部像素的重采样</td>\n</tr>\n<tr>\n<td>INTER_CUBIC</td>\n<td>基于 4x4 像素邻域的 3 次插值法</td>\n</tr>\n<tr>\n<td>INTER_LANCZOS4</td>\n<td>基于 8x8 像素邻域的 Lanczos 插值</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 图像缩放</span><br><span class=\"line\"></span><br><span class=\"line\">import cv2</span><br><span class=\"line\"></span><br><span class=\"line\">img &#x3D; cv2.imread(&quot;1.jpeg&quot;)</span><br><span class=\"line\">cv2.imshow(&quot;img&quot;, img)</span><br><span class=\"line\">img1 &#x3D; cv2.resize(img, (100, 600), cv2.INTER_AREA)</span><br><span class=\"line\">hight, width &#x3D; img.shape[0:2]</span><br><span class=\"line\">img2 &#x3D; cv2.resize(img, (width, hight))</span><br><span class=\"line\">cv2.imshow(&quot;img1&quot;, img1)</span><br><span class=\"line\">cv2.imshow(&#39;img2&#39;, img2)</span><br><span class=\"line\">cv2.waitKey()</span><br></pre></td></tr></table></figure>\n<p><strong>4. 图片旋转</strong></p>\n<p><strong><a href=\"http://main.py\">main.py</a></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import argparse</span><br><span class=\"line\">import imutils</span><br><span class=\"line\">import cv2</span><br><span class=\"line\"></span><br><span class=\"line\">ap &#x3D; argparse.ArgumentParser()</span><br><span class=\"line\">ap.add_argument(&quot;-i&quot;, &quot;--image&quot;, required&#x3D;True,</span><br><span class=\"line\">                help&#x3D;&quot;Path to the image&quot;)</span><br><span class=\"line\">args &#x3D; vars(ap.parse_args())</span><br><span class=\"line\"></span><br><span class=\"line\">image &#x3D; cv2.imread(args[&quot;image&quot;])</span><br><span class=\"line\">cv2.imshow(&quot;Original&quot;, image)</span><br><span class=\"line\"></span><br><span class=\"line\">(h, w) &#x3D; image.shape[:2]</span><br><span class=\"line\">center &#x3D; (w &#x2F;&#x2F; 2, h &#x2F;&#x2F; 2)</span><br><span class=\"line\"></span><br><span class=\"line\">M &#x3D; cv2.getRotationMatrix2D(center, 45, 1.0)</span><br><span class=\"line\">rotated &#x3D; cv2.warpAffine(image, M, (w, h))</span><br><span class=\"line\">cv2.imshow(&quot;Rotated by 45 Degrees&quot;, rotated)</span><br><span class=\"line\"></span><br><span class=\"line\">M &#x3D; cv2.getRotationMatrix2D(center, -90, 1.0)</span><br><span class=\"line\">rotated &#x3D; cv2.warpAffine(image, M, (w, h))</span><br><span class=\"line\">cv2.imshow(&quot;Rotated by -90 Degrees&quot;, rotated)</span><br><span class=\"line\"></span><br><span class=\"line\">rotated &#x3D; imutils.rotate(image, 180)</span><br><span class=\"line\">cv2.imshow(&quot;Rotated by 180 Degrees&quot;, rotated)</span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"http://imutils.py\">imutils.py</a></strong></p>\n<p>rotate () 第一个参数为需要处理的图片，第二个为角度，第三个为旋转中心，默认为图片中心，第四个为规模，默认 1.0。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cv2</span><br><span class=\"line\">def rotate(image, angle, center&#x3D;None, scale&#x3D;1.0):</span><br><span class=\"line\">    (h, w) &#x3D; image.shape[:2]</span><br><span class=\"line\">    if center is None: </span><br><span class=\"line\">        center &#x3D; (w &#x2F;&#x2F; 2, h &#x2F;&#x2F; 2)</span><br><span class=\"line\"></span><br><span class=\"line\">    M &#x3D; cv2.getRotationMatrix2D(center, angle, scale)</span><br><span class=\"line\"></span><br><span class=\"line\">    rotated &#x3D; cv2.warpAffine(image, M, (w, h))</span><br><span class=\"line\">    return rotated</span><br></pre></td></tr></table></figure>\n<p><strong>5. 图像轮廓检测</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 图片轮廓检测</span><br><span class=\"line\">import cv2</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">img &#x3D; cv2.imread(&#39;1.jpeg&#39;)</span><br><span class=\"line\">gray &#x3D; cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)                        #转换为灰度图像</span><br><span class=\"line\">ret, binary &#x3D; cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)        #转换为二值图像</span><br><span class=\"line\">contours, hierarchy &#x3D; cv2.findContours(binary, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)#提取轮廓</span><br><span class=\"line\">cv2.drawContours(img, contours, -1, (0, 0, 255), 2)</span><br><span class=\"line\">cv2.imshow(&quot;img&quot;, img)</span><br><span class=\"line\">cv2.waitKey()</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "http://example.com/2021/05/08/python%20opencv%20%E6%93%8D%E4%BD%9C%E6%91%84%E5%83%8F%E5%A4%B4/",
            "url": "http://example.com/2021/05/08/python%20opencv%20%E6%93%8D%E4%BD%9C%E6%91%84%E5%83%8F%E5%A4%B4/",
            "title": "python opencv 操作摄像头",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"python-opencv-操作摄像头\"><a class=\"markdownIt-Anchor\" href=\"#python-opencv-操作摄像头\">#</a> python opencv 操作摄像头</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.python3.8</p>\n<p>3.opencv-4.4.0.46</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 源码</strong></p>\n<p><a href=\"http://main.py\">main.py</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cv2</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">cap &#x3D; cv2.VideoCapture(0)</span><br><span class=\"line\">while 1:</span><br><span class=\"line\">    # get a frame</span><br><span class=\"line\">    ret, frame &#x3D; cap.read()</span><br><span class=\"line\">    # show a frame</span><br><span class=\"line\">    cv2.imshow(&quot;capture&quot;, frame)</span><br><span class=\"line\">    if cv2.waitKey(1) &amp; 0xFF &#x3D;&#x3D; ord(&#39;q&#39;):</span><br><span class=\"line\">        break</span><br><span class=\"line\">cap.release()</span><br><span class=\"line\">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n<p><strong>3. 效果</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761669-db797e80-902e-11eb-81e4-9545c2243094.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "http://example.com/2021/05/08/python%20%E8%BF%9E%E6%8E%A5sql%20server%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8Cpymssql%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E3%80%82/",
            "url": "http://example.com/2021/05/08/python%20%E8%BF%9E%E6%8E%A5sql%20server%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8Cpymssql%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E3%80%82/",
            "title": "python 连接sql server数据库，pymssql模块安装。",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"python-连接sql-server数据库pymssql模块安装\"><a class=\"markdownIt-Anchor\" href=\"#python-连接sql-server数据库pymssql模块安装\">#</a> python 连接 sql server 数据库，pymssql 模块安装。</h2>\n<blockquote>\n<p>python 版本：python3.7</p>\n<p>数据库版本：sql server 2016</p>\n</blockquote>\n<p>连接 sql server 数据库，本菜鸟用的是 pymssql，现在我得着重说下 pymssql 的安装问题。</p>\n<p><strong>安装 pymssql 解决方案</strong></p>\n<p>往常使用滴 pip install pymssql 可能行不通（你可以去试试，反正我滴机子不行）。</p>\n<p><strong>资源下载</strong> <a href=\"https://pypi.org/project/pymssql/#files\">pymssql 下载</a><br>\n选择自己需要滴版本</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761694-0794ff80-902f-11eb-8561-d8e1a2d3d6a4.png\" alt=\"image\"></p>\n<p>下载后直接在当前目录执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install 包名</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><strong>连接数据库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pymssql</span><br><span class=\"line\">class MSSQL:</span><br><span class=\"line\">    def __init__(self,host,user,pwd,db):</span><br><span class=\"line\">        self.host &#x3D; host</span><br><span class=\"line\">        self.user &#x3D; user</span><br><span class=\"line\">        self.pwd &#x3D; pwd</span><br><span class=\"line\">        self.db &#x3D; db</span><br><span class=\"line\"></span><br><span class=\"line\">    def __GetConnect(self):</span><br><span class=\"line\">        if not self.db:</span><br><span class=\"line\">            raise(NameError,&quot;没有设置数据库信息&quot;)</span><br><span class=\"line\">        self.conn &#x3D; pymssql.connect(host&#x3D;self.host,user&#x3D;self.user,password&#x3D;self.pwd,database&#x3D;self.db,charset&#x3D;&quot;utf8&quot;)</span><br><span class=\"line\">        cur &#x3D; self.conn.cursor()</span><br><span class=\"line\">        if not cur:</span><br><span class=\"line\">            raise(NameError,&quot;连接数据库失败&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return cur</span><br><span class=\"line\"></span><br><span class=\"line\">    def ExecQuery(self,sql):</span><br><span class=\"line\">        cur &#x3D; self.__GetConnect()</span><br><span class=\"line\">        cur.execute(sql)</span><br><span class=\"line\">        resList &#x3D; cur.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\">        #查询完毕后必须关闭连接</span><br><span class=\"line\">        self.conn.close()</span><br><span class=\"line\">        return resList</span><br><span class=\"line\"></span><br><span class=\"line\">    def ExecNonQuery(self,sql):</span><br><span class=\"line\">        cur &#x3D; self.__GetConnect()</span><br><span class=\"line\">        cur.execute(sql)</span><br><span class=\"line\">        self.conn.commit()</span><br><span class=\"line\">        self.conn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#根据自己的实际情况进行配置</span><br><span class=\"line\">ms &#x3D; MSSQL(host&#x3D;&quot;127.0.0.1&quot;,user&#x3D;&quot;sa&quot;,pwd&#x3D;&quot;123456&quot;,db&#x3D;&quot;haha&quot;)</span><br><span class=\"line\">sqlStr &#x3D; &#39;select * from jokes&#39;</span><br><span class=\"line\">list &#x3D; ms.ExecQuery(sqlStr.encode(&#39;utf-8&#39;))</span><br><span class=\"line\">for i in list:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "http://example.com/2021/05/08/python%E5%88%9D%E8%AF%95opencv/",
            "url": "http://example.com/2021/05/08/python%E5%88%9D%E8%AF%95opencv/",
            "title": "python 初试opencv",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"python-初试opencv\"><a class=\"markdownIt-Anchor\" href=\"#python-初试opencv\">#</a> python 初试 opencv</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.python3.8</p>\n<p>3.opencv-4.4.0.46</p>\n<p>4.matplotlib-3.3.2</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 源码</strong></p>\n<p><a href=\"http://main.py\">main.py</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">import cv2</span><br><span class=\"line\">from pylab import *</span><br><span class=\"line\"></span><br><span class=\"line\"># 载入图像</span><br><span class=\"line\">im &#x3D; cv2.imread(&#39;1.jpg&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 颜色空间转换</span><br><span class=\"line\">gray &#x3D; cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示原始图像</span><br><span class=\"line\">fig &#x3D; plt.figure()</span><br><span class=\"line\">subplot(121)</span><br><span class=\"line\">plt.gray()</span><br><span class=\"line\">imshow(im)</span><br><span class=\"line\">title(u&#39;彩色图&#39;)</span><br><span class=\"line\">axis(&#39;off&#39;)</span><br><span class=\"line\"># 显示灰度化图像</span><br><span class=\"line\">plt.subplot(122)</span><br><span class=\"line\">plt.gray()</span><br><span class=\"line\">imshow(gray)</span><br><span class=\"line\">title(u&#39;灰度图&#39;)</span><br><span class=\"line\">axis(&#39;off&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br></pre></td></tr></table></figure>\n<p><strong>效果图</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761716-2dba9f80-902f-11eb-925c-aec4491487ee.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "http://example.com/2021/05/08/python%E9%80%9A%E8%BF%87%E9%82%AE%E4%BB%B6%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%94%B5%E8%84%91/",
            "url": "http://example.com/2021/05/08/python%E9%80%9A%E8%BF%87%E9%82%AE%E4%BB%B6%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%94%B5%E8%84%91/",
            "title": "让繁琐的工作自动化——python处理email",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"让繁琐的工作自动化python处理email\"><a class=\"markdownIt-Anchor\" href=\"#让繁琐的工作自动化python处理email\">#</a> 让繁琐的工作自动化 ——python 处理 email</h2>\n<p>今天来谈一谈，如何用 python 处理 Email。今天的示例选用 QQ 邮箱。</p>\n<p>以及写个利用邮件远程控制电脑下载图片。</p>\n<hr>\n<p><strong>1. 环境</strong></p>\n<blockquote>\n<p>1.python3.8</p>\n<p>2.pyzmail36 v1.04</p>\n<p>3.IMAPClient v2.1.0</p>\n<p>4.PyEmail v0.0.1</p>\n</blockquote>\n<p><strong>如果 pyzmail 安装报错，请安装 pyzmail36。</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761745-5b074d80-902f-11eb-9087-99fe74011332.png\" alt=\"image\"></p>\n<span id=\"more\"></span>\n<p><strong>2. 准备工作</strong></p>\n<p>需要准备个 qq 邮箱，这个很容易吧。</p>\n<p>网页登录 qq 邮箱，点击设置，点击账户。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761792-7d00d000-902f-11eb-9476-a7852e23885d.png\" alt=\"image\"></p>\n<p>开启 IMAP/SMTP 服务。会生成一个授权码，把它记下来，后面需要用，这玩意相当于密码。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761796-82f6b100-902f-11eb-8e3d-bfdd35a12978.png\" alt=\"image\"></p>\n<p>QQ 邮箱的一些信息，后面需要用</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761800-89852880-902f-11eb-859d-d55b56cdc77b.png\" alt=\"image\"></p>\n<p><strong>3. 发送邮件</strong></p>\n<p>导入 smtplib</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import smtplib</span><br></pre></td></tr></table></figure>\n<p>连接到 SMTP 服务器，smtplib.SMTP ()，第一个参数是 SMTP 服务器的域名，第二个是端口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj &#x3D; smtplib.SMTP(&#39;smtp.qq.com&#39;, 587)</span><br></pre></td></tr></table></figure>\n<p>给服务器打个招呼，问个好。</p>\n<p><strong>注意：得到 SMTP 对象后必须调用 ehlo () 方法，向 SMTP 服务器问好。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj.ehlo()</span><br></pre></td></tr></table></figure>\n<p>如果连接 SMTP 587 端口（使用 TLS 加密），需要调用 starttls ()；如果连接 SMTP 465 端口（使用 SSL），加密一设置，无需使用 starttls () 方法，请跳过这一步。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj.starttls()</span><br></pre></td></tr></table></figure>\n<p>登录账号。</p>\n<p><strong>注意：第一个填写邮箱，第二个填生成的授权码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj.login(&#39;xxxxxx@qq.com&#39;, &#39;passwd&#39;)</span><br></pre></td></tr></table></figure>\n<p>发送邮件。</p>\n<p><strong>注意：第一个参数填写登录的邮箱，第二个参数目的邮箱，第三个参数正文内容，必须以字符串’Subject: \\n’开头，作为邮件的主题行，’\\n’将正文与主题分割。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj.sendmail(&#39;你的邮箱&#39;,&#39;目的邮箱&#39;,&#39;Subject: haha\\nhello,nie.&#39;)</span><br></pre></td></tr></table></figure>\n<p>与 SMTP 服务器断开。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj.quit()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761828-a15cac80-902f-11eb-8694-27af6d354457.png\" alt=\"image\"></p>\n<p><strong>4. 获取邮件与删除邮件</strong></p>\n<p>导入模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pyzmail</span><br><span class=\"line\">import imapclient</span><br><span class=\"line\">import imaplib</span><br></pre></td></tr></table></figure>\n<p>连接 IMAP 服务器，imapclient.IMAPClient（）方法第一个参数 IMAP 服务器域名，第二个参数开启 SSL 加密（大多数邮件提供商要求开启 SSL 加密）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imapObj &#x3D; imapclient.IMAPClient(&#39;imap.qq.com&#39;, ssl&#x3D;True)</span><br></pre></td></tr></table></figure>\n<p>登录到 IMAP 服务器</p>\n<p><strong>注意：第一个参数你滴邮箱，第二个参数生成的授权码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imapObj.login(&#39;xxxxxxx@qq.com&#39;, &#39;passwd&#39;)</span><br></pre></td></tr></table></figure>\n<p>选择文件夹，文件夹有很多，可以通过 list_folders () 方法获取文件夹列表（返回元组类型）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 &#x3D; imapObj.list_folders()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>注意：我为了输出好看，导入了 pprint 模块，调用 pprint.pprint (list1) 输出</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761848-bdf8e480-902f-11eb-96a7-a61b1984039f.png\" alt=\"image\"></p>\n<p>选择文件夹，一般都有‘INBOX’(收件箱) 这个文件夹，readonly 是只读，如果你的程序不需删除邮件，建议将该参数设置为 True。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imapObj.select_folder(&#39;INBOX&#39;, readonly&#x3D;True)</span><br></pre></td></tr></table></figure>\n<p>搜索，search () 方法参数是字符串列表文末附录查看搜索键。该方法返回消息 ID 列表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIds &#x3D; imapObj.search([&#39;ALL&#39;])</span><br></pre></td></tr></table></figure>\n<p><strong>注意：若你的搜索有大量数据，python 会抛出异常，请加入以下代码，数字代表最大字节数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import imaplib</span><br><span class=\"line\">imaplib._MAXLINE &#x3D; 100000000</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761859-c9e4a680-902f-11eb-8462-ad0d53440cc3.png\" alt=\"image\"></p>\n<p>获取电子邮件内容，以下代码获取了 4 个 eamil 的信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msgList &#x3D; imapObj.fetch(MIds, [&#39;BODY[]&#39;])</span><br></pre></td></tr></table></figure>\n<p>获取电子邮件的一些信息，为了操作简洁，先导入 pyzmail 模块，创建 PyzMessage 对象，使解析电子邮件变得更方便。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pyzmail</span><br><span class=\"line\">msg &#x3D; pyzmail.PyzMessage.factory(msgList[10][b&#39;BODY[]&#39;])</span><br></pre></td></tr></table></figure>\n<p>获取主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subject &#x3D; msg.get_subject()</span><br></pre></td></tr></table></figure>\n<p>获取地址</p>\n<p><strong>注意：‘from’ 可替换为’to’,‘cc’,‘bcc’。cc 指抄送，bcc 指密送。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addr &#x3D; msg.get_addresses(&#39;from&#39;)</span><br></pre></td></tr></table></figure>\n<p>获取正文，email 可以是纯文本或 HTML 的混合，若 email 只含纯文本 PyzMwssage 对象的 html_part 设置为 None；若 email 只含 HTML，PyzMwssage 对象的 text_part 设置为 None。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if msg.text_part !&#x3D; None:</span><br><span class=\"line\">\ttext &#x3D; msg.text_part.get_payload().decode(msg.text_part.charset)</span><br><span class=\"line\">if msg.html_part !&#x3D; None:</span><br><span class=\"line\">\thtml &#x3D; msg.html_part.get_payload().decode(msg.html_part.charset)</span><br></pre></td></tr></table></figure>\n<p>删除电子邮件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imapObj.select_folder(&#39;INBOX&#39;, readonly&#x3D;False)</span><br><span class=\"line\">imapObj.delete_messages(消息ID)</span><br></pre></td></tr></table></figure>\n<p>与 IMAP 服务器断开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imapObj.logout()</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"实例实现通过邮件远程控制电脑下载图片\"><a class=\"markdownIt-Anchor\" href=\"#实例实现通过邮件远程控制电脑下载图片\">#</a> 实例 —— 实现通过邮件远程控制电脑下载图片。</h2>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761882-e680de80-902f-11eb-8ab8-f098427ffb0a.png\" alt=\"image\"></p>\n<p>这不就下载好了吗</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761886-ee408300-902f-11eb-85ae-85f5401dcf85.png\" alt=\"image\"></p>\n<p><strong>注意：本例子写得太过于粗糙，有太多的问题需要修改。仅仅是为大家演示一种使用思路。</strong></p>\n<p><strong>源码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import imaplib</span><br><span class=\"line\">import pyzmail</span><br><span class=\"line\">import imapclient</span><br><span class=\"line\">import time</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def download(urls):</span><br><span class=\"line\">    for url in urls:</span><br><span class=\"line\">        res &#x3D; requests.get(url.replace(&#39;&amp;&#39;, &#39;&amp;&#39;))</span><br><span class=\"line\">        with open(str(time.time()) + &#39;.jpg&#39;, &#39;wb&#39;) as file:</span><br><span class=\"line\">            file.write(res.content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def checknewpic():</span><br><span class=\"line\"></span><br><span class=\"line\">    imapObj &#x3D; imapclient.IMAPClient(&#39;imap.qq.com&#39;, ssl&#x3D;True)</span><br><span class=\"line\">    imapObj.login(&#39;xxxxx@qq.com&#39;, &#39;passwd&#39;)</span><br><span class=\"line\">    print(imapObj.select_folder(&#39;INBOX&#39;, readonly&#x3D;True))</span><br><span class=\"line\">    MIds &#x3D; imapObj.search([&#39;ALL&#39;])</span><br><span class=\"line\">    msgList &#x3D; imapObj.fetch(MIds, [&#39;BODY[]&#39;])</span><br><span class=\"line\">    for id in MIds:</span><br><span class=\"line\">        msg &#x3D; pyzmail.PyzMessage.factory(msgList[id][b&#39;BODY[]&#39;])</span><br><span class=\"line\">        if msg.get_subject() &#x3D;&#x3D; &quot;下载图片&quot;:</span><br><span class=\"line\">            if msg.text_part !&#x3D; None:</span><br><span class=\"line\">                urls &#x3D; msg.text_part.get_payload().decode(msg.text_part.charset).split(&#39;^&#39;)</span><br><span class=\"line\">                download(urls)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    checknewpic()</span><br><span class=\"line\">    time.sleep(60)</span><br><span class=\"line\">print(&#39;---------执行完毕-----------&#39;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"附录\"><a class=\"markdownIt-Anchor\" href=\"#附录\">#</a> 附录</h2>\n<p>‘ALL’：返回该文件夹中的所有邮件。如果你请求一个大文件夹中的所有信息，可能会遇到 imaplib 的大小限制</p>\n<p>‘BEFORE/ON/SINCE date’：分别返回给定的 date 之前、当天、之后 IMAP 服务器接受的消息，日期格式必须是 01-Jul-2020<br>\n 此外，虽然 “SINCE 01-Jul-2020” 将匹配 7 月 1 日当天和之后的消息，但是 “BEFORE 01-Jul-2020” 仅匹配 7 月 1 日之前的消息，不包括 7 月 1 日当天</p>\n<p>‘SUBJECT/BODY/TEXT string’: 分别返回 string 出现在主题、正文、主题或正文中的消息，如果 string 中有空格，就是用双引号</p>\n<p>‘FROM/TO/CC/BCC string’: 返回所有信息，其中 string 分别出现在 “from” 邮件地址、“to” 邮件地址、“cc”（抄送）地址、或 “bcc”（密件抄送）地址<br>\n如果 string 中有多个邮件地址，就是用空格将他们分割开，并使用双引号</p>\n<p>‘SEEN/UNSEEN’：分别返回包含和不包含 \\Seen 标记的所有信息。如果电子邮件已经被 fetch () 方法调用访问，或者你曾在电子邮件程序中或网络浏览器中点击过它，<br>\n就会有 \\Seen 标记，比较常用的说法是 “已读” 而不是 “已看”</p>\n<p>‘ANSWERED/UNANSERED’: 分别返回包含和不包含 \\Answered 标记的所有信息，如果消息已答复就会有 \\Answered 标记</p>\n<p>‘DELERED/UNDELETED’: 分别返回包含和不包含 \\Deleted 标记的所有信息，用 delete_messages () 方法删除的邮件就会有 \\Deleted 标记，直到调用 expunge () 方法才<br>\n会永久删除</p>\n<p>‘DRAFT/UNDRAFT’：分别返回包含和不包含 \\Draft 标记的所有信息，草稿邮件通常保存在单独的草稿文件夹中，而不是收件箱</p>\n<p>‘FLAGGED/UNFLAGGED’：分别返回包含和不包含 \\Flagged 标记的所有信息，这个标记通常用来标记电子邮件的 “重要” 或 “紧急”</p>\n<p>‘LARGER/SMALLER N’：分别返回大于或小于 N 个字节的所有信息</p>\n<p>‘NOT search-key’: 返回搜索键不会返回的那些信息</p>\n<p>‘OR search-key1 search-key2’: 返回符合第一个或者第二个搜索键的信息</p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "http://example.com/2021/05/08/%E5%A4%84%E7%90%86Ubuntu%20python%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/05/08/%E5%A4%84%E7%90%86Ubuntu%20python%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E9%97%AE%E9%A2%98/",
            "title": "处理Ubuntu python多版本管理问题",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"处理ubuntu-python多版本管理问题\"><a class=\"markdownIt-Anchor\" href=\"#处理ubuntu-python多版本管理问题\">#</a> 处理 Ubuntu python 多版本管理问题</h2>\n<p>前几天在 Ubuntu 遇到了 Python 多版本问题，今天心血来潮，想把自己摸索到的方法记录下来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统安装的Python版本</span><br><span class=\"line\">python2.7</span><br><span class=\"line\">python3.6</span><br><span class=\"line\">python3.7</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统pip版本</span><br><span class=\"line\">pip</span><br><span class=\"line\">pip2</span><br><span class=\"line\">pip3</span><br></pre></td></tr></table></figure>\n<p>当我用 python3.7 开发程序时，需要用 pip3 安装依赖包，pip3 总是把包给我搞到 python3.6 下，让我很不爽。<br>\n下面介绍一种解决方法：</p>\n<span id=\"more\"></span>\n<p>1. 找到 python,pip 所在目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我的系统在&#x2F;usr&#x2F;bin&#x2F;路径下。</span><br><span class=\"line\">命令 cd &#x2F;usr&#x2F;bin</span><br><span class=\"line\">查看一下 ls -l</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761926-1af49a80-9030-11eb-9ae6-9146358eff7b.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761932-1f20b800-9030-11eb-887e-3b0346ee50e8.png\" alt=\"image\"></p>\n<p>冒绿光的是可以执行滴文件</p>\n<p>冒蓝光的是链接文件 (您可以理解为类似 Windows 的快捷方式)</p>\n<p>要想更改 pip3 install 的安装位置，可以这么操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑pip3(这玩意就是个Python脚本)</span><br><span class=\"line\">vim pip3</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761941-28aa2000-9030-11eb-95f1-7efe414f8d3f.png\" alt=\"image\"></p>\n<p>将第一行的 python 版本修改你想要的版本，然后保存，问题就解决喽。</p>\n<p>另一个问题就是你在 shell 命令使用 Python 时，Python 版本问题。</p>\n<p>比如你的系统安装了 Python2.7，Python3.6，Python3.7</p>\n<p>这时你在命令窗口</p>\n<p>输入 python2 -----&gt; 使用 Python2.7 版本</p>\n<p>输入 python3 -----&gt; 使用 Python3.6 版本</p>\n<p>如何使用 Python3.7 呢</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;bin</span><br><span class=\"line\">找到python3.7目录（就是找到前面说的冒绿光的python3.7目录）</span><br><span class=\"line\">添加软链接</span><br><span class=\"line\">ln -s &#x2F;usr&#x2F;bin&#x2F;python3.7(找到python3.7的路径) &#x2F;usr&#x2F;bin&#x2F;python3.7 (软链接名字您老随意)</span><br></pre></td></tr></table></figure>\n<p>为啥软连接的路径在 /usr/bin 下呢</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$PATH</span><br></pre></td></tr></table></figure>\n<p>这些目录应该都可以，你可以试试。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761957-3790d280-9030-11eb-9b88-79752b523601.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "http://example.com/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%20%E5%A4%84%E7%90%86Excle%E6%96%87%E4%BB%B6/",
            "url": "http://example.com/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%20%E5%A4%84%E7%90%86Excle%E6%96%87%E4%BB%B6/",
            "title": "让繁琐的工作自动化——python 处理Excle文件",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"让繁琐的工作自动化python-处理excle文件\"><a class=\"markdownIt-Anchor\" href=\"#让繁琐的工作自动化python-处理excle文件\">#</a> 让繁琐的工作自动化 ——python 处理 Excle 文件</h2>\n<p>今天收到一个省市县区的 Excle 表格，想着整理一下数据，将信息整理为层级关系（省–&gt; 市–&gt;(县 / 区)）存到字典里，以备不时之需。<br>\n打开一看，MD，3 千行数据，这 TM 要搞到神马时候。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762066-80e12200-9030-11eb-80a8-b888769e0f84.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762072-850d3f80-9030-11eb-924b-7d7a213bfe2e.png\" alt=\"image\"></p>\n<hr>\n<p>叮铃铃～～～～叮铃铃～～～～，人生苦短，我用 python。开搞！！！</p>\n<hr>\n<h2 id=\"openpyxl的基础使用\"><a class=\"markdownIt-Anchor\" href=\"#openpyxl的基础使用\">#</a> <strong>openpyxl 的基础使用</strong></h2>\n<p><strong>环境</strong></p>\n<blockquote>\n<p>1.pycharm2020.1</p>\n<p>2.python3.8</p>\n<p>3.openpyxl 2.1.4</p>\n</blockquote>\n<p>openpyxl 已经更新到 3 点多了，我这里演示的是<strong> openpyxl 2.1.4</strong>。</p>\n<p>导入 openpyxl 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import openpyxl</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><strong>读取操作</strong></p>\n<p>打开要处理的文件，该函数需要传入一个文件路径。wb 是一个 Workbook 对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb &#x3D; openpyxl.load_workbook(&quot;省市县区.xlsx&quot;)</span><br></pre></td></tr></table></figure>\n<p>Excel 文档有多个 sheet 组成。</p>\n<p>获得 Excel 文档所有 sheet。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheetList &#x3D; wb.get_sheet_names()</span><br></pre></td></tr></table></figure>\n<p>根据 sheet 名字获取对应表。表由一个 Worksheet 对象表示，sheet 就是一个 Worksheet 对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet &#x3D; wb.get_sheet_by_name(&quot;sheet名字&quot;)</span><br></pre></td></tr></table></figure>\n<p>取得 sheet 表格中的值</p>\n<p>数值定位：row 是行号，column 是列号。</p>\n<p>字符定位：Excle 用字母表示列，数字表示行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x &#x3D; sheet.cell(row&#x3D;1, column&#x3D;1).value #第一种表示</span><br><span class=\"line\">y &#x3D; sheet[&#39;A1&#39;].value #第二种表示</span><br></pre></td></tr></table></figure>\n<p>列字母和数字之间的转换。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openpyxl.cell.column_index_from_string()   #字母----&gt;数字</span><br><span class=\"line\">openpyxl.cell.column_letter()                        #数字----&gt;字母</span><br></pre></td></tr></table></figure>\n<p>获取 sheet 有多大。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet.get_highest_row()        #返回行数</span><br><span class=\"line\">sheet.get_highest_column()  #返回列数</span><br></pre></td></tr></table></figure>\n<p>遍历 sheet</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in range(1, sheet.get_highest_row()  + 1):</span><br><span class=\"line\">    for j in range(1, sheet.get_highest_column()  + 1):</span><br><span class=\"line\">        print(str(sheet1.cell(row&#x3D;i, column&#x3D;j).value) + &quot; &quot;, end&#x3D;&quot;&quot;)</span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure>\n<p><strong>写入操作</strong></p>\n<p>创建新的 Workbook 对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb &#x3D; openpyxl.Workbook()</span><br></pre></td></tr></table></figure>\n<p>保存文件。(传入文件名)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb.save(&quot;haha.xlsx&quot;)</span><br></pre></td></tr></table></figure>\n<p>创建 sheet，index 表示 sheet 的次序，title 表示 sheet 的名字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb.create_sheet(index&#x3D;0,title&#x3D;&#39;haha&#39;)</span><br></pre></td></tr></table></figure>\n<p>删除 sheet，需要传入 Worksheet 对象，如果知道 sheet 的名字，就可使用以下代码删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb.remove_sheet(wb.get_sheet_by_name(&quot;sheet名字&quot;))</span><br></pre></td></tr></table></figure>\n<p>写入数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet.cell(row&#x3D;1, column&#x3D;1) &#x3D; x #第一种表示</span><br><span class=\"line\">sheet[&#39;A1&#39;] &#x3D; y #第二种表示</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"处理表格的源码\"><a class=\"markdownIt-Anchor\" href=\"#处理表格的源码\">#</a> <strong>处理表格的源码</strong></h2>\n<p>原表格公众号回复【省市】获得</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pprint</span><br><span class=\"line\">import openpyxl</span><br><span class=\"line\">wb &#x3D; openpyxl.load_workbook(&quot;省市县区.xlsx&quot;)</span><br><span class=\"line\">sheet &#x3D; wb.get_sheet_by_name(&quot;省市县区&quot;)</span><br><span class=\"line\">data &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(2, sheet.get_highest_row() + 1):</span><br><span class=\"line\">    province &#x3D; sheet.cell(row&#x3D;i, column&#x3D;1).value</span><br><span class=\"line\">    city &#x3D; sheet.cell(row&#x3D;i, column&#x3D;2).value</span><br><span class=\"line\">    county &#x3D; sheet.cell(row&#x3D;i, column&#x3D;3).value</span><br><span class=\"line\">    data.setdefault(province, &#123;&#125;)</span><br><span class=\"line\">    data[province].setdefault(city, [])</span><br><span class=\"line\">    if data[province][city].count(county) &#x3D;&#x3D; 0:</span><br><span class=\"line\">        data[province][city].append(county)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;数据整理完毕，开始写入文件&quot;)</span><br><span class=\"line\">with open(&quot;cityInfo.py&quot;, &quot;w&quot;, encoding&#x3D;&#39;utf-8&#39;) as file:</span><br><span class=\"line\">    file.write(&quot;cityInfo &#x3D; &quot; + pprint.pformat(data))</span><br><span class=\"line\">print(&quot;文件写入完毕&quot;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "http://example.com/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%E5%A4%84%E7%90%86CSV%E6%96%87%E4%BB%B6/",
            "url": "http://example.com/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%E5%A4%84%E7%90%86CSV%E6%96%87%E4%BB%B6/",
            "title": "让繁琐的工作自动化——python处理CSV文件",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"让繁琐的工作自动化python处理csv文件\"><a class=\"markdownIt-Anchor\" href=\"#让繁琐的工作自动化python处理csv文件\">#</a> 让繁琐的工作自动化 ——python 处理 CSV 文件</h2>\n<p>CSV：CSV 文件是一种简化的电子表格，不同于 Excle (二进制文件)，CSV 是纯文本文件。</p>\n<hr>\n<p><strong>1. 环境</strong></p>\n<blockquote>\n<p>1.python3.8</p>\n<p>2.pycharm2020.1</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 读取</strong></p>\n<hr>\n<p><strong>本期实例数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haha,18,10.0</span><br><span class=\"line\">jiji,16,12.1</span><br><span class=\"line\">lala,17,11.9</span><br><span class=\"line\">papa,11,13.3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762127-bb4abf00-9030-11eb-9720-275c57179ad9.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762129-bf76dc80-9030-11eb-9ac9-76ee5b99ab5b.png\" alt=\"image\"></p>\n<hr>\n<p>首先导入 csv 模块，不需要安装，python 自带的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import csv</span><br></pre></td></tr></table></figure>\n<p>要想用 csv 模块读取 csv 文件数据，需要先创建一个 Reader 对象，Reader 可以遍历文件的每一行。</p>\n<p><strong>注意：Reader 对象只能循环遍历一次，如果想要再次遍历，需要重新创建。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file &#x3D; open(&quot;haha.csv&quot;)</span><br><span class=\"line\">reader &#x3D; csv.reader(file)</span><br><span class=\"line\">data &#x3D; list(reader)</span><br><span class=\"line\">print(data)</span><br></pre></td></tr></table></figure>\n<p>以下为在交互式界面操作。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762140-c867ae00-9030-11eb-9532-6a095423bf3c.png\" alt=\"image\"></p>\n<p>使用 Reader 对象遍历数据，Reader.line_num 标志当前遍历到第几行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import csv</span><br><span class=\"line\">file &#x3D; open(&quot;haha.csv&quot;)</span><br><span class=\"line\">reader &#x3D; csv.reader(file)</span><br><span class=\"line\">for row in reader:</span><br><span class=\"line\">    print((&quot;第&#123;&#125;行  &quot; + str(row)).format(reader.line_num))</span><br></pre></td></tr></table></figure>\n<p><strong>3. 写入</strong></p>\n<p>将数据写入到 CSV 文件，需要用到 Writer 对象。</p>\n<p>与读取一样，先导入 csv 模块，然后打开文件。</p>\n<p><strong>encoding 是编码；newline 等于空字符，若不设置，在 Windows 系统上，行距会变成下图所示。</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762172-e503e600-9030-11eb-90f8-266b1ecbf2ba.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import csv</span><br><span class=\"line\">file &#x3D; open(&#39;haha.csv&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;, newline&#x3D;&#39;&#39;)</span><br></pre></td></tr></table></figure>\n<p>创建 Writer 对象，csv.writer () 有两个参数需要注意。</p>\n<p>delimiter： 单元格分隔符，默认为逗号，可以修改为其他。</p>\n<p>lineterminator：行终止符，默认为换行符，可以自行修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writer &#x3D; csv.writer(file)</span><br></pre></td></tr></table></figure>\n<p>写入数据，使用 writer.writerow（），该函数接受一个列表，返回写入该行的字符数（包括换行符）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writer.writerow([&#39;haha&#39;, &#39;18&#39;, &#39;10.0&#39;])</span><br><span class=\"line\">writer.writerow([&#39;jiji&#39;, &#39;16&#39;, &#39;12.1&#39;])</span><br><span class=\"line\">writer.writerow([&#39;lala&#39;, &#39;17&#39;, &#39;11.9&#39;])</span><br><span class=\"line\">writer.writerow([&#39;papa&#39;, &#39;11&#39;, &#39;13.3&#39;])</span><br></pre></td></tr></table></figure>\n<p>写入完整源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import csv</span><br><span class=\"line\">file &#x3D; open(&#39;haha.csv&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class=\"line\">writer &#x3D; csv.writer(file)</span><br><span class=\"line\">writer.writerow([&#39;haha&#39;, &#39;18&#39;, &#39;10.0&#39;])</span><br><span class=\"line\">writer.writerow([&#39;jiji&#39;, &#39;16&#39;, &#39;12.1&#39;])</span><br><span class=\"line\">writer.writerow([&#39;lala&#39;, &#39;17&#39;, &#39;11.9&#39;])</span><br><span class=\"line\">writer.writerow([&#39;papa&#39;, &#39;11&#39;, &#39;13.3&#39;])</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"原创不易点个赞再走吧\"><a class=\"markdownIt-Anchor\" href=\"#原创不易点个赞再走吧\">#</a> 原创不易，点个赞再走吧。</h2>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "http://example.com/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%E5%A4%84%E7%90%86JSON%E6%96%87%E4%BB%B6/",
            "url": "http://example.com/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%E5%A4%84%E7%90%86JSON%E6%96%87%E4%BB%B6/",
            "title": "让繁琐的工作自动化——python处理JSON文件",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"让繁琐的工作自动化python处理json文件\"><a class=\"markdownIt-Anchor\" href=\"#让繁琐的工作自动化python处理json文件\">#</a> 让繁琐的工作自动化 ——python 处理 JSON 文件</h2>\n<p>不得不说，python 真 TMD 香。由于 python 解析 json 过于简洁，我只好写个实例了，不然文章太短。</p>\n<hr>\n<p><strong>1. 环境</strong></p>\n<blockquote>\n<p>1.python3.8</p>\n<p>2.pycharm 2020.1</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 读取 JSON 数据</strong></p>\n<p>当然首先要导入 json 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br></pre></td></tr></table></figure>\n<p>读取 json 数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data &#x3D; &#39;&#123;&quot;a&quot;:123,&quot;b&quot;:&quot;lala&quot;&#125;&#39;</span><br><span class=\"line\">result &#x3D; json.loads(data)</span><br><span class=\"line\">print(result)</span><br><span class=\"line\">print(result[&#39;a&#39;])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>交互式界面</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762217-18df0b80-9031-11eb-9e35-4f17627d66e8.png\" alt=\"image\"></p>\n<p><strong>3. 写出 JSON 数据</strong></p>\n<p>导入模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br></pre></td></tr></table></figure>\n<p>输出 json 数据，将 python 字典转为 json 数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data &#x3D; &#123;&#39;a&#39;:1234,&#39;b&#39;:&#39;lalala&#39;&#125;</span><br><span class=\"line\">result &#x3D; json.dumps(data)</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762229-20061980-9031-11eb-94fc-64eabfd6889a.png\" alt=\"image\"></p>\n<h2 id=\"实例抓取中国地震台网数据解析json数据包\"><a class=\"markdownIt-Anchor\" href=\"#实例抓取中国地震台网数据解析json数据包\">#</a> 实例，抓取中国地震台网数据，解析 JSON 数据包。</h2>\n<p><strong>完整源码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">res &#x3D; requests.get(&#39;http:&#x2F;&#x2F;news.ceic.ac.cn&#x2F;ajax&#x2F;google&#39;)</span><br><span class=\"line\">text &#x3D; res.text.encode(&#39;utf-8&#39;)</span><br><span class=\"line\">result &#x3D; json.loads(text)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#39;%-20s&#39; % &#39;id&#39; &#39;%-20s&#39; % &#39;地点&#39; &#39;%-20s&#39; % &#39;震级&#39; &#39;%-20s&#39; % &#39;经度&#39; &#39;%-20s&#39; % &#39;纬度&#39; &#39;%-20s&#39; % &#39;深度&#39; &#39;%-20s&#39; % &#39;时间&#39;)</span><br><span class=\"line\">for e in result:</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&#39;%-20s&#39; % str(e[&#39;id&#39;]), &#39;%-20s&#39; % str(e[&#39;LOCATION_C&#39;]), &#39;%-20s&#39; % str(e[&#39;M&#39;]), &#39;%-20s&#39; % str(e[&#39;EPI_LON&#39;]), &#39;%-20s&#39; % str(e[&#39;EPI_LAT&#39;]), &#39;%-20s&#39; % str(e[&#39;EPI_DEPTH&#39;]), &#39;%-20s&#39; % str(e[&#39;O_TIME&#39;]))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>排版有点烂，各位大爷多多包涵。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762239-2c8a7200-9031-11eb-80bb-661790cab334.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762241-30b68f80-9031-11eb-9a31-06ebbd75da8c.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        }
    ]
}