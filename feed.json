{
    "version": "https://jsonfeed.org/version/1",
    "title": "wuhen's blog",
    "description": "",
    "home_page_url": "https://blog.wuhen.one",
    "items": [
        {
            "id": "https://blog.wuhen.one/2021/05/08/Burp%20suite%20%E5%88%86%E6%9E%90%20HTTP%E5%8D%8F%E8%AE%AE/",
            "url": "https://blog.wuhen.one/2021/05/08/Burp%20suite%20%E5%88%86%E6%9E%90%20HTTP%E5%8D%8F%E8%AE%AE/",
            "title": "Burp suite 分析 HTTP协议",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"burp-suite-分析-http协议\"><a class=\"markdownIt-Anchor\" href=\"#burp-suite-分析-http协议\">#</a> Burp suite 分析 HTTP 协议</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.manjaro-gnome-20.1.2</p>\n<p>2.Burp suite-Community-v2020.11.1(<a href=\"https://portswigger.net/burp/communitydownload\">下载地址</a>)</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2.Burp suite 安装与配置</strong></p>\n<p>打开 Firefox，安装下图插件。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759866-82f2b300-9027-11eb-9109-22406fbc436e.png\" alt=\"image\"></p>\n<p>配置代理，端口号可自行选择 (选择空闲的就可)。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759873-8a19c100-9027-11eb-8f61-d61f5a0778b5.png\" alt=\"image\"></p>\n<p>配置 Burp suite，端口要与前面的配置一致。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759882-9140cf00-9027-11eb-8472-c7fef4263608.png\" alt=\"image\"></p>\n<p>访问 http://burp/ 下载 burpsuite ca 证书</p>\n<p><strong>需开启刚刚配置的代理</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759892-9e5dbe00-9027-11eb-8a0f-c379cd70e536.png\" alt=\"image\"></p>\n<p>点击右上角 CA Certificate</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759900-a9185300-9027-11eb-84f7-d4e9cccddb1f.png\" alt=\"image\"></p>\n<p>点击首选项 &gt;&gt; 隐私与安全 &gt;&gt; 查看证书</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759905-b03f6100-9027-11eb-9bac-3b4bb02cafeb.png\" alt=\"image\"></p>\n<p>导入刚刚下载的证书</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759913-b7666f00-9027-11eb-8be9-83c3d153a4e2.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759926-bf261380-9027-11eb-8e86-9d97e53a5bc2.png\" alt=\"image\"></p>\n<p><strong>3. 分析 HTTP</strong></p>\n<p>开启拦截，在 Firefox 输入 https://www.baidu.com</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759937-ce0cc600-9027-11eb-9473-226d66de8df3.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759941-d238e380-9027-11eb-921d-f72ea0a2dbc1.png\" alt=\"image\"></p>\n<p>至此，你就可以拦截请求与响应开始装逼了 (请参照附录分析)。</p>\n<p><strong>HTTP 状态码</strong></p>\n<p>所有 HTTP 响应的第一行都是状态行，依次是当前 HTTP 版本号，3 位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。<br>\n状态代码的第一个数字代表当前响应的类型：</p>\n<blockquote>\n<p>1xx 消息 —— 请求已被服务器接收，继续处理</p>\n<p>2xx 成功 —— 请求已成功被服务器接收、理解、并接受</p>\n<p>3xx 重定向 —— 需要后续操作才能完成这一请求</p>\n<p>4xx 请求错误 —— 请求含有词法错误或者无法被执行</p>\n<p>5xx 服务器错误 —— 服务器在处理某个正确请求时发生错误</p>\n</blockquote>\n<p><strong>HTTP 请求方法</strong></p>\n<p>请读者自行学习 GET 与 POST (重点哦)</p>\n<blockquote>\n<p>GET</p>\n<p>POST</p>\n<p>HEAD</p>\n<p>PUT</p>\n<p>DELETE</p>\n<p>TRACE</p>\n<p>OPTIONS</p>\n<p>CONNECT</p>\n</blockquote>\n<hr>\n<h2 id=\"附录\"><a class=\"markdownIt-Anchor\" href=\"#附录\">#</a> 附录</h2>\n<hr>\n<p><strong>请求字段</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759982-fa284700-9027-11eb-8e78-6f9da87f48b3.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759985-fe546480-9027-11eb-8d9b-3c7f7c17250c.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760006-0dd3ad80-9028-11eb-946f-9ce5f27cda59.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759992-044a4580-9028-11eb-80b1-28aad9ba0f86.png\" alt=\"image\"></p>\n<p><strong>响应字段</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760052-35c31100-9028-11eb-9cd9-c44dcad3b507.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760057-3b205b80-9028-11eb-8ba3-0921f90df43c.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760067-407da600-9028-11eb-9702-6c8f964dd914.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760071-46738700-9028-11eb-9dad-a223d2f45c3d.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/JDK%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/",
            "url": "https://blog.wuhen.one/2021/05/08/JDK%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/",
            "title": "ubuntu安装教程",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"ubuntu安装教程\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu安装教程\">#</a> ubuntu 安装教程</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.ubuntu16.04(<a href=\"https://blog.csdn.net/qq_43938052/article/details/107326122\">安装教程</a>)</p>\n<p>2.jdk-14.0.1(<a href=\"https://www.oracle.com/java/technologies/javase/jdk14-archive-downloads.html\">下载地址</a>)</p>\n</blockquote>\n<p>我下载的是这个</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761285-2b574600-902d-11eb-8c61-80046f0993f3.png\" alt=\"image\"></p>\n<span id=\"more\"></span>\n<p><strong>2. 解压</strong></p>\n<p>将 jdk 下载到 /usr/local/java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local</span><br><span class=\"line\">mkdir java</span><br><span class=\"line\">cd java</span><br><span class=\"line\">tar -zxvf jdk-14.0.1_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761292-33af8100-902d-11eb-8bc7-942f4b552936.png\" alt=\"image\"></p>\n<p>解压后会出现一个 jdk-14.0.1 文件夹。</p>\n<p><strong>3. 配置 JDK 环境变量</strong></p>\n<p>vim /etc/profile<br>\n 加入以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk-14.0.1</span><br><span class=\"line\">CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;</span><br><span class=\"line\">PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</span><br><span class=\"line\">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>\n<p>刷新一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>\n<p>验证一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761299-3dd17f80-902d-11eb-9ceb-9a1b73fc5dc9.png\" alt=\"image\"></p>\n<p>nice，安装成功！！！！</p>\n<hr>\n<h2 id=\"windows\"><a class=\"markdownIt-Anchor\" href=\"#windows\">#</a> windows</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.jdk-14.0.1(<a href=\"https://www.oracle.com/java/technologies/javase/jdk14-archive-downloads.html\">下载地址</a>)</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761312-47f37e00-902d-11eb-8866-d9b45813b336.png\" alt=\"image\"></p>\n<p>由于是图形化安装，就不写详细过程了，<strong>注意记住安装路径</strong>。</p>\n<p><strong>2. 配置环境</strong></p>\n<p>右键此电脑，点击属性。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761323-5b064e00-902d-11eb-80fb-86d99c396aa3.png\" alt=\"image\"></p>\n<p>点击高级系统设置</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761335-69ed0080-902d-11eb-808c-5e4f2bd30525.png\" alt=\"image\"></p>\n<p>点击环境变量</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761339-71140e80-902d-11eb-8795-2873793c1837.png\" alt=\"image\"></p>\n<p>JAVA_HOME（值填写 jdk 安装路径）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761344-78d3b300-902d-11eb-8c07-08287a5b2bcf.png\" alt=\"image\"></p>\n<p>CLASSPATH</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</span><br></pre></td></tr></table></figure>\n<p>在 PATH 里添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin</span><br><span class=\"line\">%JAVA_HOME%\\jre\\bin</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761354-85580b80-902d-11eb-8de3-02f663233d35.png\" alt=\"image\"></p>\n<p>一路保存</p>\n<p><strong>3. 验证</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761368-8f7a0a00-902d-11eb-96ee-9af33f3ab53e.png\" alt=\"image\"></p>\n<p>nice，成功了！！！！！！</p>\n<hr>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "软件安装"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/Ubuntu%20Centos%E9%9D%99%E6%80%81ip%E8%AE%BE%E7%BD%AE/",
            "url": "https://blog.wuhen.one/2021/05/08/Ubuntu%20Centos%E9%9D%99%E6%80%81ip%E8%AE%BE%E7%BD%AE/",
            "title": "Ubuntu Centos静态ip设置",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"ubuntu-centos静态ip设置\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu-centos静态ip设置\">#</a> Ubuntu Centos 静态 ip 设置</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.VMware16.0.0</p>\n<p>2.Ubuntu16.04(<a href=\"https://blog.csdn.net/qq_43938052/article/details/107326122\">安装教程</a>)</p>\n<p>3.Centos8</p>\n<p>4.VMware 网络模式：NAT</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 配置 VMnet8</strong></p>\n<p>打开 PowerShell，执行命令，查看虚拟网卡是否安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806401-50899a00-90a9-11eb-8d6d-fe3fe95e6a56.png\" alt=\"image\"></p>\n<p>VMnet8 用于 NAT 模式。</p>\n<p>若无上图两块虚拟网卡，请打开 VMware，虚拟网络编辑器，还原默认设置。（需要管理员权限）若有上图虚拟网卡，自行跳过这一步。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806452-5c755c00-90a9-11eb-8162-eead8e9da02d.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806472-61d2a680-90a9-11eb-9e6b-c5e56dc17b80.png\" alt=\"image\"></p>\n<p>打开控制面板，右击 VMnet8 属性。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806533-72831c80-90a9-11eb-9c04-9bc00b6f1df4.png\" alt=\"image\"></p>\n<p>点击属性</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806555-7a42c100-90a9-11eb-9871-434094e59edc.png\" alt=\"image\"></p>\n<p>配置</p>\n<p>IP 地址你也可以自定义。</p>\n<p>比如 IP 地址你定义为 192.168.146.1，那么你的网关的前 3 段要一样 192.168.146</p>\n<p><strong>你可以翻阅一下有关子网掩码、网络地址和主机地址等知识</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806602-8af33700-90a9-11eb-9a1a-d53cb9c36600.png\" alt=\"image\"></p>\n<p>接下来开始配置 VMware。因为需要配置静态 ip，所以要将本地 DHCP 服务给取消了。配置子网 IP，子网掩码。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806621-93e40880-90a9-11eb-92bb-e1befd18276e.png\" alt=\"image\"></p>\n<p>填写网关，要与前面的配置一致</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806666-9e9e9d80-90a9-11eb-8e4d-aa03a1153681.png\" alt=\"image\"></p>\n<p>一路保存。开启 ubuntu，centOS 开始配置。</p>\n<p><strong>3.ubuntu 配置</strong></p>\n<p>执行命令，查看网络信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806701-a9593280-90a9-11eb-8963-96a61554876d.png\" alt=\"image\"></p>\n<p>我们需要给 ens33 配置一个静态 ip，执行命令，开始配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;network&#x2F;interfaces</span><br></pre></td></tr></table></figure>\n<p>配置内容如下</p>\n<p><strong>iface ens33 inet static 静态 ip（static，原来是 dhcp）</strong></p>\n<p><strong>address ip 地址</strong></p>\n<p><strong>netmask 子网掩码</strong></p>\n<p><strong>gateway 网关</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This file describes the network interfaces available on your system</span><br><span class=\"line\"># and how to activate them. For more information, see interfaces(5).</span><br><span class=\"line\"></span><br><span class=\"line\">source &#x2F;etc&#x2F;network&#x2F;interfaces.d&#x2F;*</span><br><span class=\"line\"></span><br><span class=\"line\"># The loopback network interface</span><br><span class=\"line\">auto lo</span><br><span class=\"line\">iface lo inet loopback</span><br><span class=\"line\">auto ens33</span><br><span class=\"line\">iface ens33 inet static</span><br><span class=\"line\">address 192.168.146.104</span><br><span class=\"line\">netmask 255.255.255.0</span><br><span class=\"line\">gateway 192.168.146.2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806845-cee63c00-90a9-11eb-834a-b7c7d09d546b.png\" alt=\"image\"></p>\n<p>保存。<br>\n执行命令，配置 DNS 服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;resolvconf&#x2F;resolv.conf.d&#x2F;base</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806903-ddccee80-90a9-11eb-9d87-be913a49d4d0.png\" alt=\"image\"></p>\n<p>保存。<br>\n重启一下机子就好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806945-e9b8b080-90a9-11eb-9fd5-399cb283cee2.png\" alt=\"image\"></p>\n<p>成功。</p>\n<p><strong>4.CentOS 配置</strong></p>\n<p>执行命令，查看网络</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112806992-f5a47280-90a9-11eb-94d8-62c9e99b9b34.png\" alt=\"image\"></p>\n<p>需要配置 ens33。</p>\n<p>执行命令，开始配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</span><br></pre></td></tr></table></figure>\n<p>填写以下内容</p>\n<p>BOOTPROTO 填 static</p>\n<p>IPADDR 填你要设定的 IP</p>\n<p>GATEWAY 填写网关</p>\n<p>NETMASK 填写子网掩码</p>\n<p>DNS1 填写 DNS 服务器地址，填网关就好</p>\n<p>ONBOOT 填 yes</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE&#x3D;Ethernet</span><br><span class=\"line\">PROXY_METHOD&#x3D;none</span><br><span class=\"line\">BROWSER_ONLY&#x3D;no</span><br><span class=\"line\">BOOTPROTO&#x3D;static</span><br><span class=\"line\">DEFROUTE&#x3D;yes</span><br><span class=\"line\">IPADDR&#x3D;192.168.146.129</span><br><span class=\"line\">GATEWAY&#x3D;192.168.146.2</span><br><span class=\"line\">NETMASK&#x3D;255.255.255.0</span><br><span class=\"line\">DNS1&#x3D;192.168.146.2</span><br><span class=\"line\">IPV4_FAILURE_FATAL&#x3D;no</span><br><span class=\"line\">IPV6INIT&#x3D;yes</span><br><span class=\"line\">IPV6_AUTOCONF&#x3D;yes</span><br><span class=\"line\">IPV6_DEFROUTE&#x3D;yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL&#x3D;no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE&#x3D;stable-privacy</span><br><span class=\"line\">NAME&#x3D;ens33</span><br><span class=\"line\">UUID&#x3D;152a6305-70b6-4b63-b7b9-6b9c52c0c752</span><br><span class=\"line\">DEVICE&#x3D;ens33</span><br><span class=\"line\">ONBOOT&#x3D;yes</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112807052-094fd900-90aa-11eb-9118-e6f536826313.png\" alt=\"image\"></p>\n<p>执行命令，配置 resolv.conf，填写你的网关就好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;resolv.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112807085-140a6e00-90aa-11eb-96a7-a41e56d042d2.png\" alt=\"image\"></p>\n<p>重启机子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p>今天的文章就肝到这里了。</p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/VS%20Code%20%E7%94%A8php%20%E8%BF%9E%E6%8E%A5sql%20server%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://blog.wuhen.one/2021/05/08/VS%20Code%20%E7%94%A8php%20%E8%BF%9E%E6%8E%A5sql%20server%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "php 连接sql server数据库",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"php-连接sql-server数据库\"><a class=\"markdownIt-Anchor\" href=\"#php-连接sql-server数据库\">#</a> php 连接 sql server 数据库</h2>\n<p>折腾了一天，终于把该死的数据库连起了，现在我就将我遇到的问题与配置的一些过程记录一下，希望有所帮助。</p>\n<p><strong>1. 环境</strong></p>\n<blockquote>\n<p>1.phpstudy</p>\n<p>2.VS Code</p>\n<p>3.php7.3.4nts</p>\n<p><strong>注意：</strong><br>\nnts&gt;&gt; 线程不安全</p>\n<p>ts&gt;&gt; 线程安全</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 下载与配置</strong></p>\n<p>连接  sql server 需要下载点东西</p>\n<blockquote>\n<p>1 下载<a href=\"https://docs.microsoft.com/en-us/sql/connect/php/download-drivers-php-sql-server?view=sql-server-ver15\"> SQLSRV58.EXE</a><br>\n 这玩意不需要安装，解压后就是这么一堆东西：</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112751937-1ebdf800-9003-11eb-8489-864fe97e3022.png\" alt=\"image\"></p>\n<p>上述玩意要根据自己的环境选择，请接着看。</p>\n</blockquote>\n<p>在自己的本地站下放一个 php 脚本看一哈信息。(用 phpstudy 搭个站)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo phpinfo();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这是我的环境。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112751957-30070480-9003-11eb-9f8e-ce552e45ade4.png\" alt=\"image\"></p>\n<p>所以我的 sqlsrv，就得选 7.3，nts，x64</p>\n<p><strong>注意：选择自己相应版本，如果 sqlsrv58 里没有，就去下载别的版本 sqlsrv。</strong><br>\n<img src=\"https://user-images.githubusercontent.com/48900845/112751970-41e8a780-9003-11eb-9362-ba74d99c6f25.png\" alt=\"image\"></p>\n</blockquote>\n<blockquote>\n<p>把这两个玩意拷贝到对应 php 版本文件夹下。<br>\n<img src=\"https://user-images.githubusercontent.com/48900845/112751978-4745f200-9003-11eb-8113-4836f262154d.png\" alt=\"image\"></p>\n</blockquote>\n<blockquote>\n<p>然后在 php.ini 添加以下<br>\n<img src=\"https://user-images.githubusercontent.com/48900845/112751981-4c0aa600-9003-11eb-935c-c4003079cc46.png\" alt=\"image\"></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension&#x3D;php_sqlsrv_73_nts_x64</span><br><span class=\"line\">extension&#x3D;php_pdo_sqlsrv_73_nts_x64</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>3. 连接测试</strong></p>\n<blockquote>\n<p>1. 重启 apache</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$serverName &#x3D; &quot;.&quot;; &#x2F;&#x2F;数据库服务器地址</span><br><span class=\"line\">$uid &#x3D; &quot;sa&quot;;     &#x2F;&#x2F;数据库用户名</span><br><span class=\"line\">$pwd &#x3D; &quot;123456&quot;; &#x2F;&#x2F;数据库密码</span><br><span class=\"line\">$connectionInfo &#x3D; array(&quot;UID&quot;&#x3D;&gt;$uid, &quot;PWD&quot;&#x3D;&gt;$pwd, &quot;Database&quot;&#x3D;&gt;&quot;phpTest&quot;);</span><br><span class=\"line\">$conn &#x3D; sqlsrv_connect($serverName, $connectionInfo);</span><br><span class=\"line\">if( $conn &#x3D;&#x3D; false)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    echo &quot;连接失败！&quot;;</span><br><span class=\"line\">    var_dump(sqlsrv_errors());</span><br><span class=\"line\">    exit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    echo &quot;链接成功&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>OK，成功了。<br>\n<img src=\"https://user-images.githubusercontent.com/48900845/112752004-65135700-9003-11eb-9074-bec43960cf88.png\" alt=\"image\"></p>\n</blockquote>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "php"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/VS%20code%20php%20%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/",
            "url": "https://blog.wuhen.one/2021/05/08/VS%20code%20php%20%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/",
            "title": "VS code php 如何调试",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"vs-code-php-如何调试\"><a class=\"markdownIt-Anchor\" href=\"#vs-code-php-如何调试\">#</a> VS code php 如何调试</h2>\n<p>今天来写一篇如何调试 ” 拍黄片 “ 的 blog。<br>\n废话不说了，直接干。</p>\n<p><strong>开发环境：</strong></p>\n<blockquote>\n<p>1.VS code</p>\n<p>2.phpstudy</p>\n</blockquote>\n<p><strong>1. 配置一哈 VS code (为了开发体验好一点，需要装几个插件哦)</strong></p>\n<blockquote>\n<p>1.PHP Intelephense</p>\n<p>2.PHP Debug</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752092-ea970700-9003-11eb-9332-c0633ef9bd72.png\" alt=\"image\"></p>\n<span id=\"more\"></span>\n<p><strong>2. 安装 XDebug（phpstudy 貌似集成了这玩意）</strong></p>\n<blockquote>\n<p>1. 在 php.ini 加入下面三行代码 (路径填自己的)</p>\n<p>2. 保存，</p>\n<p>3. 重启 apache 服务。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xdebug.remote_enable &#x3D; 1</span><br><span class=\"line\">xdebug.remote_autostart &#x3D; 1</span><br><span class=\"line\">zend_extension&#x3D;&quot;F:\\PHPstudy\\phpstudy_pro\\Extensions\\php\\php7.3.4nts\\ext\\php_xdebug.dll&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752117-0d292000-9004-11eb-9fa4-70f45f318932.png\" alt=\"image\"></p>\n<p><strong>3. 配置 launch.json 信息</strong></p>\n<p>端口用默认 9000 就好</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752127-174b1e80-9004-11eb-98cd-6ef621b3d033.png\" alt=\"image\"></p>\n<p><strong>4. 用个小例子试试。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $a &#x3D; 1;</span><br><span class=\"line\">    $b &#x3D; 2;</span><br><span class=\"line\">    $c &#x3D; $a + $b;</span><br><span class=\"line\">    echo $c;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1…</p>\n<p>2. 添加断点</p>\n<p>3. 开启调试</p>\n<p>4. 刷新一下浏览器</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752142-2af68500-9004-11eb-9916-b6620ad72c7e.png\" alt=\"image\"></p>\n<p>看到下图，恭喜恭喜，成功喽 @@@@</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752146-2fbb3900-9004-11eb-8996-ff4d034ea47b.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "php"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/ensp%E4%BB%BF%E7%9C%9F/",
            "url": "https://blog.wuhen.one/2021/05/08/ensp%E4%BB%BF%E7%9C%9F/",
            "title": "ensp仿真",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"ensp仿真\"><a class=\"markdownIt-Anchor\" href=\"#ensp仿真\">#</a> ensp 仿真</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.ensp-1.2.00.510</p>\n<p>2.vmware16</p>\n<p>3.win7 虚拟机</p>\n<p>VirtualBox-5.2.44</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 实验 1</strong></p>\n<p><strong>目的</strong></p>\n<blockquote>\n<p>通过路由器打通两台处于不同子网主机的链路。</p>\n</blockquote>\n<blockquote>\n<p>2 台 PC</p>\n<p>路由器：2 台 AR2220</p>\n</blockquote>\n<p><strong>网络拓扑</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115917028-32486b80-a4a8-11eb-9786-fa4601e90c1e.png\" alt=\"image\"></p>\n<p><strong>R1 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置g0&#x2F;0&#x2F;1 ip</span><br><span class=\"line\">sys</span><br><span class=\"line\">int g0&#x2F;0&#x2F;1</span><br><span class=\"line\">ip add 192.168.0.254 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置g0&#x2F;0&#x2F;0 ip</span><br><span class=\"line\">int g0&#x2F;0&#x2F;0</span><br><span class=\"line\">ip add 192.168.1.1</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加静态路由</span><br><span class=\"line\">q</span><br><span class=\"line\">ip route-static 192.168.2.0 24 g0&#x2F;0&#x2F;0 192.168.1.2</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看静态路由表</span><br><span class=\"line\"></span><br><span class=\"line\">dis ip routing-table</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115917862-59536d00-a4a9-11eb-9b35-17ec3b25e91f.png\" alt=\"image\"></p>\n<p><strong>R2 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置g0&#x2F;0&#x2F;1 ip</span><br><span class=\"line\">sys</span><br><span class=\"line\">int g0&#x2F;0&#x2F;1</span><br><span class=\"line\">ip add 192.168.2.254 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置g0&#x2F;0&#x2F;0 ip</span><br><span class=\"line\">int g0&#x2F;0&#x2F;0</span><br><span class=\"line\">ip add 192.168.1.2</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加静态路由</span><br><span class=\"line\">q</span><br><span class=\"line\">ip route-static 192.168.0.0 24 g0&#x2F;0&#x2F;0 192.168.1.1</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看静态路由表</span><br><span class=\"line\"></span><br><span class=\"line\">dis ip routing-table</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115918477-252c7c00-a4aa-11eb-9ca2-0a87bdde3261.png\" alt=\"image\"></p>\n<p><strong>PC1</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115918605-4db47600-a4aa-11eb-93f2-71df8b34f501.png\" alt=\"image\"></p>\n<p><strong>PC2</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115918657-5dcc5580-a4aa-11eb-828a-3098a28d9d7d.png\" alt=\"image\"></p>\n<p><strong>试验 2</strong></p>\n<p><strong>目的</strong></p>\n<blockquote>\n<p>配置 vlan</p>\n</blockquote>\n<blockquote>\n<p>4 台 PC</p>\n<p>2 台 S3700</p>\n</blockquote>\n<p><strong>网络拓扑</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115921710-73437e80-a4ae-11eb-871e-a26731f687ee.png\" alt=\"image\"></p>\n<p><strong>PC1 配置</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115921798-98d08800-a4ae-11eb-97ae-02806ddc7e8e.png\" alt=\"image\"></p>\n<p><strong>PC2 配置</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115921840-a554e080-a4ae-11eb-8295-4062cefe8cad.png\" alt=\"image\"></p>\n<p><strong>PC3 配置</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115921881-b30a6600-a4ae-11eb-93cf-24f2284579df.png\" alt=\"image\"></p>\n<p><strong>PC4 配置</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115921906-be5d9180-a4ae-11eb-90e5-4da6a132d711.png\" alt=\"image\"></p>\n<p><strong>LSW1 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建vlan 1 2</span><br><span class=\"line\">vlan batch 1 2</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;1</span><br><span class=\"line\">int e0&#x2F;0&#x2F;1</span><br><span class=\"line\">port link-type trunk</span><br><span class=\"line\">port trunk allow-pass vlan 1 2</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;2</span><br><span class=\"line\">int e0&#x2F;0&#x2F;2</span><br><span class=\"line\">port link-type access</span><br><span class=\"line\">port default vlan 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;3</span><br><span class=\"line\">int e0&#x2F;0&#x2F;3</span><br><span class=\"line\">port link-type access</span><br><span class=\"line\">port default vlan 2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>LSW2 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建vlan 1 2</span><br><span class=\"line\">vlan batch 1 2</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;1</span><br><span class=\"line\">int e0&#x2F;0&#x2F;1</span><br><span class=\"line\">port link-type trunk</span><br><span class=\"line\">port trunk allow-pass vlan 1 2</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;2</span><br><span class=\"line\">int e0&#x2F;0&#x2F;2</span><br><span class=\"line\">port link-type access</span><br><span class=\"line\">port default vlan 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;3</span><br><span class=\"line\">int e0&#x2F;0&#x2F;3</span><br><span class=\"line\">port link-type access</span><br><span class=\"line\">port default vlan 2</span><br></pre></td></tr></table></figure>\n<p><strong>实验 3</strong></p>\n<p><strong>目的</strong></p>\n<blockquote>\n<p>配置 ospf 打通处于不同网络主机的网络链路</p>\n</blockquote>\n<blockquote>\n<p>2 台 PC</p>\n<p>3 台 AR2220</p>\n</blockquote>\n<p><strong>网络拓扑</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115952778-960b7c80-a51a-11eb-822f-86b481964000.png\" alt=\"image\"></p>\n<p><strong>PC1 配置</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115952848-05816c00-a51b-11eb-9eef-5b708135d2a5.png\" alt=\"image\"></p>\n<p><strong>PC2 配置</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115952862-20ec7700-a51b-11eb-82f4-1677393cd04a.png\" alt=\"image\"></p>\n<p><strong>AR1 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置g0&#x2F;0&#x2F;0&#x2F;1 ip</span><br><span class=\"line\">sys</span><br><span class=\"line\">int g0&#x2F;0&#x2F;1</span><br><span class=\"line\">ip add 192.168.0.254 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置g0&#x2F;0&#x2F;0&#x2F;0 ip</span><br><span class=\"line\">int g0&#x2F;0&#x2F;0</span><br><span class=\"line\">ip add 1.1.1.1 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置ospf</span><br><span class=\"line\"># 1为ospf进程ip,可以与其它路由器相同，1.1.1.1为router-id，是路由器唯一标识，不可相同。</span><br><span class=\"line\"># network 为区域下宣告</span><br><span class=\"line\"></span><br><span class=\"line\">ospf 1 router-id 1.1.1.1</span><br><span class=\"line\">area 0</span><br><span class=\"line\">network 1.1.1.1 0.0.0.0</span><br><span class=\"line\">network 192.168.0.254 0.0.0.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>AR2 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置g0&#x2F;0&#x2F;0&#x2F;1 ip</span><br><span class=\"line\">sys</span><br><span class=\"line\">int g0&#x2F;0&#x2F;1</span><br><span class=\"line\">ip add 2.2.2.1 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置g0&#x2F;0&#x2F;0&#x2F;0 ip</span><br><span class=\"line\">int g0&#x2F;0&#x2F;0</span><br><span class=\"line\">ip add 1.1.1.2 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置ospf</span><br><span class=\"line\"># 1为ospf进程ip,可以与其它路由器相同，2.2.2.2为router-id，是路由器唯一标识，不可相同。</span><br><span class=\"line\"># network 为区域下宣告</span><br><span class=\"line\"></span><br><span class=\"line\">ospf 1 router-id 2.2.2.2</span><br><span class=\"line\">area 0</span><br><span class=\"line\">network 1.1.1.2 0.0.0.0</span><br><span class=\"line\">network 2.2.2.1 0.0.0.0</span><br></pre></td></tr></table></figure>\n<p><strong>AR3 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置g0&#x2F;0&#x2F;0&#x2F;1 ip</span><br><span class=\"line\">sys</span><br><span class=\"line\">int g0&#x2F;0&#x2F;1</span><br><span class=\"line\">ip add 192.168.1.254 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置g0&#x2F;0&#x2F;0&#x2F;0 ip</span><br><span class=\"line\">int g0&#x2F;0&#x2F;0</span><br><span class=\"line\">ip add 2.2.2.2 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置ospf</span><br><span class=\"line\"># 1为ospf进程ip,可以与其它路由器相同，3.3.3.3为router-id，是路由器唯一标识，不可相同。</span><br><span class=\"line\"># network 为区域下宣告</span><br><span class=\"line\"></span><br><span class=\"line\">ospf 1 router-id 3.3.3.3</span><br><span class=\"line\">area 0</span><br><span class=\"line\">network 192.168.1.254 0.0.0.0</span><br><span class=\"line\">network 2.2.2.2 0.0.0.0</span><br></pre></td></tr></table></figure>\n<p><strong>实验 4</strong></p>\n<p><strong>目的：</strong></p>\n<blockquote>\n<p>配置三层交换</p>\n</blockquote>\n<blockquote>\n<p>5 台 PC</p>\n<p>2 台 S3700 (LSW1 LSW2)</p>\n<p>1 台 S5700 (LSW3)</p>\n<p>2 台 AR2220</p>\n</blockquote>\n<p><strong>网络拓扑</strong><br>\n<img src=\"https://user-images.githubusercontent.com/48900845/115961516-4db78300-a549-11eb-9f46-cd6a5cd3b4e6.png\" alt=\"image\"></p>\n<p><strong>PC1 配置</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115961694-1f867300-a54a-11eb-93f2-05466f5b4d55.png\" alt=\"image\"></p>\n<p><strong>PC2 配置</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115961711-2e6d2580-a54a-11eb-8976-ab6c1c31d31a.png\" alt=\"image\"></p>\n<p><strong>PC3 配置</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115961732-3fb63200-a54a-11eb-84c4-502ab2d6ffea.png\" alt=\"image\"></p>\n<p><strong>PC4 配置</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115961740-4a70c700-a54a-11eb-9628-09dde24da7e7.png\" alt=\"image\"></p>\n<p><strong>PC5 配置</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115961777-74c28480-a54a-11eb-961b-bbe0102a1661.png\" alt=\"image\"></p>\n<p><strong>LSW1 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建vlan</span><br><span class=\"line\">sys</span><br><span class=\"line\">vlan batch 2 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;1</span><br><span class=\"line\">int e0&#x2F;0&#x2F;1</span><br><span class=\"line\">port link-type trunk</span><br><span class=\"line\">port trunk allow-pass vlan all</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;2</span><br><span class=\"line\">int e0&#x2F;0&#x2F;2</span><br><span class=\"line\">port link-type trunk</span><br><span class=\"line\">port trunk allow-pass vlan all</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;3</span><br><span class=\"line\">int e0&#x2F;0&#x2F;3</span><br><span class=\"line\">port link-type access</span><br><span class=\"line\">port default vlan 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;4</span><br><span class=\"line\">int e0&#x2F;0&#x2F;4</span><br><span class=\"line\">port link-type access</span><br><span class=\"line\">port default vlan 2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>LSW2 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建vlan</span><br><span class=\"line\">sys</span><br><span class=\"line\">vlan batch 2 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;1</span><br><span class=\"line\">int e0&#x2F;0&#x2F;1</span><br><span class=\"line\">port link-type trunk</span><br><span class=\"line\">port trunk allow-pass vlan all</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;2</span><br><span class=\"line\">int e0&#x2F;0&#x2F;2</span><br><span class=\"line\">port link-type trunk</span><br><span class=\"line\">port trunk allow-pass vlan all</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;3</span><br><span class=\"line\">int e0&#x2F;0&#x2F;3</span><br><span class=\"line\">port link-type access</span><br><span class=\"line\">port default vlan 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置e0&#x2F;0&#x2F;4</span><br><span class=\"line\">int e0&#x2F;0&#x2F;4</span><br><span class=\"line\">port link-type access</span><br><span class=\"line\">port default vlan 2</span><br></pre></td></tr></table></figure>\n<p><strong>LSW3 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建vlan</span><br><span class=\"line\">sys</span><br><span class=\"line\">vlan batch 2 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置g0&#x2F;0&#x2F;1</span><br><span class=\"line\">int g0&#x2F;0&#x2F;1</span><br><span class=\"line\">port link-type trunk</span><br><span class=\"line\">port trunk allow-pass vlan all</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置g0&#x2F;0&#x2F;2</span><br><span class=\"line\">int g0&#x2F;0&#x2F;2</span><br><span class=\"line\">port link-type trunk</span><br><span class=\"line\">port trunk allow-pass vlan all</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置vlan ip</span><br><span class=\"line\">int vlanif 1</span><br><span class=\"line\">ip add 192.168.2.254 24</span><br><span class=\"line\">int vlanif 2</span><br><span class=\"line\">ip add 192.168.0.254 24</span><br><span class=\"line\">int vlanif 3</span><br><span class=\"line\">ip add 192.168.1.254 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置ospf</span><br><span class=\"line\">ospf 1 router-id 3.3.3.3</span><br><span class=\"line\">area 0</span><br><span class=\"line\">net 192.168.0.254 0.0.0.0</span><br><span class=\"line\">net 192.168.1.254 0.0.0.0</span><br><span class=\"line\">net 192.168.2.254 0.0.0.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>AR1 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置g0&#x2F;0&#x2F;0</span><br><span class=\"line\">sys</span><br><span class=\"line\">int g0&#x2F;0&#x2F;0</span><br><span class=\"line\">ip add 192.168.2.3 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置g0&#x2F;0&#x2F;1</span><br><span class=\"line\">int g0&#x2F;0&#x2F;1</span><br><span class=\"line\">ip add 1.1.1.1 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置ospf</span><br><span class=\"line\">ospf 1 router-id 1.1.1.1</span><br><span class=\"line\">area 0</span><br><span class=\"line\">net 192.168.2.3 0.0.0.0</span><br><span class=\"line\">net 1.1.1.1 0.0.0.0</span><br></pre></td></tr></table></figure>\n<p><strong>AR2 配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 配置g0&#x2F;0&#x2F;0</span><br><span class=\"line\">sys</span><br><span class=\"line\">int g0&#x2F;0&#x2F;0</span><br><span class=\"line\">ip add 1.1.1.2 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置g0&#x2F;0&#x2F;1</span><br><span class=\"line\">int g0&#x2F;0&#x2F;1</span><br><span class=\"line\">ip add 2.2.2.1 24</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置ospf</span><br><span class=\"line\">ospf 1 router-id 2.2.2.2</span><br><span class=\"line\">area 0</span><br><span class=\"line\">net 1.1.1.2 0.0.0.0</span><br><span class=\"line\">net 2.2.2.1 0.0.0.0</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/java%E5%A4%84%E7%90%86json%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94gson/",
            "url": "https://blog.wuhen.one/2021/05/08/java%E5%A4%84%E7%90%86json%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94gson/",
            "title": "java处理json文件——gson",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"java处理json文件gson\"><a class=\"markdownIt-Anchor\" href=\"#java处理json文件gson\">#</a> java 处理 json 文件 ——gson</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.manjaro-21</p>\n<p>2.JDK1.8.0-281</p>\n<p>3.gson-2.8.6 <a href=\"https://github.com/google/gson\">项目地址</a></p>\n</blockquote>\n<p><strong>在 Gradle/Android 中使用</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation &#39;com.google.code.gson:gson:2.8.6&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>在 Maven 中使用</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;!--  Gson: Java to Json conversion --&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;2.8.6&lt;&#x2F;version&gt;</span><br><span class=\"line\">      &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><strong>2. 将一个对象转为 json 字符串</strong></p>\n<p><strong>MyJson.java</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyJson &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\">    private String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyJson() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyJson(String name,int age,String email) &#123;</span><br><span class=\"line\">        this.name &#x3D; name;</span><br><span class=\"line\">        this.age &#x3D; age;</span><br><span class=\"line\">        this.email &#x3D; email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getEmail() &#123;</span><br><span class=\"line\">        return email;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>Application.java</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.google.gson.Gson;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        MyJson myJson &#x3D; new MyJson(&quot;Tom&quot;,15,&quot;haha@jiji.com&quot;);</span><br><span class=\"line\">        Gson gson &#x3D; new Gson();</span><br><span class=\"line\">        String json &#x3D; gson.toJson(myJson);</span><br><span class=\"line\">        System.out.println(json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;name&quot;:&quot;Tom&quot;,&quot;age&quot;:15,&quot;email&quot;:&quot;haha@jiji.com&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. 将 json 字符串解析为 java 对象</strong></p>\n<p><strong>Application.java</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.google.gson.Gson;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        MyJson myJson &#x3D; new MyJson();</span><br><span class=\"line\">        Gson gson &#x3D; new Gson();</span><br><span class=\"line\">        String text &#x3D; &quot;&#123;\\&quot;name\\&quot;:\\&quot;Tom\\&quot;,\\&quot;age\\&quot;:19,\\&quot;email\\&quot;:\\&quot;hello@jiba.com\\&quot;&#125;&quot;;</span><br><span class=\"line\">        myJson &#x3D; gson.fromJson(text,myJson.getClass());</span><br><span class=\"line\">        System.out.println(myJson.getName());</span><br><span class=\"line\">        System.out.println(myJson.getAge());</span><br><span class=\"line\">        System.out.println(myJson.getEmail());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tom</span><br><span class=\"line\">19</span><br><span class=\"line\">hello@jiba.com</span><br></pre></td></tr></table></figure>\n<p><strong>4. 将 ArrayList 转为 json 数组</strong></p>\n<p><strong>Application.java</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.google.gson.Gson;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Gson gson &#x3D; new Gson();</span><br><span class=\"line\">        ArrayList&lt;MyJson&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        list.add(new MyJson(&quot;name1&quot;,10,&quot;ki@jiba.com&quot;));</span><br><span class=\"line\">        list.add(new MyJson(&quot;name2&quot;,19,&quot;hi@jiba.com&quot;));</span><br><span class=\"line\">        String json &#x3D; gson.toJson(list);</span><br><span class=\"line\">        System.out.println(json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;&quot;name&quot;:&quot;name1&quot;,&quot;age&quot;:10,&quot;email&quot;:&quot;ki@jiba.com&quot;&#125;,&#123;&quot;name&quot;:&quot;name2&quot;,&quot;age&quot;:19,&quot;email&quot;:&quot;hi@jiba.com&quot;&#125;]</span><br></pre></td></tr></table></figure>\n<p><strong>5. 将 json 数组转为 ArrayList</strong></p>\n<p><strong>Application.java</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.google.gson.Gson;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Gson gson &#x3D; new Gson();    </span><br><span class=\"line\">        ArrayList&lt;MyJson&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        Type listType &#x3D; new TypeToken&lt;List&lt;MyJson&gt;&gt;()&#123;&#125;.getType();</span><br><span class=\"line\">        String text &#x3D; &quot;[&#123;\\&quot;name\\&quot;:\\&quot;name1\\&quot;,\\&quot;age\\&quot;:10,\\&quot;email\\&quot;:\\&quot;ki@jiba.com\\&quot;&#125;,&#123;\\&quot;name\\&quot;:\\&quot;name2\\&quot;,\\&quot;age\\&quot;:19,\\&quot;email\\&quot;:\\&quot;hi@jiba.com\\&quot;&#125;]&quot;;</span><br><span class=\"line\">        list &#x3D; gson.fromJson(text,listType);</span><br><span class=\"line\"></span><br><span class=\"line\">        for (MyJson obj : list) &#123;</span><br><span class=\"line\">            System.out.println(obj.getName());</span><br><span class=\"line\">            System.out.println(obj.getAge());</span><br><span class=\"line\">            System.out.println(obj.getEmail());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1</span><br><span class=\"line\">10</span><br><span class=\"line\">ki@jiba.com</span><br><span class=\"line\">name2</span><br><span class=\"line\">19</span><br><span class=\"line\">hi@jiba.com</span><br></pre></td></tr></table></figure>\n<p><strong>6. 从文件流读取 json 数据转换为 java 对象</strong></p>\n<p><strong>myJson.json</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;name1&quot;,</span><br><span class=\"line\">    &quot;age&quot;: 10,</span><br><span class=\"line\">    &quot;email&quot;: &quot;ki@jiba.com&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;name2&quot;,</span><br><span class=\"line\">    &quot;age&quot;: 19,</span><br><span class=\"line\">    &quot;email&quot;: &quot;hi@jiba.com&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>Application.java</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        ArrayList&lt;MyJson&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        Type listType &#x3D; new TypeToken&lt;List&lt;MyJson&gt;&gt;()&#123;&#125;.getType();</span><br><span class=\"line\">        Gson gson &#x3D; new Gson();</span><br><span class=\"line\">        File file &#x3D; new File(&quot;&#x2F;home&#x2F;hello&#x2F;myCode&#x2F;java&#x2F;json&#x2F;gson&#x2F;src&#x2F;main&#x2F;java&#x2F;xyz&#x2F;wuhen&#x2F;gson&#x2F;myJson.json&quot;);</span><br><span class=\"line\">        FileReader reader &#x3D; new FileReader(file);</span><br><span class=\"line\">        list &#x3D; gson.fromJson(reader,listType);</span><br><span class=\"line\">        for (MyJson obj : list) &#123;</span><br><span class=\"line\">            System.out.println(obj.getName());</span><br><span class=\"line\">            System.out.println(obj.getAge());</span><br><span class=\"line\">            System.out.println(obj.getEmail());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1</span><br><span class=\"line\">10</span><br><span class=\"line\">ki@jiba.com</span><br><span class=\"line\">name2</span><br><span class=\"line\">19</span><br><span class=\"line\">hi@jiba.com</span><br></pre></td></tr></table></figure>\n<p><strong>7. 从 URL 读取 json 数据字节流转为 java 对象</strong></p>\n<p><strong>Application.java</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        ArrayList&lt;MyJson&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        Type listType &#x3D; new TypeToken&lt;List&lt;MyJson&gt;&gt;()&#123;&#125;.getType();</span><br><span class=\"line\">        Gson gson &#x3D; new Gson();</span><br><span class=\"line\">        URL url &#x3D; new URL(&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;myJson.json&quot;);</span><br><span class=\"line\">        JsonReader reader &#x3D; new JsonReader(new InputStreamReader(url.openStream()));</span><br><span class=\"line\">        list &#x3D; gson.fromJson(reader,listType);</span><br><span class=\"line\">        for (MyJson obj : list) &#123;</span><br><span class=\"line\">            System.out.println(obj.getName());</span><br><span class=\"line\">            System.out.println(obj.getAge());</span><br><span class=\"line\">            System.out.println(obj.getEmail());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1</span><br><span class=\"line\">10</span><br><span class=\"line\">ki@jiba.com</span><br><span class=\"line\">name2</span><br><span class=\"line\">19</span><br><span class=\"line\">hi@jiba.com</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/java%E8%A7%A3%E6%9E%90html%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94Jsoup/",
            "url": "https://blog.wuhen.one/2021/05/08/java%E8%A7%A3%E6%9E%90html%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94Jsoup/",
            "title": "java解析html文件——Jsoup",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"java解析html文件jsoup\"><a class=\"markdownIt-Anchor\" href=\"#java解析html文件jsoup\">#</a> java 解析 html 文件 ——Jsoup</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.manjaro-gonme21</p>\n<p>2.Jsoup-1.13.1 <a href=\"https://github.com/jhy/jsoup\">项目地址</a></p>\n<p>3.JDK-1.8.0_281</p>\n</blockquote>\n<p><strong>Maven 使用 Jsoup</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.jsoup&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jsoup&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.13.1&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>Gradle 使用 Jsoup</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation &#39;org.jsoup:jsoup:1.13.1&#39;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><strong>2. 从 String 解析 html</strong></p>\n<p>将 String 解析为 Document 对象</p>\n<p><strong>Application.java</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Application &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        String html &#x3D; &quot;&lt;html&gt;\\n&quot; +</span><br><span class=\"line\">                &quot;&lt;head&gt;\\n&quot; +</span><br><span class=\"line\">                &quot;&lt;title&gt;Try jsoup&lt;&#x2F;title&gt;\\n&quot; +</span><br><span class=\"line\">                &quot;&lt;&#x2F;head&gt;\\n&quot; +</span><br><span class=\"line\">                &quot;&lt;body&gt;\\n&quot; +</span><br><span class=\"line\">                &quot;&lt;p&gt;This is &lt;a href&#x3D;\\&quot;http:&#x2F;&#x2F;jsoup.org&#x2F;\\&quot;&gt;jsoup&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;\\n&quot; +</span><br><span class=\"line\">                &quot;&lt;&#x2F;body&gt;\\n&quot; +</span><br><span class=\"line\">                &quot;&lt;&#x2F;html&gt;&quot;;</span><br><span class=\"line\">        Document document &#x3D; Jsoup.parse(html);</span><br><span class=\"line\">        System.out.println(document);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt; </span><br><span class=\"line\"> &lt;head&gt; </span><br><span class=\"line\">  &lt;title&gt;Try jsoup&lt;&#x2F;title&gt; </span><br><span class=\"line\"> &lt;&#x2F;head&gt; </span><br><span class=\"line\"> &lt;body&gt; </span><br><span class=\"line\">  &lt;p&gt;This is &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;jsoup.org&#x2F;&quot;&gt;jsoup&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;  </span><br><span class=\"line\"> &lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>3. 从文件流解析 html</strong></p>\n<p>将 String 解析为 Document 对象</p>\n<p><strong>myHtml.html</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;title&gt;Try jsoup&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;p&gt;This is &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;jsoup.org&#x2F;&quot;&gt;jsoup&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>Application.java</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Application &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        Document document &#x3D; Jsoup.parse(new File(&quot;&#x2F;home&#x2F;hello&#x2F;myCode&#x2F;java&#x2F;html&#x2F;Jsoup&#x2F;src&#x2F;main&#x2F;java&#x2F;xyz&#x2F;wuhen&#x2F;Jsoup&#x2F;myHtml.html&quot;),&quot;utf-8&quot;);</span><br><span class=\"line\">        System.out.println(document);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt; </span><br><span class=\"line\"> &lt;head&gt; </span><br><span class=\"line\">  &lt;title&gt;Try jsoup&lt;&#x2F;title&gt; </span><br><span class=\"line\"> &lt;&#x2F;head&gt; </span><br><span class=\"line\"> &lt;body&gt; </span><br><span class=\"line\">  &lt;p&gt;This is &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;jsoup.org&#x2F;&quot;&gt;jsoup&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;  </span><br><span class=\"line\"> &lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>4. 从网络数据流解析 html</strong></p>\n<p>将网络数据流转为 Document 对象</p>\n<p><strong>Application.java</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Application &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        Document document &#x3D; Jsoup.connect(&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;myHtml.html&quot;).get();</span><br><span class=\"line\">        System.out.println(document);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt; </span><br><span class=\"line\"> &lt;head&gt; </span><br><span class=\"line\">  &lt;title&gt;Try jsoup&lt;&#x2F;title&gt; </span><br><span class=\"line\"> &lt;&#x2F;head&gt; </span><br><span class=\"line\"> &lt;body&gt; </span><br><span class=\"line\">  &lt;p&gt;This is &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;jsoup.org&#x2F;&quot;&gt;jsoup&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;  </span><br><span class=\"line\"> &lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/linux%20gdb%20%E8%B0%83%E8%AF%95c%E4%BB%A3%E7%A0%81%E5%B0%8F%E4%BE%8B%E4%B8%80%E5%88%99/",
            "url": "https://blog.wuhen.one/2021/05/08/linux%20gdb%20%E8%B0%83%E8%AF%95c%E4%BB%A3%E7%A0%81%E5%B0%8F%E4%BE%8B%E4%B8%80%E5%88%99/",
            "title": "linux gdb 调试c代码小例一则",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"linux-gdb-调试c代码小例一则\"><a class=\"markdownIt-Anchor\" href=\"#linux-gdb-调试c代码小例一则\">#</a> linux gdb 调试 c 代码小例一则</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.ubuntu20</p>\n<p>2.gdb-9.2</p>\n<p>3.gcc-9.3.0</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 代码</strong><br>\n main.c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*************************************************************************</span><br><span class=\"line\">    &gt; File Name: main.c</span><br><span class=\"line\">    &gt; Author: wuhen</span><br><span class=\"line\">    &gt; Created Time: Thu 29 Oct 2020 04:52:54 PM CST</span><br><span class=\"line\"> ************************************************************************&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint a &#x3D; 1;</span><br><span class=\"line\">\tint b &#x3D; 2;</span><br><span class=\"line\">\tint c;</span><br><span class=\"line\">\tint d;</span><br><span class=\"line\">\tc &#x3D; a + b;</span><br><span class=\"line\">\td &#x3D; a + b + c;</span><br><span class=\"line\">\tprintf(&quot;a:%d\\nb:%d\\n&quot;,c,d);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>3. 调试</strong></p>\n<p>执行命令，编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o main.out -g main.c</span><br></pre></td></tr></table></figure>\n<p>执行命令，开始调试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb main.out</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112751626-8ffcab80-9001-11eb-9851-898404a6c41c.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start #开始调试</span><br><span class=\"line\">n #运行下一行</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>关于命令详解大家看<a href=\"https://man.linuxde.net/gdb\">这个</a>就好</strong></p>\n<p><strong>相关文章</strong></p>\n<p><a href=\"https://blog.csdn.net/qq_43938052/article/details/109489950\">python 初试 opencv</a><br>\n<a href=\"https://blog.csdn.net/qq_43938052/article/details/109490302\">python 操作摄像头</a></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "C"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/linux%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8U%E7%9B%98%E7%AD%89%E5%A4%96%E6%8E%A5%E5%82%A8%E5%AD%98%E8%AE%BE%E5%A4%87/",
            "url": "https://blog.wuhen.one/2021/05/08/linux%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8U%E7%9B%98%E7%AD%89%E5%A4%96%E6%8E%A5%E5%82%A8%E5%AD%98%E8%AE%BE%E5%A4%87/",
            "title": "linux如何使用U盘等外接储存设备",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"linux如何使用u盘等外接储存设备\"><a class=\"markdownIt-Anchor\" href=\"#linux如何使用u盘等外接储存设备\">#</a> linux 如何使用 U 盘等外接储存设备</h2>\n<p><strong>1. 插入 U 盘</strong></p>\n<p><strong>2. 查看</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsblk #查看所有块设备</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112807530-998e1e00-90aa-11eb-8b0e-0e651fc77158.png\" alt=\"image\"></p>\n<p>我的是 256MB 的 U 盘，就是如图所示的 sdb 设备了，mountpoint 为空，因为还没有挂载哩。</p>\n<p>sdb 对应的路径因该是 /dev/sdb 喽（你可以用 fdisk -l 查看一下）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112807573-a6ab0d00-90aa-11eb-9fdc-02cbb7416da4.png\" alt=\"image\"></p>\n<span id=\"more\"></span>\n<p><strong>3. 挂载</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir &#x2F;mnt&#x2F;usb   #新建一个目录，用来挂载U盘</span><br><span class=\"line\">mount &#x2F;dev&#x2F;sdb &#x2F;mnt&#x2F;usb   #把U盘挂载到&#x2F;mnt&#x2F;usb</span><br><span class=\"line\">lsblk  #查看一下</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112807622-b1fe3880-90aa-11eb-8226-0a118879eaac.png\" alt=\"image\"></p>\n<p>sdb 的 mountpoint 不在为空，而是刚才的挂载点 /mnt/usb</p>\n<p><strong>恭喜！！！可以在 /mnt/usb 下浏览 U 盘内容了</strong></p>\n<p><strong>4.umount</strong></p>\n<p>用完后，先执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umount &#x2F;dev&#x2F;sdb &#x2F;mnt&#x2F;usb #先卸载</span><br><span class=\"line\">lsblk #查看一下</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112807668-be829100-90aa-11eb-9871-ad9701482d38.png\" alt=\"image\"></p>\n<p><strong>mountpoint 又变为空了。but 你用 fdisk -l 查看（显示 U 盘还在），这时你需要关闭驱动器。</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112807710-c9d5bc80-90aa-11eb-9751-0796823896f9.png\" alt=\"image\"></p>\n<p><strong>5. 安全关闭驱动器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udisksctl power-off -b &#x2F;dev&#x2F;sdb\t\t\t\t#安全关闭驱动器</span><br><span class=\"line\">fdisk -l #查看</span><br></pre></td></tr></table></figure>\n<p>这下 U 盘没了（弹出了）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112807759-d823d880-90aa-11eb-9f70-fe4bd9aaeafd.png\" alt=\"image\"></p>\n<p><strong>注意：如果提示</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The program &#39;udisksctl&#39; is currently not installed. You can install it by typing:</span><br><span class=\"line\">apt install udisks2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>安装 udisks2 再试</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install udisks2 #安装udisks2</span><br></pre></td></tr></table></figure>\n<p><strong>6. 拔掉 U 盘</strong></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/",
            "url": "https://blog.wuhen.one/2021/05/08/maven%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/",
            "title": "安装Maven",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<p><strong>安装 Maven</strong></p>\n<p>执行命令，切换到 opt 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;opt</span><br></pre></td></tr></table></figure>\n<p>执行命令，创建 maven 文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir maven</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761392-b0daf600-902d-11eb-8376-bff1016396db.png\" alt=\"image\"></p>\n<p>执行命令，切换到 maven 目录，下载 maven-3.6.3，解压压缩包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd maven</span><br><span class=\"line\">wget http:&#x2F;&#x2F;www.trieuvan.com&#x2F;apache&#x2F;maven&#x2F;maven-3&#x2F;3.6.3&#x2F;binaries&#x2F;apache-maven-3.6.3-bin.tar.gz</span><br><span class=\"line\">tar zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>换源 (在<mirrors></mirrors>标签中添加 mirror 子节点：)，提升下载速度。(这里用阿里源)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim apache-maven-3.6.3&#x2F;conf&#x2F;settings.xml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mirror&gt;</span><br><span class=\"line\">    &lt;id&gt;aliyunmaven&lt;&#x2F;id&gt;</span><br><span class=\"line\">    &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class=\"line\">    &lt;name&gt;阿里云公共仓库&lt;&#x2F;name&gt;</span><br><span class=\"line\">    &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;public&lt;&#x2F;url&gt;</span><br><span class=\"line\">&lt;&#x2F;mirror&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761402-bc2e2180-902d-11eb-93ba-b030b8b8cad8.png\" alt=\"image\"></p>\n<p>配置环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>\n<p>粘贴以下内容，保存 profile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME&#x3D;&#x2F;opt&#x2F;maven&#x2F;apache-maven-3.6.3</span><br><span class=\"line\">export PATH&#x3D;$MAVEN_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761407-c6502000-902d-11eb-8025-4e89d8357ded.png\" alt=\"image\"></p>\n<p>刷新环境变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>\n<p>检查一下，下图所示，成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761414-ccde9780-902d-11eb-8ee7-c5a13e56af2d.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "软件安装"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/nginx%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/",
            "url": "https://blog.wuhen.one/2021/05/08/nginx%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/",
            "title": "nginx安装手册",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"nginx安装手册\"><a class=\"markdownIt-Anchor\" href=\"#nginx安装手册\">#</a> nginx 安装手册</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.manjaro-gnome21</p>\n<p>2.nginx-1.19.10 <a href=\"https://nginx.org/en/download.html\">下载界面</a></p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 安装</strong></p>\n<p>在 /usr/local 创建 nginx 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">cd nginx</span><br></pre></td></tr></table></figure>\n<p>下载 nginx，解压，进入 nginx-1.19.10, 执行命令编译。生成的可执行文件在上级目录 sbin。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.19.10.tar.gz</span><br><span class=\"line\">tar -zxvf nginx-1.19.10.tar.gz</span><br><span class=\"line\">cd nginx-1.19.10&#x2F; </span><br><span class=\"line\">.&#x2F;configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p><strong>3.nginx 使用</strong></p>\n<p>启动</p>\n<p>启动后，打开浏览器查看 127.0.0.1</p>\n<p><strong>成功界面</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115152209-c1b5df00-a0a2-11eb-8564-e73258255bdd.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br></pre></td></tr></table></figure>\n<p>停止</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop</span><br></pre></td></tr></table></figure>\n<p>修改配置文件后重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>\n<p><strong>4. 配置</strong></p>\n<p>配置文件位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>\n<p>配置虚拟主机</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  mysite.haha;</span><br><span class=\"line\">        location &#x2F; &#123;</span><br><span class=\"line\">            root   html&#x2F;mysite;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>修改 /etc/hosts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 mysite.haha</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "软件安装"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/node.js%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/",
            "url": "https://blog.wuhen.one/2021/05/08/node.js%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/",
            "title": "安装node.js",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<p><strong>安装 node.js</strong></p>\n<p>执行命令，切换目录，创建文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local</span><br><span class=\"line\">mkdir node</span><br><span class=\"line\">cd node</span><br></pre></td></tr></table></figure>\n<p>下载（<strong><a href=\"https://nodejs.org/dist/v12.18.2/node-v12.18.2-linux-x64.tar.xz\">https://nodejs.org/dist/v12.18.2/node-v12.18.2-linux-x64.tar.xz</a></strong>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v12.18.2&#x2F;node-v12.18.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<p>解压</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xJvf node-v12.18.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<p>配置，修改～/.bash_profile 文件，加入以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Nodejs</span><br><span class=\"line\">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;node&#x2F;node-v12.16.3-linux-x64&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761437-eda6ed00-902d-11eb-8e66-0235f5664a42.png\" alt=\"image\"></p>\n<p>更新环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>\n<p>检验</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761441-f4cdfb00-902d-11eb-9320-36c17e9a7108.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761445-fb5c7280-902d-11eb-83b1-bc91561602c1.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm version</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761451-031c1700-902e-11eb-8a58-6f684723d87b.png\" alt=\"image\"></p>\n<p>成功了。</p>\n<hr>\n<p><strong>换源</strong></p>\n<p>NPM 下载速度不太友好，执行命令，安装 CNPM。淘宝有个 NPM 的镜像源 CNPM，速度可以。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>查看一下是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761470-10d19c80-902e-11eb-8fa8-2b7870780b97.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "软件安装"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/opencv%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87/",
            "url": "https://blog.wuhen.one/2021/05/08/opencv%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87/",
            "title": "opencv处理图片",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"opencv处理图片\"><a class=\"markdownIt-Anchor\" href=\"#opencv处理图片\">#</a> opencv 处理图片</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.manjaro21-gnome</p>\n<p>2.python3.9</p>\n<p>3.opencv-python-4.5.1.48</p>\n<p>4.numpy-1.20.2</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 加载、显示、保存图片</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 加载、显示、保存图片</span><br><span class=\"line\">import cv2</span><br><span class=\"line\">img &#x3D; cv2.imread(&quot;1.jpeg&quot;)</span><br><span class=\"line\">cv2.imwrite(&quot;save.png&quot;, img)</span><br><span class=\"line\">cv2.imshow(&quot;img&quot;, img)</span><br><span class=\"line\">cv2.waitKey()</span><br></pre></td></tr></table></figure>\n<p><strong>2. 获取图片宽、高、通道数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取图片宽、高、通道数</span><br><span class=\"line\">import cv2</span><br><span class=\"line\"></span><br><span class=\"line\">img &#x3D; cv2.imread(&quot;1.jpeg&quot;)</span><br><span class=\"line\">print(img.shape)</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<p>返回图片的高、宽、通道，若图像为非彩色图，则不返回通道值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(750, 500, 3)</span><br></pre></td></tr></table></figure>\n<p><strong>3. 图像缩放</strong></p>\n<p>图像缩放使用 cv2.resize () 函数，第三个参数定义了缩放插值的方法。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>INTER_NEAREST</td>\n<td>最近邻插值法</td>\n</tr>\n<tr>\n<td>INTER_LINEAR</td>\n<td>双线性插值法（默认）</td>\n</tr>\n<tr>\n<td>INTER_AREA</td>\n<td>基于局部像素的重采样</td>\n</tr>\n<tr>\n<td>INTER_CUBIC</td>\n<td>基于 4x4 像素邻域的 3 次插值法</td>\n</tr>\n<tr>\n<td>INTER_LANCZOS4</td>\n<td>基于 8x8 像素邻域的 Lanczos 插值</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 图像缩放</span><br><span class=\"line\"></span><br><span class=\"line\">import cv2</span><br><span class=\"line\"></span><br><span class=\"line\">img &#x3D; cv2.imread(&quot;1.jpeg&quot;)</span><br><span class=\"line\">cv2.imshow(&quot;img&quot;, img)</span><br><span class=\"line\">img1 &#x3D; cv2.resize(img, (100, 600), cv2.INTER_AREA)</span><br><span class=\"line\">hight, width &#x3D; img.shape[0:2]</span><br><span class=\"line\">img2 &#x3D; cv2.resize(img, (width, hight))</span><br><span class=\"line\">cv2.imshow(&quot;img1&quot;, img1)</span><br><span class=\"line\">cv2.imshow(&#39;img2&#39;, img2)</span><br><span class=\"line\">cv2.waitKey()</span><br></pre></td></tr></table></figure>\n<p><strong>4. 图片旋转</strong></p>\n<p><strong><a href=\"http://main.py\">main.py</a></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import argparse</span><br><span class=\"line\">import imutils</span><br><span class=\"line\">import cv2</span><br><span class=\"line\"></span><br><span class=\"line\">ap &#x3D; argparse.ArgumentParser()</span><br><span class=\"line\">ap.add_argument(&quot;-i&quot;, &quot;--image&quot;, required&#x3D;True,</span><br><span class=\"line\">                help&#x3D;&quot;Path to the image&quot;)</span><br><span class=\"line\">args &#x3D; vars(ap.parse_args())</span><br><span class=\"line\"></span><br><span class=\"line\">image &#x3D; cv2.imread(args[&quot;image&quot;])</span><br><span class=\"line\">cv2.imshow(&quot;Original&quot;, image)</span><br><span class=\"line\"></span><br><span class=\"line\">(h, w) &#x3D; image.shape[:2]</span><br><span class=\"line\">center &#x3D; (w &#x2F;&#x2F; 2, h &#x2F;&#x2F; 2)</span><br><span class=\"line\"></span><br><span class=\"line\">M &#x3D; cv2.getRotationMatrix2D(center, 45, 1.0)</span><br><span class=\"line\">rotated &#x3D; cv2.warpAffine(image, M, (w, h))</span><br><span class=\"line\">cv2.imshow(&quot;Rotated by 45 Degrees&quot;, rotated)</span><br><span class=\"line\"></span><br><span class=\"line\">M &#x3D; cv2.getRotationMatrix2D(center, -90, 1.0)</span><br><span class=\"line\">rotated &#x3D; cv2.warpAffine(image, M, (w, h))</span><br><span class=\"line\">cv2.imshow(&quot;Rotated by -90 Degrees&quot;, rotated)</span><br><span class=\"line\"></span><br><span class=\"line\">rotated &#x3D; imutils.rotate(image, 180)</span><br><span class=\"line\">cv2.imshow(&quot;Rotated by 180 Degrees&quot;, rotated)</span><br><span class=\"line\">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"http://imutils.py\">imutils.py</a></strong></p>\n<p>rotate () 第一个参数为需要处理的图片，第二个为角度，第三个为旋转中心，默认为图片中心，第四个为规模，默认 1.0。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cv2</span><br><span class=\"line\">def rotate(image, angle, center&#x3D;None, scale&#x3D;1.0):</span><br><span class=\"line\">    (h, w) &#x3D; image.shape[:2]</span><br><span class=\"line\">    if center is None: </span><br><span class=\"line\">        center &#x3D; (w &#x2F;&#x2F; 2, h &#x2F;&#x2F; 2)</span><br><span class=\"line\"></span><br><span class=\"line\">    M &#x3D; cv2.getRotationMatrix2D(center, angle, scale)</span><br><span class=\"line\"></span><br><span class=\"line\">    rotated &#x3D; cv2.warpAffine(image, M, (w, h))</span><br><span class=\"line\">    return rotated</span><br></pre></td></tr></table></figure>\n<p><strong>5. 图像轮廓检测</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 图片轮廓检测</span><br><span class=\"line\">import cv2</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">img &#x3D; cv2.imread(&#39;1.jpeg&#39;)</span><br><span class=\"line\">gray &#x3D; cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)                        #转换为灰度图像</span><br><span class=\"line\">ret, binary &#x3D; cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)        #转换为二值图像</span><br><span class=\"line\">contours, hierarchy &#x3D; cv2.findContours(binary, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)#提取轮廓</span><br><span class=\"line\">cv2.drawContours(img, contours, -1, (0, 0, 255), 2)</span><br><span class=\"line\">cv2.imshow(&quot;img&quot;, img)</span><br><span class=\"line\">cv2.waitKey()</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/php%20xdebug%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/",
            "url": "https://blog.wuhen.one/2021/05/08/php%20xdebug%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/",
            "title": "php xdebug超时问题解决",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<p><strong>实验环境</strong></p>\n<blockquote>\n<p>1.VS code</p>\n<p>2.phpstudy</p>\n</blockquote>\n<p><strong><a href=\"https://blog.csdn.net/qq_43938052/article/details/105781238\">如何搭建配置调试环境</a></strong></p>\n<p>修改 vhost.conf 文件。<br>\n加入以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPCConnectTimeout 3000</span><br><span class=\"line\">IPCCommTimeout 3000</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752274-c12aab00-9004-11eb-9486-cc2a36195279.png\" alt=\"image\"></p>\n<blockquote>\n<p>Virtual Host 即 Vhost ，是 linux 中的虚拟主机系统。</p>\n</blockquote>\n<p>虚拟主机 (Virtual Host) 是在同一台机器搭建属于不同域名或者基于不同 IP 的多个网站服务的技术.。可以为运行在同一物理机器上的各个网站指配不同的 IP 和端口， 也可让多个网站拥有不同的域名。</p>\n<span id=\"more\"></span>\n<p><strong>重启 apache</strong></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "php"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/python%20opencv%20%E6%93%8D%E4%BD%9C%E6%91%84%E5%83%8F%E5%A4%B4/",
            "url": "https://blog.wuhen.one/2021/05/08/python%20opencv%20%E6%93%8D%E4%BD%9C%E6%91%84%E5%83%8F%E5%A4%B4/",
            "title": "python opencv 操作摄像头",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"python-opencv-操作摄像头\"><a class=\"markdownIt-Anchor\" href=\"#python-opencv-操作摄像头\">#</a> python opencv 操作摄像头</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.python3.8</p>\n<p>3.opencv-4.4.0.46</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 源码</strong></p>\n<p><a href=\"http://main.py\">main.py</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import cv2</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">cap &#x3D; cv2.VideoCapture(0)</span><br><span class=\"line\">while 1:</span><br><span class=\"line\">    # get a frame</span><br><span class=\"line\">    ret, frame &#x3D; cap.read()</span><br><span class=\"line\">    # show a frame</span><br><span class=\"line\">    cv2.imshow(&quot;capture&quot;, frame)</span><br><span class=\"line\">    if cv2.waitKey(1) &amp; 0xFF &#x3D;&#x3D; ord(&#39;q&#39;):</span><br><span class=\"line\">        break</span><br><span class=\"line\">cap.release()</span><br><span class=\"line\">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n<p><strong>3. 效果</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761669-db797e80-902e-11eb-81e4-9545c2243094.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/python%20%E8%BF%9E%E6%8E%A5sql%20server%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8Cpymssql%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E3%80%82/",
            "url": "https://blog.wuhen.one/2021/05/08/python%20%E8%BF%9E%E6%8E%A5sql%20server%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8Cpymssql%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E3%80%82/",
            "title": "python 连接sql server数据库，pymssql模块安装。",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"python-连接sql-server数据库pymssql模块安装\"><a class=\"markdownIt-Anchor\" href=\"#python-连接sql-server数据库pymssql模块安装\">#</a> python 连接 sql server 数据库，pymssql 模块安装。</h2>\n<blockquote>\n<p>python 版本：python3.7</p>\n<p>数据库版本：sql server 2016</p>\n</blockquote>\n<p>连接 sql server 数据库，本菜鸟用的是 pymssql，现在我得着重说下 pymssql 的安装问题。</p>\n<p><strong>安装 pymssql 解决方案</strong></p>\n<p>往常使用滴 pip install pymssql 可能行不通（你可以去试试，反正我滴机子不行）。</p>\n<p><strong>资源下载</strong> <a href=\"https://pypi.org/project/pymssql/#files\">pymssql 下载</a><br>\n选择自己需要滴版本</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761694-0794ff80-902f-11eb-8561-d8e1a2d3d6a4.png\" alt=\"image\"></p>\n<p>下载后直接在当前目录执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install 包名</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><strong>连接数据库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pymssql</span><br><span class=\"line\">class MSSQL:</span><br><span class=\"line\">    def __init__(self,host,user,pwd,db):</span><br><span class=\"line\">        self.host &#x3D; host</span><br><span class=\"line\">        self.user &#x3D; user</span><br><span class=\"line\">        self.pwd &#x3D; pwd</span><br><span class=\"line\">        self.db &#x3D; db</span><br><span class=\"line\"></span><br><span class=\"line\">    def __GetConnect(self):</span><br><span class=\"line\">        if not self.db:</span><br><span class=\"line\">            raise(NameError,&quot;没有设置数据库信息&quot;)</span><br><span class=\"line\">        self.conn &#x3D; pymssql.connect(host&#x3D;self.host,user&#x3D;self.user,password&#x3D;self.pwd,database&#x3D;self.db,charset&#x3D;&quot;utf8&quot;)</span><br><span class=\"line\">        cur &#x3D; self.conn.cursor()</span><br><span class=\"line\">        if not cur:</span><br><span class=\"line\">            raise(NameError,&quot;连接数据库失败&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return cur</span><br><span class=\"line\"></span><br><span class=\"line\">    def ExecQuery(self,sql):</span><br><span class=\"line\">        cur &#x3D; self.__GetConnect()</span><br><span class=\"line\">        cur.execute(sql)</span><br><span class=\"line\">        resList &#x3D; cur.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\">        #查询完毕后必须关闭连接</span><br><span class=\"line\">        self.conn.close()</span><br><span class=\"line\">        return resList</span><br><span class=\"line\"></span><br><span class=\"line\">    def ExecNonQuery(self,sql):</span><br><span class=\"line\">        cur &#x3D; self.__GetConnect()</span><br><span class=\"line\">        cur.execute(sql)</span><br><span class=\"line\">        self.conn.commit()</span><br><span class=\"line\">        self.conn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#根据自己的实际情况进行配置</span><br><span class=\"line\">ms &#x3D; MSSQL(host&#x3D;&quot;127.0.0.1&quot;,user&#x3D;&quot;sa&quot;,pwd&#x3D;&quot;123456&quot;,db&#x3D;&quot;haha&quot;)</span><br><span class=\"line\">sqlStr &#x3D; &#39;select * from jokes&#39;</span><br><span class=\"line\">list &#x3D; ms.ExecQuery(sqlStr.encode(&#39;utf-8&#39;))</span><br><span class=\"line\">for i in list:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/python%E5%88%9D%E8%AF%95opencv/",
            "url": "https://blog.wuhen.one/2021/05/08/python%E5%88%9D%E8%AF%95opencv/",
            "title": "python 初试opencv",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"python-初试opencv\"><a class=\"markdownIt-Anchor\" href=\"#python-初试opencv\">#</a> python 初试 opencv</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.python3.8</p>\n<p>3.opencv-4.4.0.46</p>\n<p>4.matplotlib-3.3.2</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 源码</strong></p>\n<p><a href=\"http://main.py\">main.py</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">import cv2</span><br><span class=\"line\">from pylab import *</span><br><span class=\"line\"></span><br><span class=\"line\"># 载入图像</span><br><span class=\"line\">im &#x3D; cv2.imread(&#39;1.jpg&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 颜色空间转换</span><br><span class=\"line\">gray &#x3D; cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示原始图像</span><br><span class=\"line\">fig &#x3D; plt.figure()</span><br><span class=\"line\">subplot(121)</span><br><span class=\"line\">plt.gray()</span><br><span class=\"line\">imshow(im)</span><br><span class=\"line\">title(u&#39;彩色图&#39;)</span><br><span class=\"line\">axis(&#39;off&#39;)</span><br><span class=\"line\"># 显示灰度化图像</span><br><span class=\"line\">plt.subplot(122)</span><br><span class=\"line\">plt.gray()</span><br><span class=\"line\">imshow(gray)</span><br><span class=\"line\">title(u&#39;灰度图&#39;)</span><br><span class=\"line\">axis(&#39;off&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br></pre></td></tr></table></figure>\n<p><strong>效果图</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761716-2dba9f80-902f-11eb-925c-aec4491487ee.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/python%E9%80%9A%E8%BF%87%E9%82%AE%E4%BB%B6%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%94%B5%E8%84%91/",
            "url": "https://blog.wuhen.one/2021/05/08/python%E9%80%9A%E8%BF%87%E9%82%AE%E4%BB%B6%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%94%B5%E8%84%91/",
            "title": "让繁琐的工作自动化——python处理email",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"让繁琐的工作自动化python处理email\"><a class=\"markdownIt-Anchor\" href=\"#让繁琐的工作自动化python处理email\">#</a> 让繁琐的工作自动化 ——python 处理 email</h2>\n<p>今天来谈一谈，如何用 python 处理 Email。今天的示例选用 QQ 邮箱。</p>\n<p>以及写个利用邮件远程控制电脑下载图片。</p>\n<hr>\n<p><strong>1. 环境</strong></p>\n<blockquote>\n<p>1.python3.8</p>\n<p>2.pyzmail36 v1.04</p>\n<p>3.IMAPClient v2.1.0</p>\n<p>4.PyEmail v0.0.1</p>\n</blockquote>\n<p><strong>如果 pyzmail 安装报错，请安装 pyzmail36。</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761745-5b074d80-902f-11eb-9087-99fe74011332.png\" alt=\"image\"></p>\n<span id=\"more\"></span>\n<p><strong>2. 准备工作</strong></p>\n<p>需要准备个 qq 邮箱，这个很容易吧。</p>\n<p>网页登录 qq 邮箱，点击设置，点击账户。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761792-7d00d000-902f-11eb-9476-a7852e23885d.png\" alt=\"image\"></p>\n<p>开启 IMAP/SMTP 服务。会生成一个授权码，把它记下来，后面需要用，这玩意相当于密码。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761796-82f6b100-902f-11eb-8e3d-bfdd35a12978.png\" alt=\"image\"></p>\n<p>QQ 邮箱的一些信息，后面需要用</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761800-89852880-902f-11eb-859d-d55b56cdc77b.png\" alt=\"image\"></p>\n<p><strong>3. 发送邮件</strong></p>\n<p>导入 smtplib</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import smtplib</span><br></pre></td></tr></table></figure>\n<p>连接到 SMTP 服务器，smtplib.SMTP ()，第一个参数是 SMTP 服务器的域名，第二个是端口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj &#x3D; smtplib.SMTP(&#39;smtp.qq.com&#39;, 587)</span><br></pre></td></tr></table></figure>\n<p>给服务器打个招呼，问个好。</p>\n<p><strong>注意：得到 SMTP 对象后必须调用 ehlo () 方法，向 SMTP 服务器问好。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj.ehlo()</span><br></pre></td></tr></table></figure>\n<p>如果连接 SMTP 587 端口（使用 TLS 加密），需要调用 starttls ()；如果连接 SMTP 465 端口（使用 SSL），加密一设置，无需使用 starttls () 方法，请跳过这一步。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj.starttls()</span><br></pre></td></tr></table></figure>\n<p>登录账号。</p>\n<p><strong>注意：第一个填写邮箱，第二个填生成的授权码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj.login(&#39;xxxxxx@qq.com&#39;, &#39;passwd&#39;)</span><br></pre></td></tr></table></figure>\n<p>发送邮件。</p>\n<p><strong>注意：第一个参数填写登录的邮箱，第二个参数目的邮箱，第三个参数正文内容，必须以字符串’Subject: \\n’开头，作为邮件的主题行，’\\n’将正文与主题分割。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj.sendmail(&#39;你的邮箱&#39;,&#39;目的邮箱&#39;,&#39;Subject: haha\\nhello,nie.&#39;)</span><br></pre></td></tr></table></figure>\n<p>与 SMTP 服务器断开。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smtpObj.quit()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761828-a15cac80-902f-11eb-8694-27af6d354457.png\" alt=\"image\"></p>\n<p><strong>4. 获取邮件与删除邮件</strong></p>\n<p>导入模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pyzmail</span><br><span class=\"line\">import imapclient</span><br><span class=\"line\">import imaplib</span><br></pre></td></tr></table></figure>\n<p>连接 IMAP 服务器，imapclient.IMAPClient（）方法第一个参数 IMAP 服务器域名，第二个参数开启 SSL 加密（大多数邮件提供商要求开启 SSL 加密）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imapObj &#x3D; imapclient.IMAPClient(&#39;imap.qq.com&#39;, ssl&#x3D;True)</span><br></pre></td></tr></table></figure>\n<p>登录到 IMAP 服务器</p>\n<p><strong>注意：第一个参数你滴邮箱，第二个参数生成的授权码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imapObj.login(&#39;xxxxxxx@qq.com&#39;, &#39;passwd&#39;)</span><br></pre></td></tr></table></figure>\n<p>选择文件夹，文件夹有很多，可以通过 list_folders () 方法获取文件夹列表（返回元组类型）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 &#x3D; imapObj.list_folders()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>注意：我为了输出好看，导入了 pprint 模块，调用 pprint.pprint (list1) 输出</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761848-bdf8e480-902f-11eb-96a7-a61b1984039f.png\" alt=\"image\"></p>\n<p>选择文件夹，一般都有‘INBOX’(收件箱) 这个文件夹，readonly 是只读，如果你的程序不需删除邮件，建议将该参数设置为 True。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imapObj.select_folder(&#39;INBOX&#39;, readonly&#x3D;True)</span><br></pre></td></tr></table></figure>\n<p>搜索，search () 方法参数是字符串列表文末附录查看搜索键。该方法返回消息 ID 列表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIds &#x3D; imapObj.search([&#39;ALL&#39;])</span><br></pre></td></tr></table></figure>\n<p><strong>注意：若你的搜索有大量数据，python 会抛出异常，请加入以下代码，数字代表最大字节数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import imaplib</span><br><span class=\"line\">imaplib._MAXLINE &#x3D; 100000000</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761859-c9e4a680-902f-11eb-8462-ad0d53440cc3.png\" alt=\"image\"></p>\n<p>获取电子邮件内容，以下代码获取了 4 个 eamil 的信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msgList &#x3D; imapObj.fetch(MIds, [&#39;BODY[]&#39;])</span><br></pre></td></tr></table></figure>\n<p>获取电子邮件的一些信息，为了操作简洁，先导入 pyzmail 模块，创建 PyzMessage 对象，使解析电子邮件变得更方便。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pyzmail</span><br><span class=\"line\">msg &#x3D; pyzmail.PyzMessage.factory(msgList[10][b&#39;BODY[]&#39;])</span><br></pre></td></tr></table></figure>\n<p>获取主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subject &#x3D; msg.get_subject()</span><br></pre></td></tr></table></figure>\n<p>获取地址</p>\n<p><strong>注意：‘from’ 可替换为’to’,‘cc’,‘bcc’。cc 指抄送，bcc 指密送。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addr &#x3D; msg.get_addresses(&#39;from&#39;)</span><br></pre></td></tr></table></figure>\n<p>获取正文，email 可以是纯文本或 HTML 的混合，若 email 只含纯文本 PyzMwssage 对象的 html_part 设置为 None；若 email 只含 HTML，PyzMwssage 对象的 text_part 设置为 None。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if msg.text_part !&#x3D; None:</span><br><span class=\"line\">\ttext &#x3D; msg.text_part.get_payload().decode(msg.text_part.charset)</span><br><span class=\"line\">if msg.html_part !&#x3D; None:</span><br><span class=\"line\">\thtml &#x3D; msg.html_part.get_payload().decode(msg.html_part.charset)</span><br></pre></td></tr></table></figure>\n<p>删除电子邮件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imapObj.select_folder(&#39;INBOX&#39;, readonly&#x3D;False)</span><br><span class=\"line\">imapObj.delete_messages(消息ID)</span><br></pre></td></tr></table></figure>\n<p>与 IMAP 服务器断开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imapObj.logout()</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"实例实现通过邮件远程控制电脑下载图片\"><a class=\"markdownIt-Anchor\" href=\"#实例实现通过邮件远程控制电脑下载图片\">#</a> 实例 —— 实现通过邮件远程控制电脑下载图片。</h2>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761882-e680de80-902f-11eb-8ab8-f098427ffb0a.png\" alt=\"image\"></p>\n<p>这不就下载好了吗</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761886-ee408300-902f-11eb-85ae-85f5401dcf85.png\" alt=\"image\"></p>\n<p><strong>注意：本例子写得太过于粗糙，有太多的问题需要修改。仅仅是为大家演示一种使用思路。</strong></p>\n<p><strong>源码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import imaplib</span><br><span class=\"line\">import pyzmail</span><br><span class=\"line\">import imapclient</span><br><span class=\"line\">import time</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def download(urls):</span><br><span class=\"line\">    for url in urls:</span><br><span class=\"line\">        res &#x3D; requests.get(url.replace(&#39;&amp;&#39;, &#39;&amp;&#39;))</span><br><span class=\"line\">        with open(str(time.time()) + &#39;.jpg&#39;, &#39;wb&#39;) as file:</span><br><span class=\"line\">            file.write(res.content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def checknewpic():</span><br><span class=\"line\"></span><br><span class=\"line\">    imapObj &#x3D; imapclient.IMAPClient(&#39;imap.qq.com&#39;, ssl&#x3D;True)</span><br><span class=\"line\">    imapObj.login(&#39;xxxxx@qq.com&#39;, &#39;passwd&#39;)</span><br><span class=\"line\">    print(imapObj.select_folder(&#39;INBOX&#39;, readonly&#x3D;True))</span><br><span class=\"line\">    MIds &#x3D; imapObj.search([&#39;ALL&#39;])</span><br><span class=\"line\">    msgList &#x3D; imapObj.fetch(MIds, [&#39;BODY[]&#39;])</span><br><span class=\"line\">    for id in MIds:</span><br><span class=\"line\">        msg &#x3D; pyzmail.PyzMessage.factory(msgList[id][b&#39;BODY[]&#39;])</span><br><span class=\"line\">        if msg.get_subject() &#x3D;&#x3D; &quot;下载图片&quot;:</span><br><span class=\"line\">            if msg.text_part !&#x3D; None:</span><br><span class=\"line\">                urls &#x3D; msg.text_part.get_payload().decode(msg.text_part.charset).split(&#39;^&#39;)</span><br><span class=\"line\">                download(urls)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    checknewpic()</span><br><span class=\"line\">    time.sleep(60)</span><br><span class=\"line\">print(&#39;---------执行完毕-----------&#39;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"附录\"><a class=\"markdownIt-Anchor\" href=\"#附录\">#</a> 附录</h2>\n<p>‘ALL’：返回该文件夹中的所有邮件。如果你请求一个大文件夹中的所有信息，可能会遇到 imaplib 的大小限制</p>\n<p>‘BEFORE/ON/SINCE date’：分别返回给定的 date 之前、当天、之后 IMAP 服务器接受的消息，日期格式必须是 01-Jul-2020<br>\n 此外，虽然 “SINCE 01-Jul-2020” 将匹配 7 月 1 日当天和之后的消息，但是 “BEFORE 01-Jul-2020” 仅匹配 7 月 1 日之前的消息，不包括 7 月 1 日当天</p>\n<p>‘SUBJECT/BODY/TEXT string’: 分别返回 string 出现在主题、正文、主题或正文中的消息，如果 string 中有空格，就是用双引号</p>\n<p>‘FROM/TO/CC/BCC string’: 返回所有信息，其中 string 分别出现在 “from” 邮件地址、“to” 邮件地址、“cc”（抄送）地址、或 “bcc”（密件抄送）地址<br>\n如果 string 中有多个邮件地址，就是用空格将他们分割开，并使用双引号</p>\n<p>‘SEEN/UNSEEN’：分别返回包含和不包含 \\Seen 标记的所有信息。如果电子邮件已经被 fetch () 方法调用访问，或者你曾在电子邮件程序中或网络浏览器中点击过它，<br>\n就会有 \\Seen 标记，比较常用的说法是 “已读” 而不是 “已看”</p>\n<p>‘ANSWERED/UNANSERED’: 分别返回包含和不包含 \\Answered 标记的所有信息，如果消息已答复就会有 \\Answered 标记</p>\n<p>‘DELERED/UNDELETED’: 分别返回包含和不包含 \\Deleted 标记的所有信息，用 delete_messages () 方法删除的邮件就会有 \\Deleted 标记，直到调用 expunge () 方法才<br>\n会永久删除</p>\n<p>‘DRAFT/UNDRAFT’：分别返回包含和不包含 \\Draft 标记的所有信息，草稿邮件通常保存在单独的草稿文件夹中，而不是收件箱</p>\n<p>‘FLAGGED/UNFLAGGED’：分别返回包含和不包含 \\Flagged 标记的所有信息，这个标记通常用来标记电子邮件的 “重要” 或 “紧急”</p>\n<p>‘LARGER/SMALLER N’：分别返回大于或小于 N 个字节的所有信息</p>\n<p>‘NOT search-key’: 返回搜索键不会返回的那些信息</p>\n<p>‘OR search-key1 search-key2’: 返回符合第一个或者第二个搜索键的信息</p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/redis%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/",
            "url": "https://blog.wuhen.one/2021/05/08/redis%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/",
            "title": "redis安装手册",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"windows安装\"><a class=\"markdownIt-Anchor\" href=\"#windows安装\">#</a> Windows 安装</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.redis-5.0.9(<a href=\"https://github.com/tporadowski/redis/releases/download/v5.0.9/Redis-x64-5.0.9.zip\">资源地址</a>)</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 安装验证</strong></p>\n<p>下载之后解压。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761507-378fd300-902e-11eb-9736-31c06c5cbb42.png\" alt=\"image\"></p>\n<p>打开 PowerShell，切换到该目录。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761514-3f4f7780-902e-11eb-8cd9-457f4810bb89.png\" alt=\"image\"></p>\n<p>执行命令，开启服务端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\redis-server.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761526-46768580-902e-11eb-9948-ad241f2b404a.png\" alt=\"image\"></p>\n<p>服务端启动成功。<br>\n再打开一个 PowerShell 窗口，切换到该目录，执行命令启动客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\redis-cli.exe</span><br></pre></td></tr></table></figure>\n<p>验证一下</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761536-4ecec080-902e-11eb-87c4-08e38694cf07.png\" alt=\"image\"></p>\n<hr>\n<h2 id=\"ubuntu安装\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu安装\">#</a> ubuntu 安装</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.ubuntu16.04(<a href=\"https://blog.csdn.net/qq_43938052/article/details/107326122\">安装教程</a>)</p>\n<p>2.gcc 5.4.0</p>\n<p><strong>安装：apt install gcc</strong></p>\n<p>3.make 4.1</p>\n<p><strong>安装 apt install make</strong></p>\n<p>4.redis-6.0.8(<a href=\"http://download.redis.io/releases/redis-6.0.8.tar.gz\">下载地址</a>)</p>\n</blockquote>\n<p><strong>2. 安装步骤</strong></p>\n<p>先切换到 root 权限。</p>\n<p>切换路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local</span><br></pre></td></tr></table></figure>\n<p>新建 redis 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir redis</span><br></pre></td></tr></table></figure>\n<p>下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd mkdir </span><br><span class=\"line\">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-6.0.8.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzvf redis-6.0.8.tar.gz</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761560-6dcd5280-902e-11eb-9ef5-534895213fea.png\" alt=\"image\"></p>\n<p>编译</p>\n<p><strong>注意：执行 make 命令前要装好 gcc、make</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd redis-6.0.8</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p>编译成功后，src 目录下将生成 redis-server、redis-cli</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761570-7756ba80-902e-11eb-8edd-c9bc29c1dd55.png\" alt=\"image\"></p>\n<p><strong>3. 验证</strong></p>\n<p>执行命令，启动服务端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;redis-server</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761577-82a9e600-902e-11eb-8e55-a70250ee4d82.png\" alt=\"image\"></p>\n<p>成功</p>\n<p>再打开一个终端窗口，执行命令，启动客户端。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\redis-cli</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761587-8c334e00-902e-11eb-9d84-59ad30f14722.png\" alt=\"image\"></p>\n<p><strong>4. 设置远程连接</strong></p>\n<p>用 windows 的 redis-cli 连接虚拟机 ubuntu 的 redis。</p>\n<p>在 Ubuntu 中 Ctrl+c 先关掉已经运行的 redis-server。</p>\n<p>写个 redis 的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br><span class=\"line\">#若无该&#x2F;etc&#x2F;redis目录，可以创建一个，当然你也可以自定义。</span><br></pre></td></tr></table></figure>\n<p>写入以下内容，保存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind 0.0.0.0</span><br></pre></td></tr></table></figure>\n<p>启动 redis 服务端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis-6.0.8&#x2F;src&#x2F;</span><br><span class=\"line\">.&#x2F;redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761604-9b1a0080-902e-11eb-8251-82a3e0e47ea9.png\" alt=\"image\"></p>\n<p>在 windows 打开 PowerShell，切换到 redis-cli 目录，执行命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\redis-cli.exe -h 192.168.146.104 -p 6379</span><br></pre></td></tr></table></figure>\n<p>-p 为端口，在服务端可以自定义。</p>\n<p>验证</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761613-a2410e80-902e-11eb-8bc2-205d8af0c38c.png\" alt=\"image\"></p>\n<p>今天的文章到此结束。</p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "软件安装"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/",
            "url": "https://blog.wuhen.one/2021/05/08/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/",
            "title": "shell脚本编写",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h1 id=\"shell脚本编写\"><a class=\"markdownIt-Anchor\" href=\"#shell脚本编写\">#</a> shell 脚本编写</h1>\n<h2 id=\"一些语法基础\"><a class=\"markdownIt-Anchor\" href=\"#一些语法基础\">#</a> 一些语法基础</h2>\n<p><strong>1. 如何定义一个变量</strong></p>\n<p>变量名由字母、数字、下划线组成，不可以数字开头，不可使用保留关键字。</p>\n<p>等号左右不可有空格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haha&#x3D;&quot;jiji&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>使用变量：在变量名前加上 $</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $haha</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><strong>可以在变量外加上‘{}’</strong></p>\n<p>其实加与不加都可以，加花括号可以帮助解释器更好地识别变量边界。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;hello world $&#123;haha&#125;&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>readonly 只读变量</strong></p>\n<p>readonly 关键字修饰的变量不可修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readonly haha&#x3D;&quot;jiji&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>数组</strong></p>\n<p><strong>定义</strong></p>\n<p>数组内可有不同类型数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myArray&#x3D;(1 2 ‘kkk’ 4)</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者(下标可以不连续，无限制)</span><br><span class=\"line\"></span><br><span class=\"line\">myArray[0]&#x3D;10</span><br><span class=\"line\">myArray[0]&#x3D;11</span><br><span class=\"line\">myArray[0]&#x3D;12</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>读取数组内容</strong></p>\n<p><strong>通过索引</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myArray&#x3D;(1 2 &#39;jiji&#39; 4)</span><br><span class=\"line\">echo $&#123;myArray[0]&#125;</span><br><span class=\"line\">echo $&#123;myArray[1]&#125;</span><br><span class=\"line\">echo $&#123;myArray[2]&#125;</span><br><span class=\"line\">echo $&#123;myArray[3]&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">jiji</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<p><strong>获取所有元素</strong></p>\n<p>使用 @、* 获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myArray&#x3D;(1 2 &#39;jiji&#39; 4)</span><br><span class=\"line\">echo $&#123;myArray[@]&#125;</span><br><span class=\"line\">echo $&#123;myArray[*]&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 jiji 4</span><br><span class=\"line\">1 2 jiji 4</span><br></pre></td></tr></table></figure>\n<p><strong>获取数组长度</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myArray&#x3D;(1 2 &#39;jiji&#39; 4)</span><br><span class=\"line\">echo $&#123;#myArray[@]&#125;</span><br><span class=\"line\">echo $&#123;#myArray[*]&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<p><strong>2. 流程控制</strong></p>\n<p><strong>if-else</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ 1 &#x3D;&#x3D; 1 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;OK&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p><strong>多个 if-else</strong></p>\n<p><strong>注意：</strong></p>\n<p>判断条件’[]' 与变量要有空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a&#x3D;1</span><br><span class=\"line\">b&#x3D;2</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a &#x3D;&#x3D; $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;a等于b&quot;</span><br><span class=\"line\">elif [ $a -gt $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;a大于b&quot;</span><br><span class=\"line\">elif [ $a -lt $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;a小于b&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p><strong>for 循环</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in 1 2 3 4</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<p><strong>while 循环</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int&#x3D;1</span><br><span class=\"line\">while (( $int&lt;5 ))</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $int</span><br><span class=\"line\">    let &quot;int++&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<p><strong>case</strong></p>\n<p>若无匹配项，则执行 *。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;请输入一个数：&quot;</span><br><span class=\"line\">read num</span><br><span class=\"line\">case $num in</span><br><span class=\"line\">    1)</span><br><span class=\"line\">        echo &quot;1&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    2)</span><br><span class=\"line\">        echo &quot;2&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    3) </span><br><span class=\"line\">        echo &quot;3&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    4) </span><br><span class=\"line\">        echo &quot;4&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        echo &quot;other&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输入2</span><br><span class=\"line\">请输入一个数：</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\"></span><br><span class=\"line\"># 输入 11</span><br><span class=\"line\"></span><br><span class=\"line\">请输入一个数：</span><br><span class=\"line\">11</span><br><span class=\"line\">other</span><br></pre></td></tr></table></figure>\n<p><strong>无限循环</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while :</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;hello,world&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">while true</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;hello,world&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">for((;;));do</span><br><span class=\"line\">echo &quot;jiji&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong>until</strong></p>\n<p><strong>int 等于 3 时停止</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int&#x3D;1</span><br><span class=\"line\">until (($int&#x3D;&#x3D;3))</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;$int&quot;</span><br><span class=\"line\">    let &quot;int++&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong>break</strong></p>\n<p>跳出循环</p>\n<p><strong>continue</strong></p>\n<p>跳出本次循环</p>\n<p><strong>3. 传递参数</strong></p>\n<p>通常在执行脚本时，会为脚本传递一些参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;$0&quot;</span><br><span class=\"line\">echo &quot;$1&quot;</span><br><span class=\"line\">echo &quot;$2&quot;</span><br><span class=\"line\">echo &quot;$3&quot;</span><br><span class=\"line\">echo &quot;$4&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;传递参数的个数：$#&quot;</span><br><span class=\"line\">echo &quot;当前id:$$&quot;</span><br><span class=\"line\">echo &quot;$*&quot;</span><br><span class=\"line\">echo &quot;$@&quot;</span><br><span class=\"line\">echo &quot;最后一个id：$!&quot;</span><br><span class=\"line\">echo &quot;退出状态：$?&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>执行命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;hello.sh a b c d</span><br></pre></td></tr></table></figure>\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;hello.sh</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br><span class=\"line\">d</span><br><span class=\"line\">传递参数的个数：4</span><br><span class=\"line\">当前id:15412</span><br><span class=\"line\">a b c d</span><br><span class=\"line\">a b c d</span><br><span class=\"line\">最后一个id：</span><br><span class=\"line\">退出状态：0</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$0</td>\n<td>脚本名</td>\n</tr>\n<tr>\n<td>$n</td>\n<td>第 n 个参数</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>传递参数的个数</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台最后一个进程 id</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>当前进程 id</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>退出状态码</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>单字符串，所有参数</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>多字符串，所有参数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>4. 函数定义</strong></p>\n<p><strong>无参数函数定义：可以不写 function 关键字，return 后跟 0~255 作为返回值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    echo &quot;haha&quot;</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>有参数的函数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f2()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    echo &quot;$0&quot;</span><br><span class=\"line\">    echo &quot;$1&quot;</span><br><span class=\"line\">    echo &quot;$2&quot;</span><br><span class=\"line\">    echo &quot;$3&quot;</span><br><span class=\"line\">    echo &quot;$4&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f2 1 2 3 4</span><br></pre></td></tr></table></figure>\n<p><strong>显示结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;hello.sh</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<p><strong>5. 运算符</strong></p>\n<p><strong>算数运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n</tr>\n<tr>\n<td>=</td>\n<td>赋值</td>\n</tr>\n<tr>\n<td>==</td>\n<td>比较是否相等，相等返回 true</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不相等，返回 true</td>\n</tr>\n</tbody>\n</table>\n<p><strong>关系运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-eq</td>\n<td>左值等于右值，返回 true</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>左值不等于右值，返回 true</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>左值大于右值，返回 true</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>左值小于右值，返回 true</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>左值大于等于右值，返回 true</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>左值小于等于右值，返回 true</td>\n</tr>\n</tbody>\n</table>\n<p><strong>字符串运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>字符串相等，返回 true</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>字符串不相等，返回 true</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>长度为 0, 返回 true</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>长度不为 0, 返回 true</td>\n</tr>\n<tr>\n<td>$</td>\n<td>是否为空，不为空返回 true</td>\n</tr>\n</tbody>\n</table>\n<p><strong>逻辑运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑 And</td>\n</tr>\n<tr>\n<td>||</td>\n<td>逻辑 Or</td>\n</tr>\n</tbody>\n</table>\n<p><strong>布尔运算</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td>非运算</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>或运算</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>与运算</td>\n</tr>\n</tbody>\n</table>\n<p><strong>文件测试符</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b file</td>\n<td>块设备，返回 true</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>字符设备，返回 true</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>目录，返回 true</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>设置 SGID 位，返回 true</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>设置粘着位 (Sticky Bit)，返回 true</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>可读，返回 true</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>可写，返回 true</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>可执行，返回 true</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>存在，返回 true</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>文件不为空，返回 true</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>有名管道，返回 true</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>设置 SUID，返回 true</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong></p>\n<p>SUID–&gt;Set User ID</p>\n<p>SGID–&gt;Set Group ID</p>\n<p><strong>6. 文件包含</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 方法1 &#39;.&#39;与文件名间空格不可以忘哦</span><br><span class=\"line\">. filename</span><br><span class=\"line\"></span><br><span class=\"line\"># 方法2 </span><br><span class=\"line\">source filename</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/ubuntu20%E9%85%8D%E7%BD%AEip/",
            "url": "https://blog.wuhen.one/2021/05/08/ubuntu20%E9%85%8D%E7%BD%AEip/",
            "title": "ubuntu20配置ip",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"ubuntu20配置ip\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu20配置ip\">#</a> ubuntu20 配置 ip</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.ubuntu20</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 配置 ip</strong></p>\n<p>打开终端，修改以下文件，文件名可能不一致，请灵活处理。</p>\n<p>ens33 取决自己的实际情况。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;netplan&#x2F;01-network-manager-all.yaml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Let NetworkManager manage all devices on this system</span><br><span class=\"line\">network:</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\">  #renderer: NetworkManager</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens33:</span><br><span class=\"line\">      addresses: [192.168.146.200&#x2F;24]</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      dhcp6: no</span><br><span class=\"line\">      gateway4: 192.168.146.2</span><br><span class=\"line\">      nameservers:</span><br><span class=\"line\">        addresses: [192.168.146.2,8.8.8.8]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>注意：冒号后需空格，每一级缩进严格</strong></p>\n<p>执行命令，配置 ip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netplan apply</span><br></pre></td></tr></table></figure>\n<p>查看 ip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112807945-0b666780-90ab-11eb-9563-6c283ab86900.png\" alt=\"image\"></p>\n<p>测试网络连通性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping baidu.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112807968-13260c00-90ab-11eb-8a48-4163cf661a88.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/ubuntu%E4%B8%8B%E5%88%9D%E8%AF%95%E9%9D%99%E6%80%81%E5%BA%93.a%20%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%BA%93.so/",
            "url": "https://blog.wuhen.one/2021/05/08/ubuntu%E4%B8%8B%E5%88%9D%E8%AF%95%E9%9D%99%E6%80%81%E5%BA%93.a%20%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%BA%93.so/",
            "title": "ubuntu下初试静态库.a 与共享库.so",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"ubuntu下初试静态库a-与共享库so\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu下初试静态库a-与共享库so\">#</a> ubuntu 下初试静态库.a <a href=\"http://xn--jhquo34ejyu.so\">与共享库.so</a></h2>\n<p><strong>实验目的：</strong> 欲将 a1.c，a2.c 生成静态库.a 与共享库.so 以供 test.c 使用。</p>\n<p><strong>阅读技术基础：</strong> 需有 gcc、makefile 的一些基础，以及熟悉 linux 基础操作。</p>\n<hr>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.ubuntu16.04(<a href=\"https://blog.csdn.net/qq_43938052/article/details/107326122\">安装教程</a>)</p>\n<p>2.gcc-5.4.0（<strong>安装：apt install gcc</strong> ）</p>\n<p>3.make-4.1（<strong>安装：apt install make</strong> ）</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 测试源码</strong></p>\n<hr>\n<p>a1.c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*************************************************************************</span><br><span class=\"line\">    &gt; File Name: a1.c</span><br><span class=\"line\">    &gt; Author: wuhen</span><br><span class=\"line\">    &gt; Created Time: Tue 13 Oct 2020 12:41:27 AM CST</span><br><span class=\"line\"> ************************************************************************&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">void print1(int arg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        printf(&quot;A1 print arg:%d\\n&quot;,arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>a2.c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*************************************************************************</span><br><span class=\"line\">    &gt; File Name: a2.c</span><br><span class=\"line\">    &gt; Author: wuhen</span><br><span class=\"line\">    &gt; Created Time: Tue 13 Oct 2020 12:43:22 AM CST</span><br><span class=\"line\"> ************************************************************************&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">void print2(char *arg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        printf(&quot;A2 print arg:%s\\n&quot;,arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>a.h</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*************************************************************************</span><br><span class=\"line\">    &gt; File Name: a.h</span><br><span class=\"line\">    &gt; Author: wuhen</span><br><span class=\"line\">    &gt; Created Time: Tue 13 Oct 2020 12:55:06 AM CST</span><br><span class=\"line\"> ************************************************************************&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">#ifndef A_H</span><br><span class=\"line\">#define A_H</span><br><span class=\"line\">void print1(int);</span><br><span class=\"line\">void print2(char*);</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>test.c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*************************************************************************</span><br><span class=\"line\">    &gt; File Name: test.c</span><br><span class=\"line\">    &gt; Author: wuhen</span><br><span class=\"line\">    &gt; Created Time: Tue 13 Oct 2020 02:11:53 AM CST</span><br><span class=\"line\"> ************************************************************************&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&quot;a.h&quot;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        print1(4);</span><br><span class=\"line\">        print2(&quot;hello,world!!!&quot;);</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>makefile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all:a1.o a2.o test.o</span><br><span class=\"line\">        gcc -o all a1.o a2.o test.o</span><br><span class=\"line\">a1.o:a1.c</span><br><span class=\"line\">        gcc -c a1.c</span><br><span class=\"line\">a2.o:a2.c</span><br><span class=\"line\">        gcc -c a2.c</span><br><span class=\"line\">test.o:test.c a.h</span><br><span class=\"line\">        gcc -c a.h test.c</span><br><span class=\"line\">static:</span><br><span class=\"line\">        ar crv lib.a a1.o a2.o</span><br><span class=\"line\">        gcc -o test1 test.c lib.a</span><br><span class=\"line\"></span><br><span class=\"line\">createso:</span><br><span class=\"line\">        gcc -c -fpic *.c a.h</span><br><span class=\"line\">        gcc -shared a1.o a2.o -o lib.so</span><br><span class=\"line\">        gcc -o test2 test.c lib.so</span><br><span class=\"line\">        sudo cp lib.so &#x2F;usr&#x2F;lib&#x2F;</span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm a1.o a2.o test.o</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>3. 验证</strong><br>\n执行命令，测试源码是否可以正常编译。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">.&#x2F;all</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112751801-6c863080-9002-11eb-86c4-1dbbe6056334.png\" alt=\"image\"></p>\n<p>执行命令，生成静态库 lib.a，使用 test.c 测试静态库是否可以正常使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make static</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112751808-7871f280-9002-11eb-9aff-752367723177.png\" alt=\"image\"></p>\n<p>执行命令，<a href=\"http://xn--lib-8l9dv0kn0zssfgx6b.so\">生成共享库 lib.so</a>，并使用 test.c 进行测试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make createso</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112751820-86277800-9002-11eb-9b7c-b11fc22d3840.png\" alt=\"image\"></p>\n<p><strong>4. 附录</strong><br>\n gcc 帮助信息</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112751833-90e20d00-9002-11eb-9ed8-5811651bf173.png\" alt=\"image\"><br>\n<img src=\"https://user-images.githubusercontent.com/48900845/112751837-95a6c100-9002-11eb-8a1b-fbca1768a9d3.png\" alt=\"image\"></p>\n<hr>\n<p>ar 帮助信息</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112751844-9fc8bf80-9002-11eb-83f6-b3fcd7b29387.png\" alt=\"image\"><br>\n<img src=\"https://user-images.githubusercontent.com/48900845/112751847-a3f4dd00-9002-11eb-82b5-b59e25ed537c.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "C"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/ubuntu%E5%BF%98%E8%AE%B0%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%8E%E5%AF%86%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "url": "https://blog.wuhen.one/2021/05/08/ubuntu%E5%BF%98%E8%AE%B0%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%8E%E5%AF%86%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "title": "ubuntu忘记用户名与密码解决方案",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"ubuntu忘记用户名与密码解决方案\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu忘记用户名与密码解决方案\">#</a> ubuntu 忘记用户名与密码解决方案</h2>\n<p>很多朋友经常忘记自己的用户名以及密码。为啥哩，因为他们装好了系统后就没用过，放在电脑里吃灰，等到要用的时候，发现记不得用户名及密码了。哎呀，不小心说漏了，sorry，sorry。</p>\n<p><strong>1. 环境</strong></p>\n<blockquote>\n<p>1.VMware15.5.6</p>\n<p>2.ubuntu16.04</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 解决方案</strong></p>\n<p>开启 ubuntu 虚拟机时长按 esc 键（<strong>注意：你的鼠标要聚焦到虚拟机哦，否则你的 esc 键是作用到物理机的。</strong>），选择如图选项，回车。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112808137-42d51400-90ab-11eb-939e-d6495f337c06.png\" alt=\"image\"></p>\n<p>选择第二个选项，按 e 键编辑。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112808162-49fc2200-90ab-11eb-882a-b9d6fa2a7eb8.png\" alt=\"image\"></p>\n<p>找到 linux 下一行，从最后面的 nomodeset 开始回删，删到 root 那。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112808192-53858a00-90ab-11eb-8445-75c37a9d01b0.png\" alt=\"image\"></p>\n<p>然后添加 rw single init=/bin/bash，按 F10 或者 ctrl + x</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112808235-5c765b80-90ab-11eb-8c2e-a82ad4b3e80b.png\" alt=\"image\"></p>\n<p>瞧，我们进入系统了。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112808267-64360000-90ab-11eb-96e2-f0cfb8b1d3b4.png\" alt=\"image\"></p>\n<p>执行命令，查看下用户名。我的用户名是 wuhen3。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;etc&#x2F;shadow</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112808311-6f892b80-90ab-11eb-97aa-5cd9e0d74467.png\" alt=\"image\"></p>\n<p>执行命令，修改密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd 用户名</span><br></pre></td></tr></table></figure>\n<p><strong>注意：如果你的密码修改没成功，可能是你用了”1234“这种弱密码，试着在密码中添加个字母试试。</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112808349-7adc5700-90ab-11eb-8306-6b6ca36d7f33.png\" alt=\"image\"></p>\n<p>重启你的系统。登录试试。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112808372-82036500-90ab-11eb-9329-af7c00bdeb95.png\" alt=\"image\"></p>\n<p>成功。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112808431-8b8ccd00-90ab-11eb-95c1-71593e49e91d.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/win10%20%E5%88%9D%E8%AF%95ping/",
            "url": "https://blog.wuhen.one/2021/05/08/win10%20%E5%88%9D%E8%AF%95ping/",
            "title": "win10 初试ping",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"win10-初试ping\"><a class=\"markdownIt-Anchor\" href=\"#win10-初试ping\">#</a> win10 初试 ping</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.ping</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2.ping 原理</strong></p>\n<p>PING （Packet Internet Groper），因特网包探索器，用于测试网络连接量的程序 。ping 是工作在 TCP/IP 网络体系结构中应用层的一个服务命令， 主要是向特定的目的主机发送 ICMP（Internet Control Message Protocol 因特网报文控制协议）Echo 请求报文，测试目的站是否可达及了解其有关状态。</p>\n<p><strong>ICMP 报文类型</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760105-6f941780-9028-11eb-975d-f7638cba2210.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760111-7589f880-9028-11eb-9449-33d01405d1dd.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760117-7b7fd980-9028-11eb-8b6f-acab18de73e7.png\" alt=\"image\"></p>\n<p><strong>3. 效果</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760122-820e5100-9028-11eb-81f5-90993b4f48f9.png\" alt=\"image\"></p>\n<p><strong>用法</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760130-8c304f80-9028-11eb-87b3-2d5bd0cf92a4.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/win10%20%E5%88%9D%E8%AF%95tracert/",
            "url": "https://blog.wuhen.one/2021/05/08/win10%20%E5%88%9D%E8%AF%95tracert/",
            "title": "win10 初试tracert",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"win10-初试tracert\"><a class=\"markdownIt-Anchor\" href=\"#win10-初试tracert\">#</a> win10 初试 tracert</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.tracert</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2.tracert (Traceroute) 原理</strong></p>\n<p>ICMP 报文类型</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760192-ba159400-9028-11eb-87ae-f01184f2a1f8.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760209-be41b180-9028-11eb-876b-1f0c99c1f32c.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760223-c39efc00-9028-11eb-9810-b2d39d41df2a.png\" alt=\"image\"></p>\n<p>Traceroute 是 ICMP 的一个应用，用来跟踪一个分组从源主机到目标主机的路径。<br>\nTraceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。</p>\n<blockquote>\n<p><strong>1.</strong> 源主机向目的主机发送一连串的 IP 数据报。</p>\n<p><strong>2.</strong> 第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；</p>\n<p><strong>3.</strong> 源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。</p>\n<p><strong>4.</strong> 重复以上操作… …</p>\n<p><strong>5.</strong> 直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。由于数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。</p>\n<p><strong>6.</strong> 综上所述，可以得到源主机到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。</p>\n</blockquote>\n<p><strong>3. 执行效果</strong></p>\n<p>打开终端 &gt;&gt; 执行命令</p>\n<p><strong>注意：想追踪哪个，请随意</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tracert baidu.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760269-d7e2f900-9028-11eb-9388-a166616f7c6b.png\" alt=\"image\"></p>\n<p><strong>tracert 用法</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760281-dfa29d80-9028-11eb-88b6-6d5ed2fe5cc7.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/wireshark%20%E5%88%86%E6%9E%90TCP%E5%8D%8F%E8%AE%AE/",
            "url": "https://blog.wuhen.one/2021/05/08/wireshark%20%E5%88%86%E6%9E%90TCP%E5%8D%8F%E8%AE%AE/",
            "title": "wireshark 分析tcp协议",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"wireshark-分析tcp协议\"><a class=\"markdownIt-Anchor\" href=\"#wireshark-分析tcp协议\">#</a> wireshark 分析 tcp 协议</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.manjaro-gnome-20.1.2</p>\n<p>2.wireshark-3.4.0</p>\n<p>3.VMware-16.0.0</p>\n<p>4.ubuntu16.04 (虚拟机 192.168.146.100 NAT 模式 服务端)</p>\n<p>5.ubuntu16.04 (虚拟机 192.168.146.101 NAT 模式 客户端)</p>\n<p>6.python3.8</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 实验源码</strong></p>\n<p><a href=\"http://server.py\">server.py</a></p>\n<p><strong>运行于 192.168.146.100</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">server &#x3D; socket.socket()</span><br><span class=\"line\">server.bind((&#39;0.0.0.0&#39;, 7777))</span><br><span class=\"line\">server.listen(5)</span><br><span class=\"line\">print(&#39;开始服务&#39;)</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    conn, addr &#x3D; server.accept()</span><br><span class=\"line\">    print(&#39;a new connect from &#39;, addr)</span><br><span class=\"line\">    conn.sendall(bytes(&#39;hello,world!&#39;, encoding&#x3D;&#39;utf-8&#39;))</span><br><span class=\"line\">    conn.close()</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://client.py\">client.py</a></p>\n<p><strong>运行于 192.168.146.101</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">client &#x3D; socket.socket()</span><br><span class=\"line\">client.connect((&#39;192.168.146.100&#39;, 7777))</span><br><span class=\"line\">data &#x3D; client.recv(1024)</span><br><span class=\"line\">client.close()</span><br><span class=\"line\">print(data.decode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure>\n<p><strong>3.wireshare 分析</strong></p>\n<p>三次握手，一次传输数据，四次挥手。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760317-0c56b500-9029-11eb-8ca6-1b9087b315ec.png\" alt=\"image\"></p>\n<p>TCP Flags 字段</p>\n<blockquote>\n<p>SYN 表示建立连接</p>\n<p>FIN 表示关闭连接</p>\n<p>ACK 表示响应</p>\n<p>PSH 表示有 DATA 数据传输</p>\n<p>RST 表示连接重置</p>\n</blockquote>\n<p>TCP Seq 字段</p>\n<blockquote>\n<p>TCP 协议为每个包编号（sequence number，简称 SEQ），以便接收的一方按照顺序还原。万一发生丢包，也可以知道丢失的是哪一个包。</p>\n</blockquote>\n<p>TCP ACK 字段</p>\n<blockquote>\n<p>ACK 携带两个信息。</p>\n<p>期待要收到下一个数据包的编号</p>\n<p>接收方的接收窗口的剩余容量</p>\n</blockquote>\n<p>TCP Window</p>\n<blockquote>\n<p>接受窗口大小，这个是可变的，用来调节数据发送速率。</p>\n</blockquote>\n<p>IP Flags 字段</p>\n<blockquote>\n<p>1. 长度 3 比特。</p>\n<p>2. 该字段第一位不使用。</p>\n<p>3. 第二位是 DF（Don’t Fragment）位，DF 位设为 1 时表明路由器不能对该上层数据包分段。如果一个上层数据包无法在不分段的情况下进行转发，则路由器会丢弃该上层数据包并返回一个错误信息。</p>\n<p>4. 第三位是 MF（More Fragments）位，当路由器对一个上层数据包分段，则路由器会在除了最后一个分段的 IP 包的包头中将 MF 位设为 1。</p>\n</blockquote>\n<p>IP Protocol 字段</p>\n<blockquote>\n<p>8bit 的协议字段表示在 IP 上层承载的是什么协议。</p>\n<p>0x01 表示 ICMP 协议</p>\n<p>0x06 表示 TCP 协议</p>\n<p>0x11 表示 UDP 协议等。</p>\n</blockquote>\n<p>数据帧的 Type</p>\n<blockquote>\n<p>IP:  0x0800</p>\n<p>ARP: 0x0806</p>\n</blockquote>\n<p>源与目的</p>\n<blockquote>\n<p>Ethernet：源 Mac 地址与目的 Mac 地址</p>\n<p>IP：源 ip 地址与目的 ip 地址</p>\n<p>TCP：源端口与目的端口</p>\n</blockquote>\n<p>关于三次握手，四次挥手，请阅读<a href=\"https://hit-alibaba.github.io/interview/basic/network/TCP.html\">这篇文章</a></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/wireshark%E5%88%86%E6%9E%90UDP%E5%8D%8F%E8%AE%AE/",
            "url": "https://blog.wuhen.one/2021/05/08/wireshark%E5%88%86%E6%9E%90UDP%E5%8D%8F%E8%AE%AE/",
            "title": "wireshark分析UDP协议",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"wireshark分析udp协议\"><a class=\"markdownIt-Anchor\" href=\"#wireshark分析udp协议\">#</a> wireshark 分析 UDP 协议</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.manjaro-gnome-20.1.2</p>\n<p>2.wireshark-3.4.0</p>\n<p>3.VMware-16.0.0</p>\n<p>4.ubuntu16.04 (虚拟机 192.168.146.100 NAT 模式 服务端)</p>\n<p>5.ubuntu16.04 (虚拟机 192.168.146.101 NAT 模式 客户端)</p>\n<p>6.python3.8</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 源码</strong></p>\n<p>功能：<br>\n客户端脚本执行 4 次，每次向服务端发送‘cao’字符串，服务端收到后向客户端发送一个字符串。<br>\n客户端源码</p>\n<p><a href=\"http://client.py\">client.py</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">client &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">client.sendto(&#39;cao&#39;.encode(&#39;utf-8&#39;), (&#39;192.168.146.100&#39;, 7777))</span><br><span class=\"line\">data, addr &#x3D; client.recvfrom(1024)</span><br><span class=\"line\">print(&quot;from:&#123;&#125;   data:&#123;&#125;&quot;.format(addr, data))</span><br></pre></td></tr></table></figure>\n<p>服务端源码<br>\n<a href=\"http://server.py\"> server.py</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">server &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">server.bind((&#39;0.0.0.0&#39;, 7777))</span><br><span class=\"line\">data &#x3D; [&#39;1234&#39;, &#39;abcd&#39;, &#39;jjjj&#39;, &#39;hello&#39;]</span><br><span class=\"line\">i &#x3D; 0</span><br><span class=\"line\">for i in data:</span><br><span class=\"line\">    data, addr &#x3D; server.recvfrom(1024)</span><br><span class=\"line\">    print(&quot;from:&#123;&#125;   data:&#123;&#125;&quot;.format(addr, data))</span><br><span class=\"line\">    server.sendto(i.encode(&#39;utf-8&#39;), addr)</span><br></pre></td></tr></table></figure>\n<p><strong>3. 效果</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760375-52ac1400-9029-11eb-816f-64208d648594.png\" alt=\"image\"></p>\n<p><strong>4. 分析</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760381-58a1f500-9029-11eb-98ef-57556fd4c579.png\" alt=\"image\"></p>\n<p><strong>字段</strong></p>\n<blockquote>\n<p>Source Port   源端口</p>\n<p>Destination Port  目的端口</p>\n<p>Length 长度</p>\n</blockquote>\n<p><strong>UDP 的分组结构</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760398-66577a80-9029-11eb-94de-101caaed94e2.png\" alt=\"image\"></p>\n<p><strong>IPv4 伪头部</strong></p>\n<p>当 UDP 运行在 IPv4 之上时，为了能够计算校验和，需要在 UDP 数据包前添加一个 “伪头部”。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760407-6f484c00-9029-11eb-8180-f590dae625b3.png\" alt=\"image\"></p>\n<p><strong>IPv6 伪头部</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760413-75d6c380-9029-11eb-8d32-4272145c42b4.png\" alt=\"image\"></p>\n<p>部分图片来源网络，侵删。</p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E5%AD%A6git%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEwindows%E7%89%88/",
            "url": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E5%AD%A6git%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEwindows%E7%89%88/",
            "title": "初学git安装与配置windows版",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"windows版\"><a class=\"markdownIt-Anchor\" href=\"#windows版\">#</a> windows 版</h2>\n<p>今晚搞了 git，遇到了一些问题，赶紧来记录一哈。</p>\n<p><strong>1.<a href=\"https://git-scm.com/downloads\">Git 下载</a>与安装</strong></p>\n<blockquote>\n<p>注意：安装是图形化安装，跟个指示就可。</p>\n<p>有这个 Git bash 就可。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112805019-a6f5d900-90a7-11eb-910d-baed0ef87c48.png\" alt=\"image\"></p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 开始配置</strong></p>\n<blockquote>\n<p><strong>a. 打开 Git bash</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761137-54c3a200-902c-11eb-9083-4e0d25ee527d.png\" alt=\"image\"></p>\n<p><strong>&gt;b. 配置信息</strong><br>\n 1.git config --global <a href=\"http://user.name\">user.name</a> “Your Name”</p>\n<p>2.git config --global user.email “<a href=\"mailto:email@example.com\">email@example.com</a>”</p>\n<p><strong>注意：</strong></p>\n<p>Your Name 是你要设置的名字，email@example.com 是你要设置的邮箱。</p>\n<p>git config 命令的–global 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和 Email 地址。</p>\n<p>3.ssh-keygen -t rsa -C “<a href=\"mailto:email@example.com\">email@example.com</a>”</p>\n<p><strong>注意：</strong> email@example.com 是你要设置的邮箱。</p>\n<p><strong>接着显示：</strong></p>\n<p>Generating public/private rsa key pair.</p>\n<p>Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa)</p>\n<p>4. 执行 3 后会显示一个路径，找到下图 id_rsa.pub 文件，记事本打开，全部复制，打开你的 github。</p>\n<p><strong>如果没有那个文件（请打开显示隐藏文件，不会请百度）</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761161-77ee5180-902c-11eb-9427-28be2d14f681.png\" alt=\"image\"></p>\n<p>点击右上角头像</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761171-889ec780-902c-11eb-8a40-8309fd6bb176.png\" alt=\"image\"></p>\n<p>点击<strong> SSHa and GPG keys</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761180-97857a00-902c-11eb-87d2-654d25c46c0a.png\" alt=\"image\"></p>\n</blockquote>\n<blockquote>\n<p>点击 new DSSH key，将复制内容粘贴进去保存。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761192-b08e2b00-902c-11eb-804b-14bcdf2a6aa4.png\" alt=\"image\"></p>\n</blockquote>\n<blockquote>\n<p>5.ssh -T <a href=\"mailto:git@github.com\">git@github.com</a>（Git bash 试试）</p>\n<p>跳出下面信息，OK 了。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761200-bd128380-902c-11eb-8a7a-b7ee27049913.png\" alt=\"image\"></p>\n</blockquote>\n<p><strong>3. 建本地库</strong></p>\n<blockquote>\n<p><strong>若看不懂以下命令，请看下 linux 基础命令</strong></p>\n<p>a.mkdir hello（新建目录）</p>\n<p><a href=\"http://b.cd\">b.cd</a> hello</p>\n<p>c.git init（把这个目录变成 Git 可以管理的仓库）</p>\n<p>d. 在 hello 目录下创建一个文件 readme.txt (文件名随意，创建方法随意，测试用)。</p>\n<p>e.git add readme.txt（把文件添加到仓库）</p>\n<p>f.git commit -m “wrote a readme file”（把文件提交到仓库，引号里面是提交说明）</p>\n</blockquote>\n<p><strong>4. 建远程仓库</strong></p>\n<blockquote>\n<p><strong>a. 直接 new 一个</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761230-f2b76c80-902c-11eb-8d61-6d5ab294d41b.png\" alt=\"image\"></p>\n<p>点击 create.</p>\n<p>b.git remote add origin <a href=\"mailto:git@github.com\">git@github.com</a>: 用户名 / 仓库名.git</p>\n<p><strong>注意：远程库的名字就是 origin，这是 Git 默认的叫法，也可以改成别的，但是 origin 这个名字一看就知道是远程库。</strong></p>\n<p>c.git push -u origin master</p>\n<p><strong>由于远程库是空的，我们第一次推送 master 分支时，加上了 - u 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。</strong></p>\n<p>d. 刷新 github hello 仓库发现和你本地库一致，OK。</p>\n<p>e. 从现在起，只要本地作了提交，就可以通过命令：git push origin master</p>\n</blockquote>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E8%AF%95Cisco%20Packet%20Tracer--1%E2%80%94%E2%80%94%E9%9B%86%E7%BA%BF%E5%99%A8/",
            "url": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E8%AF%95Cisco%20Packet%20Tracer--1%E2%80%94%E2%80%94%E9%9B%86%E7%BA%BF%E5%99%A8/",
            "title": "初试Cisco Packet Tracer--1——集线器",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"初试cisco-packet-tracer1集线器\"><a class=\"markdownIt-Anchor\" href=\"#初试cisco-packet-tracer1集线器\">#</a> 初试 Cisco Packet Tracer–1—— 集线器</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.Cisco Packet Tracer-7.3.1.0362(<a href=\"https://www.netacad.com/zh-hans/courses/packet-tracer/introduction-packet-tracer\">下载链接</a>)</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 搭建网络</strong></p>\n<p><strong>实验前必读：</strong></p>\n<p>集线器相比于交换机更为简单，它可以被视作有多个端口的中继器，从一个端口接受比特位（或符号），再从其他端口提交。它对物理层数据包有所感知，可以检测到其开始、挂起及冲突。在检测到冲突时会发送拥塞信号以传播这一事件。集线器不能对经过它的网络流量做更进一步地检查与管理：任何进入的数据包都会被广播到其他端口。集线器 / 中继器无法储存数据 —— 数据包必须在接收时被发送，一旦发生冲突，就会丢包（发送端应当能够侦测到，并重新发送）。基于此，集线器只能以半双工模式工作。因此，由于冲突域更广，相比于使用更复杂的网络设备，使用集线器的数据网络更容易出现数据包冲突。</p>\n<p>集线器（hub）属于纯硬件网络底层设备，基本上不具有类似于交换机的 &quot;智能记忆&quot; 能力和 &quot;学习&quot; 能力。它也不具备交换机所具有的 MAC 地址表，所以它发送数据时都是没有针对性的，而是采用广播方式发送。也就是说当它要向某节点发送数据时，不是直接把数据发送到目的节点，而是把数据包发送到与集线器相连的所有节点，如图所示，简单明了。</p>\n<p>搭建网络的元件都在如下工具栏里。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760463-9d2d9080-9029-11eb-8126-63527c6a849e.png\" alt=\"image\"></p>\n<p>将所需元件添加至工作空间后，点击闪电符号，开始连接线路。</p>\n<p><strong>闪电符号可以帮你自动选择线的种类，当然你也可自己选择</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760468-a4ed3500-9029-11eb-88fb-7835818b94d4.png\" alt=\"image\"></p>\n<p>左键点击 PC0&gt;&gt;Desktop&gt;&gt;IP Configuration，配置 ip。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760492-c0584000-9029-11eb-961f-7e48c2e196cc.png\" alt=\"image\"></p>\n<p>PC0 IP</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760507-c817e480-9029-11eb-9ba1-3f37ce162533.png\" alt=\"image\"></p>\n<p>PC1 IP</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760515-cfd78900-9029-11eb-802a-0d7df4be32d6.png\" alt=\"image\"></p>\n<p>PC2 IP</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760527-d8c85a80-9029-11eb-84de-f8f1c5776d98.png\" alt=\"image\"></p>\n<p>根据下图构建 ICMP 数据报，使其从 PC0 发到 PC1，但是由于是新建的机子，PC0 ARP 高速缓存为空，所以先构建 ARP 广播帧。点击 5 逐步观察数据报流向。你可以查看右侧 Event List 里的详情，查看数据如何封装。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760533-e1b92c00-9029-11eb-9949-95e976254070.png\" alt=\"image\"></p>\n<p>点击右侧 Event List 面板中的 Reset Simulation 后，重新开始 ICMP 数据包，现在 PC0 ARP 高速缓存已有 PC1 的 mac 地址，所以不需构建 ARP 广播。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760541-e978d080-9029-11eb-94e0-2c4f600c69c4.png\" alt=\"image\"></p>\n<p><strong>3. 感受碰撞</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760544-ef6eb180-9029-11eb-8d30-0627f94cb045.png\" alt=\"image\"></p>\n<p>构建这样一种情形。</p>\n<blockquote>\n<p>PC0 给 PC1 发送</p>\n<p>PC3 给 PC5 发送</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760558-fbf30a00-9029-11eb-9e84-3d334420c324.png\" alt=\"image\"></p>\n<p>如上图，线路会出现碰撞，导致发送失败。</p>\n<p><strong>如何解决这个问题呢？下期分析</strong></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E8%AF%95Cisco%20Packet%20Tracer%E2%80%932%E2%80%94%E2%80%94%E4%BA%A4%E6%8D%A2%E6%9C%BA/",
            "url": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E8%AF%95Cisco%20Packet%20Tracer%E2%80%932%E2%80%94%E2%80%94%E4%BA%A4%E6%8D%A2%E6%9C%BA/",
            "title": "初试Cisco Packet Tracer–2——交换机",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"初试cisco-packet-tracer2交换机\"><a class=\"markdownIt-Anchor\" href=\"#初试cisco-packet-tracer2交换机\">#</a> 初试 Cisco Packet Tracer–2—— 交换机</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.Cisco Packet Tracer-7.3.1.0362(<a href=\"https://www.netacad.com/zh-hans/courses/packet-tracer/introduction-packet-tracer\">下载链接</a>)</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 搭建网络</strong></p>\n<p>因为交换机有带宽很高的内部交换矩阵和背部总线，并且这个背部总线上挂接了所有的端口，通过内部交换矩阵，就能够把数据包直接而迅速地传送到目的节点而非所有节点， 这样就不会浪费网络资源，从而产生非常高的效率。同时在此过程中，数据传输的安全程度非常高，更是受到使用者的欢迎和普遍好评。<br>\n和集线器每个端口共享同样带宽不同的是，交换机的数据带宽具有独享性。在这样的前提下，在同一个时间段内，交换机就可以将数据传输到多个节点之间，并且每个节点都可 以当做独立网段而独自享有固定的部分带宽，这样就没有和其他设备进行竞争实用的必要。</p>\n<p><strong>网络结构</strong></p>\n<blockquote>\n<p>PC0–&gt;192.168.100.1</p>\n<p>PC1–&gt;192.168.100.2</p>\n<p>PC2–&gt;192.168.100.3</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760597-2644c780-902a-11eb-8c1a-94daea17913f.png\" alt=\"image\"></p>\n<p>PC0 向 PC1 发送 ICMP 数据包。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760600-2ba21200-902a-11eb-863e-ea5b91437045.png\" alt=\"image\"></p>\n<p>由于设备是新的，PC0 ARP 高速缓存空，发送 ICMP 数据报时先广播，得到 PC1 的 mac 地址后，才发送 ICMP 数据报。当你再次发送时，这时交换机与集线器的区别就可以体现出来了。交换机会自学习，会记住每个接口对应的 mac 地址，这样它不会像集线器那样每一个数据包都广播出去，大大提高了效率。详细的过程，请在仿真时观看。</p>\n<p><strong>3. 上次的问题解决方案</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760605-3492e380-902a-11eb-862c-540eff8a1594.png\" alt=\"image\"></p>\n<p>两个用集线器相连接的网络，之间用交换机相连，交换机经过自学习后，可以有效解决碰撞问题，具体细节请仿真观察。<br>\n同时使 PC0 发送 ICMP 数据包给 PC1；PC3 发送 ICMP 数据包给 PC5。第一次发送可能会发生碰撞（交换机是新的），第二次发送时不会碰撞（交换机自学习）。</p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E8%AF%95Cisco%20Packet%20Tracer%E2%80%933%E2%80%94%E2%80%94%E8%AE%BF%E9%97%AEWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "url": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E8%AF%95Cisco%20Packet%20Tracer%E2%80%933%E2%80%94%E2%80%94%E8%AE%BF%E9%97%AEWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "title": "初试Cisco Packet Tracer–3——访问Web服务器",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"初试cisco-packet-tracer3访问web服务器\"><a class=\"markdownIt-Anchor\" href=\"#初试cisco-packet-tracer3访问web服务器\">#</a> 初试 Cisco Packet Tracer–3—— 访问 Web 服务器</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.Cisco Packet Tracer-7.3.1.0362(<a href=\"https://www.netacad.com/zh-hans/courses/packet-tracer/introduction-packet-tracer\">下载链接</a>)</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 环境搭建</strong></p>\n<p>网络拓扑</p>\n<blockquote>\n<p>PC0–&gt;192.168.100.1</p>\n<p>Server0–&gt;192.168.100.2</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760636-58eec000-902a-11eb-9409-8b92a3b5dc42.png\" alt=\"image\"></p>\n<p>点击 PC0&gt;&gt;Web Browser</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760645-5f7d3780-902a-11eb-9d4a-ff5ebc85e65f.png\" alt=\"image\"></p>\n<p>输入 192.168.100.2，开始仿真</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760660-67d57280-902a-11eb-9115-6a47b6784aed.png\" alt=\"image\"></p>\n<p>点击下一步，逐步观察</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760670-6e63ea00-902a-11eb-844f-5128746e2aec.png\" alt=\"image\"></p>\n<p>最后点开右侧 Event List 查看详细过程</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760680-758af800-902a-11eb-9004-99803cc54191.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E8%AF%95Cisco%20Packet%20Tracer%E2%80%934%E2%80%94%E2%80%94%E9%83%A8%E7%BD%B2DHCP%E3%80%81DNS%E3%80%81Web%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "url": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E8%AF%95Cisco%20Packet%20Tracer%E2%80%934%E2%80%94%E2%80%94%E9%83%A8%E7%BD%B2DHCP%E3%80%81DNS%E3%80%81Web%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "title": "初试Cisco Packet Tracer–4——部署DHCP、DNS、Web服务器",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"初试cisco-packet-tracer4部署dhcp-dns-web服务器\"><a class=\"markdownIt-Anchor\" href=\"#初试cisco-packet-tracer4部署dhcp-dns-web服务器\">#</a> 初试 Cisco Packet Tracer–4—— 部署 DHCP、DNS、Web 服务器</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.Cisco Packet Tracer-7.3.1.0362(<a href=\"https://www.netacad.com/zh-hans/courses/packet-tracer/introduction-packet-tracer\">下载链接</a>)</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 环境搭建</strong></p>\n<p>网络拓扑图<br>\n 3 台 server 设备、3 台 PC 设备、1 台交换机 2960</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760734-ac610e00-902a-11eb-9eb8-3e121b0dfcef.png\" alt=\"image\"></p>\n<p>DHCP 服务器配置，开启 DHCP。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760745-b256ef00-902a-11eb-9da5-4034c68a3cc3.png\" alt=\"image\"></p>\n<p>ip 配置为静态</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760764-b8e56680-902a-11eb-8bc4-fb28f60370b7.png\" alt=\"image\"></p>\n<p>Web 服务器配置，开启 HTTP</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760779-c1d63800-902a-11eb-9f8e-01d21aadf750.png\" alt=\"image\"></p>\n<p>IP 配置为静态 ip</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760789-c8fd4600-902a-11eb-89b2-cb83e29c7d92.png\" alt=\"image\"></p>\n<p>DNS 服务器配置，开启 DNS</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760799-d0245400-902a-11eb-863b-39a1b9a584af.png\" alt=\"image\"></p>\n<p>ip 配置，其实网关这玩意不填也可以，反正在同一个子网。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760807-d7e3f880-902a-11eb-92cd-93c25d0c6043.png\" alt=\"image\"></p>\n<p><strong>3.DHCP 服务仿真</strong></p>\n<p><strong>步骤：</strong><br>\n点击下图 simulation，点击 &gt;&gt;PC0&gt;&gt;Desktop&gt;&gt;IP Configuration</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760850-0661d380-902b-11eb-93bc-9852454442a3.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760867-15488600-902b-11eb-9d37-c327cdac5769.png\" alt=\"image\"></p>\n<p>点击 DHCP，此时 PC0 开始向 DHCP 服务器获取 ip。具体过程请点击下一步观测。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760880-21344800-902b-11eb-947e-d51819bb2bff.png\" alt=\"image\"></p>\n<p><strong>4.Web 访问仿真</strong><br>\n依旧使用 PC0&gt;&gt; 打开 Web Browser</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760886-298c8300-902b-11eb-9fdd-475c491dd3ea.png\" alt=\"image\"></p>\n<p>访问 Web 服务器 192.168.100.2，详细过程请观察仿真。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760897-314c2780-902b-11eb-904d-ffb810cfc00a.png\" alt=\"image\"></p>\n<p><strong>5.DNS 服务</strong></p>\n<p>依旧使用 PC0&gt;&gt; 打开 Web Browser</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760906-3d37e980-902b-11eb-85b3-ffb6e679f37a.png\" alt=\"image\"></p>\n<p><a href=\"http://xn--www-xe3gu50l7efqzl.baidu.com\">这次访问 www.baidu.com</a>，观测请求 DNS 服务器的过程。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760914-43c66100-902b-11eb-867a-104f4d6e2094.png\" alt=\"image\"></p>\n<p>由于我们的 DNS 服务器没有数据，无法解析域名对应的 ip，最后提示 Host Name Unresolved</p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E8%AF%95Cisco%20Packet%20Tracer%E2%80%935%E2%80%94%E2%80%94%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%A4%E4%B8%AA%E5%AD%90%E7%BD%91/",
            "url": "https://blog.wuhen.one/2021/05/08/%E5%88%9D%E8%AF%95Cisco%20Packet%20Tracer%E2%80%935%E2%80%94%E2%80%94%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E4%B8%A4%E4%B8%AA%E5%AD%90%E7%BD%91/",
            "title": "初试Cisco Packet Tracer–5——路由器连接两个子网",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"初试cisco-packet-tracer5路由器连接两个子网\"><a class=\"markdownIt-Anchor\" href=\"#初试cisco-packet-tracer5路由器连接两个子网\">#</a> 初试 Cisco Packet Tracer–5—— 路由器连接两个子网</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.win10</p>\n<p>2.Cisco Packet Tracer-7.3.1.0362(<a href=\"https://www.netacad.com/zh-hans/courses/packet-tracer/introduction-packet-tracer\">下载链接</a>)</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 环境搭建</strong></p>\n<p>网络拓扑图</p>\n<p><strong>IP 配置</strong></p>\n<blockquote>\n<p>PC0–&gt;192.168.100.1</p>\n<p>PC1–&gt;192.168.100.2</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760955-707a7880-902b-11eb-86de-df9374176cb4.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760962-74a69600-902b-11eb-9adb-7e2811284ee0.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760967-7a03e080-902b-11eb-95cc-6112d025f145.png\" alt=\"image\"></p>\n<p>打开 PC0 Command Prompt 测试连通性，如下图所示，网络连通。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 192.168.100.2</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760983-88ea9300-902b-11eb-9550-fe526a301222.png\" alt=\"image\"></p>\n<p>接下来，我们将个人 PC1 的 ip 设置为 192.168.101.1，子网掩码 (Subnet Mask) 255.255.255.0，这时 PC0 与 PC1 不在同一网络。</p>\n<p><strong>如何得知主机所在的网络号：ip 地址与子网掩码按位与，得到的结果为网络号，网络号不同的主机位于不同的网络中。</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112760994-9738af00-902b-11eb-918c-2861b87ee48d.png\" alt=\"image\"></p>\n<p>这时我们用 PC0 去 ping PC1 , 无法 ping 通。因为不在同一子网，需要路由器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 192.168.101.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761022-bdf6e580-902b-11eb-9a61-f6fc9a110f98.png\" alt=\"image\"></p>\n<p>添加路由器后的网络拓扑图</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761027-c51df380-902b-11eb-94f6-5f8b46a4de6a.png\" alt=\"image\"></p>\n<p><strong>大家可以点击 Options&gt;&gt;Preferences 把 Always Show Port… 勾选上，效果如下图</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761042-d0711f00-902b-11eb-9f30-e2c4eff303b7.png\" alt=\"image\"></p>\n<p>现在线路有红色的标志，是因为没有开启路由器相应接口。点击路由器 &gt;&gt;Config 配置</p>\n<p><strong>配置 Gig0/0/0 接口</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">勾选Port Status 后面的on</span><br><span class=\"line\">配置ip 192.168.100.254</span><br><span class=\"line\">配置子网掩码 255.255.255.0</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761059-e54db280-902b-11eb-89a2-8a908de108ae.png\" alt=\"image\"></p>\n<p><strong>配置 Gig0/0/1 接口</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">勾选Port Status 后面的on</span><br><span class=\"line\">配置ip 192.168.101.254</span><br><span class=\"line\">配置子网掩码 255.255.255.0</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761064-eed71a80-902b-11eb-98b3-d453a929b3a0.png\" alt=\"image\"></p>\n<p>开始用 PC0 去 ping PC1，发现依旧 ping 不通。因为 PC0 与 PC1 不在同一网络，PC0 要连通 PC1 需要设置网关。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 192.168.101.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761072-f7c7ec00-902b-11eb-80c2-81bc969f5406.png\" alt=\"image\"></p>\n<p>现在我们开始为 PC0，PC1 配置网关 (Gateway)</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761087-01e9ea80-902c-11eb-96cd-4c9e39e34167.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761089-06160800-902c-11eb-9d84-9fb88b4ceb61.png\" alt=\"image\"></p>\n<p>PC0 ping PC1，现在可以 ping 通了，但是你会发现第一次 ping 丢了一个数据包，这是因为设备都是新的，在 PC0 发送 ICMP (ping 是 ICMP echo 的应用) 之前发起了 ARP 广播，导致超时。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761094-0f06d980-902c-11eb-9cd0-ca04159d0770.png\" alt=\"image\"></p>\n<p>PC1 ping PC0</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761104-1e862280-902c-11eb-91de-1282cfa46db5.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E5%A4%84%E7%90%86Ubuntu%20python%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E9%97%AE%E9%A2%98/",
            "url": "https://blog.wuhen.one/2021/05/08/%E5%A4%84%E7%90%86Ubuntu%20python%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E9%97%AE%E9%A2%98/",
            "title": "处理Ubuntu python多版本管理问题",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"处理ubuntu-python多版本管理问题\"><a class=\"markdownIt-Anchor\" href=\"#处理ubuntu-python多版本管理问题\">#</a> 处理 Ubuntu python 多版本管理问题</h2>\n<p>前几天在 Ubuntu 遇到了 Python 多版本问题，今天心血来潮，想把自己摸索到的方法记录下来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统安装的Python版本</span><br><span class=\"line\">python2.7</span><br><span class=\"line\">python3.6</span><br><span class=\"line\">python3.7</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统pip版本</span><br><span class=\"line\">pip</span><br><span class=\"line\">pip2</span><br><span class=\"line\">pip3</span><br></pre></td></tr></table></figure>\n<p>当我用 python3.7 开发程序时，需要用 pip3 安装依赖包，pip3 总是把包给我搞到 python3.6 下，让我很不爽。<br>\n下面介绍一种解决方法：</p>\n<span id=\"more\"></span>\n<p>1. 找到 python,pip 所在目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我的系统在&#x2F;usr&#x2F;bin&#x2F;路径下。</span><br><span class=\"line\">命令 cd &#x2F;usr&#x2F;bin</span><br><span class=\"line\">查看一下 ls -l</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761926-1af49a80-9030-11eb-9ae6-9146358eff7b.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761932-1f20b800-9030-11eb-887e-3b0346ee50e8.png\" alt=\"image\"></p>\n<p>冒绿光的是可以执行滴文件</p>\n<p>冒蓝光的是链接文件 (您可以理解为类似 Windows 的快捷方式)</p>\n<p>要想更改 pip3 install 的安装位置，可以这么操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑pip3(这玩意就是个Python脚本)</span><br><span class=\"line\">vim pip3</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761941-28aa2000-9030-11eb-95f1-7efe414f8d3f.png\" alt=\"image\"></p>\n<p>将第一行的 python 版本修改你想要的版本，然后保存，问题就解决喽。</p>\n<p>另一个问题就是你在 shell 命令使用 Python 时，Python 版本问题。</p>\n<p>比如你的系统安装了 Python2.7，Python3.6，Python3.7</p>\n<p>这时你在命令窗口</p>\n<p>输入 python2 -----&gt; 使用 Python2.7 版本</p>\n<p>输入 python3 -----&gt; 使用 Python3.6 版本</p>\n<p>如何使用 Python3.7 呢</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;bin</span><br><span class=\"line\">找到python3.7目录（就是找到前面说的冒绿光的python3.7目录）</span><br><span class=\"line\">添加软链接</span><br><span class=\"line\">ln -s &#x2F;usr&#x2F;bin&#x2F;python3.7(找到python3.7的路径) &#x2F;usr&#x2F;bin&#x2F;python3.7 (软链接名字您老随意)</span><br></pre></td></tr></table></figure>\n<p>为啥软连接的路径在 /usr/bin 下呢</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$PATH</span><br></pre></td></tr></table></figure>\n<p>这些目录应该都可以，你可以试试。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112761957-3790d280-9030-11eb-9b88-79752b523601.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%20%E5%A4%84%E7%90%86Excle%E6%96%87%E4%BB%B6/",
            "url": "https://blog.wuhen.one/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%20%E5%A4%84%E7%90%86Excle%E6%96%87%E4%BB%B6/",
            "title": "让繁琐的工作自动化——python 处理Excle文件",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"让繁琐的工作自动化python-处理excle文件\"><a class=\"markdownIt-Anchor\" href=\"#让繁琐的工作自动化python-处理excle文件\">#</a> 让繁琐的工作自动化 ——python 处理 Excle 文件</h2>\n<p>今天收到一个省市县区的 Excle 表格，想着整理一下数据，将信息整理为层级关系（省–&gt; 市–&gt;(县 / 区)）存到字典里，以备不时之需。<br>\n打开一看，MD，3 千行数据，这 TM 要搞到神马时候。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762066-80e12200-9030-11eb-80a8-b888769e0f84.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762072-850d3f80-9030-11eb-924b-7d7a213bfe2e.png\" alt=\"image\"></p>\n<hr>\n<p>叮铃铃～～～～叮铃铃～～～～，人生苦短，我用 python。开搞！！！</p>\n<hr>\n<h2 id=\"openpyxl的基础使用\"><a class=\"markdownIt-Anchor\" href=\"#openpyxl的基础使用\">#</a> <strong>openpyxl 的基础使用</strong></h2>\n<p><strong>环境</strong></p>\n<blockquote>\n<p>1.pycharm2020.1</p>\n<p>2.python3.8</p>\n<p>3.openpyxl 2.1.4</p>\n</blockquote>\n<p>openpyxl 已经更新到 3 点多了，我这里演示的是<strong> openpyxl 2.1.4</strong>。</p>\n<p>导入 openpyxl 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import openpyxl</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><strong>读取操作</strong></p>\n<p>打开要处理的文件，该函数需要传入一个文件路径。wb 是一个 Workbook 对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb &#x3D; openpyxl.load_workbook(&quot;省市县区.xlsx&quot;)</span><br></pre></td></tr></table></figure>\n<p>Excel 文档有多个 sheet 组成。</p>\n<p>获得 Excel 文档所有 sheet。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheetList &#x3D; wb.get_sheet_names()</span><br></pre></td></tr></table></figure>\n<p>根据 sheet 名字获取对应表。表由一个 Worksheet 对象表示，sheet 就是一个 Worksheet 对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet &#x3D; wb.get_sheet_by_name(&quot;sheet名字&quot;)</span><br></pre></td></tr></table></figure>\n<p>取得 sheet 表格中的值</p>\n<p>数值定位：row 是行号，column 是列号。</p>\n<p>字符定位：Excle 用字母表示列，数字表示行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x &#x3D; sheet.cell(row&#x3D;1, column&#x3D;1).value #第一种表示</span><br><span class=\"line\">y &#x3D; sheet[&#39;A1&#39;].value #第二种表示</span><br></pre></td></tr></table></figure>\n<p>列字母和数字之间的转换。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openpyxl.cell.column_index_from_string()   #字母----&gt;数字</span><br><span class=\"line\">openpyxl.cell.column_letter()                        #数字----&gt;字母</span><br></pre></td></tr></table></figure>\n<p>获取 sheet 有多大。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet.get_highest_row()        #返回行数</span><br><span class=\"line\">sheet.get_highest_column()  #返回列数</span><br></pre></td></tr></table></figure>\n<p>遍历 sheet</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in range(1, sheet.get_highest_row()  + 1):</span><br><span class=\"line\">    for j in range(1, sheet.get_highest_column()  + 1):</span><br><span class=\"line\">        print(str(sheet1.cell(row&#x3D;i, column&#x3D;j).value) + &quot; &quot;, end&#x3D;&quot;&quot;)</span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure>\n<p><strong>写入操作</strong></p>\n<p>创建新的 Workbook 对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb &#x3D; openpyxl.Workbook()</span><br></pre></td></tr></table></figure>\n<p>保存文件。(传入文件名)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb.save(&quot;haha.xlsx&quot;)</span><br></pre></td></tr></table></figure>\n<p>创建 sheet，index 表示 sheet 的次序，title 表示 sheet 的名字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb.create_sheet(index&#x3D;0,title&#x3D;&#39;haha&#39;)</span><br></pre></td></tr></table></figure>\n<p>删除 sheet，需要传入 Worksheet 对象，如果知道 sheet 的名字，就可使用以下代码删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb.remove_sheet(wb.get_sheet_by_name(&quot;sheet名字&quot;))</span><br></pre></td></tr></table></figure>\n<p>写入数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet.cell(row&#x3D;1, column&#x3D;1) &#x3D; x #第一种表示</span><br><span class=\"line\">sheet[&#39;A1&#39;] &#x3D; y #第二种表示</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"处理表格的源码\"><a class=\"markdownIt-Anchor\" href=\"#处理表格的源码\">#</a> <strong>处理表格的源码</strong></h2>\n<p>原表格公众号回复【省市】获得</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pprint</span><br><span class=\"line\">import openpyxl</span><br><span class=\"line\">wb &#x3D; openpyxl.load_workbook(&quot;省市县区.xlsx&quot;)</span><br><span class=\"line\">sheet &#x3D; wb.get_sheet_by_name(&quot;省市县区&quot;)</span><br><span class=\"line\">data &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(2, sheet.get_highest_row() + 1):</span><br><span class=\"line\">    province &#x3D; sheet.cell(row&#x3D;i, column&#x3D;1).value</span><br><span class=\"line\">    city &#x3D; sheet.cell(row&#x3D;i, column&#x3D;2).value</span><br><span class=\"line\">    county &#x3D; sheet.cell(row&#x3D;i, column&#x3D;3).value</span><br><span class=\"line\">    data.setdefault(province, &#123;&#125;)</span><br><span class=\"line\">    data[province].setdefault(city, [])</span><br><span class=\"line\">    if data[province][city].count(county) &#x3D;&#x3D; 0:</span><br><span class=\"line\">        data[province][city].append(county)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;数据整理完毕，开始写入文件&quot;)</span><br><span class=\"line\">with open(&quot;cityInfo.py&quot;, &quot;w&quot;, encoding&#x3D;&#39;utf-8&#39;) as file:</span><br><span class=\"line\">    file.write(&quot;cityInfo &#x3D; &quot; + pprint.pformat(data))</span><br><span class=\"line\">print(&quot;文件写入完毕&quot;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%E5%A4%84%E7%90%86CSV%E6%96%87%E4%BB%B6/",
            "url": "https://blog.wuhen.one/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%E5%A4%84%E7%90%86CSV%E6%96%87%E4%BB%B6/",
            "title": "让繁琐的工作自动化——python处理CSV文件",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"让繁琐的工作自动化python处理csv文件\"><a class=\"markdownIt-Anchor\" href=\"#让繁琐的工作自动化python处理csv文件\">#</a> 让繁琐的工作自动化 ——python 处理 CSV 文件</h2>\n<p>CSV：CSV 文件是一种简化的电子表格，不同于 Excle (二进制文件)，CSV 是纯文本文件。</p>\n<hr>\n<p><strong>1. 环境</strong></p>\n<blockquote>\n<p>1.python3.8</p>\n<p>2.pycharm2020.1</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 读取</strong></p>\n<hr>\n<p><strong>本期实例数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haha,18,10.0</span><br><span class=\"line\">jiji,16,12.1</span><br><span class=\"line\">lala,17,11.9</span><br><span class=\"line\">papa,11,13.3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762127-bb4abf00-9030-11eb-9720-275c57179ad9.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762129-bf76dc80-9030-11eb-9ac9-76ee5b99ab5b.png\" alt=\"image\"></p>\n<hr>\n<p>首先导入 csv 模块，不需要安装，python 自带的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import csv</span><br></pre></td></tr></table></figure>\n<p>要想用 csv 模块读取 csv 文件数据，需要先创建一个 Reader 对象，Reader 可以遍历文件的每一行。</p>\n<p><strong>注意：Reader 对象只能循环遍历一次，如果想要再次遍历，需要重新创建。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file &#x3D; open(&quot;haha.csv&quot;)</span><br><span class=\"line\">reader &#x3D; csv.reader(file)</span><br><span class=\"line\">data &#x3D; list(reader)</span><br><span class=\"line\">print(data)</span><br></pre></td></tr></table></figure>\n<p>以下为在交互式界面操作。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762140-c867ae00-9030-11eb-9532-6a095423bf3c.png\" alt=\"image\"></p>\n<p>使用 Reader 对象遍历数据，Reader.line_num 标志当前遍历到第几行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import csv</span><br><span class=\"line\">file &#x3D; open(&quot;haha.csv&quot;)</span><br><span class=\"line\">reader &#x3D; csv.reader(file)</span><br><span class=\"line\">for row in reader:</span><br><span class=\"line\">    print((&quot;第&#123;&#125;行  &quot; + str(row)).format(reader.line_num))</span><br></pre></td></tr></table></figure>\n<p><strong>3. 写入</strong></p>\n<p>将数据写入到 CSV 文件，需要用到 Writer 对象。</p>\n<p>与读取一样，先导入 csv 模块，然后打开文件。</p>\n<p><strong>encoding 是编码；newline 等于空字符，若不设置，在 Windows 系统上，行距会变成下图所示。</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762172-e503e600-9030-11eb-90f8-266b1ecbf2ba.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import csv</span><br><span class=\"line\">file &#x3D; open(&#39;haha.csv&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;, newline&#x3D;&#39;&#39;)</span><br></pre></td></tr></table></figure>\n<p>创建 Writer 对象，csv.writer () 有两个参数需要注意。</p>\n<p>delimiter： 单元格分隔符，默认为逗号，可以修改为其他。</p>\n<p>lineterminator：行终止符，默认为换行符，可以自行修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writer &#x3D; csv.writer(file)</span><br></pre></td></tr></table></figure>\n<p>写入数据，使用 writer.writerow（），该函数接受一个列表，返回写入该行的字符数（包括换行符）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writer.writerow([&#39;haha&#39;, &#39;18&#39;, &#39;10.0&#39;])</span><br><span class=\"line\">writer.writerow([&#39;jiji&#39;, &#39;16&#39;, &#39;12.1&#39;])</span><br><span class=\"line\">writer.writerow([&#39;lala&#39;, &#39;17&#39;, &#39;11.9&#39;])</span><br><span class=\"line\">writer.writerow([&#39;papa&#39;, &#39;11&#39;, &#39;13.3&#39;])</span><br></pre></td></tr></table></figure>\n<p>写入完整源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import csv</span><br><span class=\"line\">file &#x3D; open(&#39;haha.csv&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class=\"line\">writer &#x3D; csv.writer(file)</span><br><span class=\"line\">writer.writerow([&#39;haha&#39;, &#39;18&#39;, &#39;10.0&#39;])</span><br><span class=\"line\">writer.writerow([&#39;jiji&#39;, &#39;16&#39;, &#39;12.1&#39;])</span><br><span class=\"line\">writer.writerow([&#39;lala&#39;, &#39;17&#39;, &#39;11.9&#39;])</span><br><span class=\"line\">writer.writerow([&#39;papa&#39;, &#39;11&#39;, &#39;13.3&#39;])</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"原创不易点个赞再走吧\"><a class=\"markdownIt-Anchor\" href=\"#原创不易点个赞再走吧\">#</a> 原创不易，点个赞再走吧。</h2>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%E5%A4%84%E7%90%86JSON%E6%96%87%E4%BB%B6/",
            "url": "https://blog.wuhen.one/2021/05/08/%E8%AE%A9%E7%B9%81%E7%90%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96%E2%80%94%E2%80%94python%E5%A4%84%E7%90%86JSON%E6%96%87%E4%BB%B6/",
            "title": "让繁琐的工作自动化——python处理JSON文件",
            "date_published": "2021-05-07T19:50:11.588Z",
            "content_html": "<h2 id=\"让繁琐的工作自动化python处理json文件\"><a class=\"markdownIt-Anchor\" href=\"#让繁琐的工作自动化python处理json文件\">#</a> 让繁琐的工作自动化 ——python 处理 JSON 文件</h2>\n<p>不得不说，python 真 TMD 香。由于 python 解析 json 过于简洁，我只好写个实例了，不然文章太短。</p>\n<hr>\n<p><strong>1. 环境</strong></p>\n<blockquote>\n<p>1.python3.8</p>\n<p>2.pycharm 2020.1</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 读取 JSON 数据</strong></p>\n<p>当然首先要导入 json 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br></pre></td></tr></table></figure>\n<p>读取 json 数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data &#x3D; &#39;&#123;&quot;a&quot;:123,&quot;b&quot;:&quot;lala&quot;&#125;&#39;</span><br><span class=\"line\">result &#x3D; json.loads(data)</span><br><span class=\"line\">print(result)</span><br><span class=\"line\">print(result[&#39;a&#39;])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>交互式界面</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762217-18df0b80-9031-11eb-9e35-4f17627d66e8.png\" alt=\"image\"></p>\n<p><strong>3. 写出 JSON 数据</strong></p>\n<p>导入模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br></pre></td></tr></table></figure>\n<p>输出 json 数据，将 python 字典转为 json 数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data &#x3D; &#123;&#39;a&#39;:1234,&#39;b&#39;:&#39;lalala&#39;&#125;</span><br><span class=\"line\">result &#x3D; json.dumps(data)</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762229-20061980-9031-11eb-94fc-64eabfd6889a.png\" alt=\"image\"></p>\n<h2 id=\"实例抓取中国地震台网数据解析json数据包\"><a class=\"markdownIt-Anchor\" href=\"#实例抓取中国地震台网数据解析json数据包\">#</a> 实例，抓取中国地震台网数据，解析 JSON 数据包。</h2>\n<p><strong>完整源码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">res &#x3D; requests.get(&#39;http:&#x2F;&#x2F;news.ceic.ac.cn&#x2F;ajax&#x2F;google&#39;)</span><br><span class=\"line\">text &#x3D; res.text.encode(&#39;utf-8&#39;)</span><br><span class=\"line\">result &#x3D; json.loads(text)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#39;%-20s&#39; % &#39;id&#39; &#39;%-20s&#39; % &#39;地点&#39; &#39;%-20s&#39; % &#39;震级&#39; &#39;%-20s&#39; % &#39;经度&#39; &#39;%-20s&#39; % &#39;纬度&#39; &#39;%-20s&#39; % &#39;深度&#39; &#39;%-20s&#39; % &#39;时间&#39;)</span><br><span class=\"line\">for e in result:</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&#39;%-20s&#39; % str(e[&#39;id&#39;]), &#39;%-20s&#39; % str(e[&#39;LOCATION_C&#39;]), &#39;%-20s&#39; % str(e[&#39;M&#39;]), &#39;%-20s&#39; % str(e[&#39;EPI_LON&#39;]), &#39;%-20s&#39; % str(e[&#39;EPI_LAT&#39;]), &#39;%-20s&#39; % str(e[&#39;EPI_DEPTH&#39;]), &#39;%-20s&#39; % str(e[&#39;O_TIME&#39;]))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>排版有点烂，各位大爷多多包涵。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762239-2c8a7200-9031-11eb-80bb-661790cab334.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112762241-30b68f80-9031-11eb-9a31-06ebbd75da8c.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/C#%E8%AF%BB%E5%86%99json%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94Newtonsoft/",
            "url": "https://blog.wuhen.one/2021/05/08/C#%E8%AF%BB%E5%86%99json%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94Newtonsoft/",
            "title": "C# 读写json文件",
            "date_published": "2021-05-07T19:50:11.578Z",
            "content_html": "<h2 id=\"c-读写json文件\"><a class=\"markdownIt-Anchor\" href=\"#c-读写json文件\">#</a> C# 读写 json 文件</h2>\n<p>实验环境：VS2017（宇宙最最屌 IDE）</p>\n<p><strong>1. 安装 Newtonsoft.Json</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115116802-2f440b80-9fce-11eb-8ba2-f018cbc7c933.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在控制台输入，回车。</span><br><span class=\"line\">Install-Package Newtonsoft.Json</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115116818-41be4500-9fce-11eb-9def-fe2cf1374bbf.png\" alt=\"image\"></p>\n<p>然后在所需的项目添加引用。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115116824-4daa0700-9fce-11eb-9c0f-328ba748522d.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/115116830-539fe800-9fce-11eb-9506-8fd3e31cbe8e.png\" alt=\"image\"></p>\n<p>找到安装目录选择相应版本。</p>\n<span id=\"more\"></span>\n<p><strong>2. 新建一个 config.json 文件。(名字各位大爷随意)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;server&quot;: &quot;.&quot;,</span><br><span class=\"line\">  &quot;user&quot;: &quot;sa&quot;,</span><br><span class=\"line\">  &quot;passwd&quot;: &quot;n123456&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.Read</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Linq;</span><br><span class=\"line\">using System.Text;</span><br><span class=\"line\">using System.Threading.Tasks;</span><br><span class=\"line\">using System.Configuration;</span><br><span class=\"line\">&#x2F;&#x2F;记得引用这几个玩意</span><br><span class=\"line\">using Newtonsoft.Json;</span><br><span class=\"line\">using Newtonsoft.Json.Linq;</span><br><span class=\"line\">using System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace 操作json与xml</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class ReadJson</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public static string Get_server()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \ttry</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            \tStreamReader reader &#x3D; File.OpenText(&quot;config.json&quot;);</span><br><span class=\"line\">            \tJsonTextReader jsonTextReader &#x3D; new JsonTextReader(reader);</span><br><span class=\"line\">           \t \tJObject jsonObject &#x3D; (JObject)JToken.ReadFrom(jsonTextReader);</span><br><span class=\"line\">            \tstring server &#x3D; jsonObject[&quot;server&quot;].ToString(); &#x2F;&#x2F;user ,passwd 类似</span><br><span class=\"line\">            \treader.Close();</span><br><span class=\"line\">            \treturn server;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            \t&#x2F;&#x2F;自己加点</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>4.Write</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void Set_server(string server)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">       \ttry</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">           \tStreamReader reader &#x3D; File.OpenText(&quot;config.json&quot;);</span><br><span class=\"line\">           \tJsonTextReader jsonTextReader &#x3D; new JsonTextReader(reader);</span><br><span class=\"line\">          \t \tJObject jsonObject &#x3D; (JObject)JToken.ReadFrom(jsonTextReader);</span><br><span class=\"line\">           \tjsonObject[&quot;server&quot;] &#x3D; server; &#x2F;&#x2F;user ,passwd 类似</span><br><span class=\"line\">           \treader.Close();</span><br><span class=\"line\">           \tstring output &#x3D; Newtonsoft.Json.JsonConvert.SerializeObject(jsonObject, Newtonsoft.Json.Formatting.Indented);</span><br><span class=\"line\">               File.WriteAllText(&quot;config.json&quot;, output);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           catch</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">           \t&#x2F;&#x2F;自己加点</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "C#"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E9%87%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E3%80%81%E5%A0%86%E3%80%81%E6%A0%88/",
            "url": "https://blog.wuhen.one/2021/05/08/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E9%87%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E3%80%81%E5%A0%86%E3%80%81%E6%A0%88/",
            "title": "C语言程序里全局变量、局部变量、堆、栈",
            "date_published": "2021-05-07T19:50:11.578Z",
            "content_html": "<h2 id=\"c语言程序里全局变量-局部变量-堆-栈\"><a class=\"markdownIt-Anchor\" href=\"#c语言程序里全局变量-局部变量-堆-栈\">#</a> C 语言程序里全局变量、局部变量、堆、栈</h2>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.ubuntu20</p>\n</blockquote>\n<p><strong>全局变量、静态局部变量保存在全局数据区，初始化的和未初始化的分别保存在一起。普通局部变量保存在堆栈中。<br>\n在 C\\C++ 中，通常可以把内存理解为 4 个分区：栈、堆、全局 / 静态存储区和常量存储区</strong></p>\n<blockquote>\n<p>1. 内存栈区 stack： 存放局部变量名；</p>\n<p>2. 内存堆区 heap： 存放 new 或者 malloc 出来的对象；</p>\n<p>3.Text &amp; Data &amp; Bss：代码段与静态分配</p>\n<p>4.BSS 区（未初始化数据段）：并不给该段的数据分配空间，仅仅是记录了数据所需空间的大小。</p>\n<p>5.DATA（初始化的数据段）：为数据分配空间，数据保存在目标文件中。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 源码</strong></p>\n<p>haha.c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">void before()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">char g_buf[16];</span><br><span class=\"line\">char g_buf2[16];</span><br><span class=\"line\">char g_buf3[16];</span><br><span class=\"line\">char g_buf4[16];</span><br><span class=\"line\">char g_i_buf[]&#x3D;&quot;123&quot;;</span><br><span class=\"line\">char g_i_buf2[]&#x3D;&quot;123&quot;;</span><br><span class=\"line\">char g_i_buf3[]&#x3D;&quot;123&quot;;</span><br><span class=\"line\">void after()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(int argc, char **argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        char l_buf[16];</span><br><span class=\"line\">        char l_buf2[16];</span><br><span class=\"line\">        char l_buf3[16];</span><br><span class=\"line\">        static char s_buf[16];</span><br><span class=\"line\">        static char s_buf2[16];</span><br><span class=\"line\">        static char s_buf3[16];</span><br><span class=\"line\">        char *p_buf;</span><br><span class=\"line\">        char *p_buf2;</span><br><span class=\"line\">        char *p_buf3;</span><br><span class=\"line\">        </span><br><span class=\"line\">        p_buf &#x3D; (char *)malloc(sizeof(char) * 16);</span><br><span class=\"line\">        p_buf2 &#x3D; (char *)malloc(sizeof(char) * 16);</span><br><span class=\"line\">        p_buf3 &#x3D; (char *)malloc(sizeof(char) * 16);</span><br><span class=\"line\"> </span><br><span class=\"line\">        printf(&quot;g_buf: 0x%x\\n&quot;, g_buf);</span><br><span class=\"line\">        printf(&quot;g_buf2: 0x%x\\n&quot;, g_buf2);</span><br><span class=\"line\">        printf(&quot;g_buf3: 0x%x\\n&quot;, g_buf3);</span><br><span class=\"line\">        printf(&quot;g_buf4: 0x%x\\n&quot;, g_buf4);</span><br><span class=\"line\"> </span><br><span class=\"line\">        printf(&quot;g_i_buf: 0x%x\\n&quot;, g_i_buf);</span><br><span class=\"line\">        printf(&quot;g_i_buf2: 0x%x\\n&quot;, g_i_buf2);</span><br><span class=\"line\">        printf(&quot;g_i_buf3: 0x%x\\n&quot;, g_i_buf3);</span><br><span class=\"line\"> </span><br><span class=\"line\">        printf(&quot;l_buf: 0x%x\\n&quot;, l_buf);</span><br><span class=\"line\">        printf(&quot;l_buf2: 0x%x\\n&quot;, l_buf2);</span><br><span class=\"line\">        printf(&quot;l_buf3: 0x%x\\n&quot;, l_buf3);</span><br><span class=\"line\"> </span><br><span class=\"line\">        printf(&quot;s_buf: 0x%x\\n&quot;, s_buf);</span><br><span class=\"line\">        printf(&quot;s_buf2: 0x%x\\n&quot;, s_buf2);</span><br><span class=\"line\">        printf(&quot;s_buf3: 0x%x\\n&quot;, s_buf3);</span><br><span class=\"line\"> </span><br><span class=\"line\">        printf(&quot;p_buf: 0x%x\\n&quot;, p_buf);</span><br><span class=\"line\">        printf(&quot;p_buf2: 0x%x\\n&quot;, p_buf2);</span><br><span class=\"line\">        printf(&quot;p_buf3: 0x%x\\n&quot;, p_buf3);</span><br><span class=\"line\"> </span><br><span class=\"line\">        printf(&quot;before: 0x%x\\n&quot;, before);</span><br><span class=\"line\">        printf(&quot;after: 0x%x\\n&quot;, after);</span><br><span class=\"line\">        printf(&quot;main: 0x%x\\n&quot;, main);</span><br><span class=\"line\"> </span><br><span class=\"line\">        if (argc &gt; 1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                strcpy(l_buf, argv[1]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>3. 效果</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112803918-6184dc00-90a6-11eb-913e-1ae3d29d7102.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "C"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/linux%E5%88%9D%E8%AF%95gcc%20makefile%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/",
            "url": "https://blog.wuhen.one/2021/05/08/linux%E5%88%9D%E8%AF%95gcc%20makefile%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B/",
            "title": "linux初试gcc makefile菜鸟教程",
            "date_published": "2021-05-07T19:50:11.578Z",
            "content_html": "<h2 id=\"linux初试gcc-makefile菜鸟教程\"><a class=\"markdownIt-Anchor\" href=\"#linux初试gcc-makefile菜鸟教程\">#</a> linux 初试 gcc makefile 菜鸟教程</h2>\n<hr>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.ubuntu16(<a href=\"https://blog.csdn.net/qq_43938052/article/details/107326122\">安装教程</a>)</p>\n<p>2.gcc<br>\n (gcc 安装：apt install gcc)</p>\n<p>3.make<br>\n (make 安装 apt install make)</p>\n</blockquote>\n<p>用 C 举个小例子</p>\n<span id=\"more\"></span>\n<p><strong>2. 源码</strong></p>\n<p>main.c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*************************************************************************</span><br><span class=\"line\">    &gt; File Name: main.c</span><br><span class=\"line\">    &gt; Author: wuhen</span><br><span class=\"line\">    &gt; Mail: wuhen1090@qq.com</span><br><span class=\"line\">    &gt; Created Time: Fri 25 Sep 2020 09:52:19 PM CST</span><br><span class=\"line\"> ************************************************************************&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int sub(int a,int b);</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        int a;</span><br><span class=\"line\">        int b;</span><br><span class=\"line\">        float c;</span><br><span class=\"line\">        printf(&quot;请敲个数 a&#x3D;&quot;);</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;a);</span><br><span class=\"line\">        printf(&quot;请敲个数 b&#x3D;&quot;);</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;b);</span><br><span class=\"line\">        c &#x3D; sub(a,b);</span><br><span class=\"line\">        printf(&quot;c&#x3D;%.1f\\n&quot;,c);</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>sub.c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;*************************************************************************</span><br><span class=\"line\">    &gt; File Name: sub.c</span><br><span class=\"line\">    &gt; Author: wuhen</span><br><span class=\"line\">    &gt; Mail: wuhen1090@qq.com</span><br><span class=\"line\">    &gt; Created Time: Fri 25 Sep 2020 09:48:26 PM CST</span><br><span class=\"line\"> ************************************************************************&#x2F;</span><br><span class=\"line\">float sub(int a,int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        return a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>编译一下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o out main.c sub.c</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112751751-24ffa480-9002-11eb-80a8-ae4262aeceaf.png\" alt=\"image\"></p>\n<p><strong>Nice，成功了</strong></p>\n<p><strong>3.makefile</strong><br>\n 当做一个大些的工程时，使用刚才的方式就有些恼火，so，我们可以用神器 ——make 来解决它。</p>\n<p>makefile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all:main.o sub.o</span><br><span class=\"line\">        gcc -o all main.o sub.o</span><br><span class=\"line\">main.o:main.c</span><br><span class=\"line\">        gcc -c main.c</span><br><span class=\"line\">sub.o:sub.c</span><br><span class=\"line\">        gcc -c sub.c</span><br><span class=\"line\">clean:</span><br><span class=\"line\">        rm main.o sub.o</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112751762-2f21a300-9002-11eb-8160-4aa943226a6e.png\" alt=\"image\"></p>\n<p>OK，今天的文章就肝到这里。</p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "C"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/ubuntu16.04%20%E4%BF%9D%E5%A7%86%E7%BA%A7%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "url": "https://blog.wuhen.one/2021/05/08/ubuntu16.04%20%E4%BF%9D%E5%A7%86%E7%BA%A7%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "title": "ubuntu16.04安装步骤",
            "date_published": "2021-05-07T19:50:11.578Z",
            "content_html": "<h2 id=\"ubuntu1604安装步骤\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu1604安装步骤\">#</a> <strong>ubuntu16.04 安装步骤</strong></h2>\n<p>过几天要写一个搭建博客的教程，所以准备工作还是要先搞一下。windows 与 linux 的教程应该都会出，但为了更好的性能与稳定度，我还是强烈建议用 linux 环境搭建博客。</p>\n<p><strong>1. 实验环境</strong></p>\n<blockquote>\n<p>1.<a href=\"http://releases.ubuntu.com/16.04.6/ubuntu-16.04.6-server-amd64.iso\">ubuntu16.04 镜像</a></p>\n<p>2.VMware 15.5.6</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 安装步骤</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752354-4ada7880-9005-11eb-9aa3-f98f8fed18de.png\" alt=\"image\"></p>\n<p>创建新的虚拟机</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752362-50d05980-9005-11eb-8b8b-0b889a1ad108.png\" alt=\"image\"></p>\n<p>点击下一步</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752377-5cbc1b80-9005-11eb-8805-fa2412a78a23.png\" alt=\"image\"></p>\n<p>点击下一步</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752391-65145680-9005-11eb-8718-603fa64600a0.png\" alt=\"image\"></p>\n<p>选择稍后安装操作系统，点击下一步。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752409-7198af00-9005-11eb-9079-010aadb7aed5.png\" alt=\"image\"></p>\n<p>选择 linux ubuntu 64 位，点击下一步。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752420-7e1d0780-9005-11eb-99cb-27efc828f64b.png\" alt=\"image\"></p>\n<p>名称与位置各位大爷随意，点击下一步。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752436-8e34e700-9005-11eb-944f-be31380d5ebb.png\" alt=\"image\"></p>\n<p>内核数自己填就好（注意总数不要超过宿主机 CPU 核心数）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752443-98ef7c00-9005-11eb-9053-f8bcf841bb57.png\" alt=\"image\"></p>\n<p>内存按照自己需求配置（这个内存只是设定了该虚拟机最大可使用内存，而不是立马就占用了系统资源）。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752491-ecfa6080-9005-11eb-8b51-1ba07046bff3.png\" alt=\"image\"></p>\n<p>点击下一步</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752493-f388d800-9005-11eb-8299-0e59b57d77e0.png\" alt=\"image\"></p>\n<p>点击下一步</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752505-fdaad680-9005-11eb-908a-514618baec72.png\" alt=\"image\"></p>\n<p>点击下一步</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752517-07343e80-9006-11eb-8598-343d2cfc46f1.png\" alt=\"image\"></p>\n<p>点击下一步</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752529-0f8c7980-9006-11eb-9dcc-32f2d1f5fd37.png\" alt=\"image\"></p>\n<p>点击浏览，选择路径（路径随意）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752535-1ca96880-9006-11eb-966b-c1e0abe89d02.png\" alt=\"image\"></p>\n<p>点击自定义硬件</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752543-24690d00-9006-11eb-8a57-2f39cd232bb3.png\" alt=\"image\"></p>\n<p>选择之前下载的镜像，点击关闭，然后点击完成。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752550-2e8b0b80-9006-11eb-908a-e15e2eb5f4e6.png\" alt=\"image\"></p>\n<p>点击开启虚拟机。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752556-35b21980-9006-11eb-919c-4065d5472e2b.png\" alt=\"image\"></p>\n<p>语言选择 English，回车。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752561-3cd92780-9006-11eb-85f1-f525c9ba98d0.png\" alt=\"image\"></p>\n<p>回车</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752572-45c9f900-9006-11eb-9b97-b34e228955fd.png\" alt=\"image\"></p>\n<p>选择 English，回车。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752580-51b5bb00-9006-11eb-8cc3-cea8cad8284b.png\" alt=\"image\"></p>\n<p>这是要选择国家，先选 other，回车。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752593-5bd7b980-9006-11eb-9755-f089389b7011.png\" alt=\"image\"></p>\n<p>选择 Asia (亚洲)</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752597-62663100-9006-11eb-9435-e7741c7b7f4f.png\" alt=\"image\"></p>\n<p>选择 China (中国)</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752608-6b570280-9006-11eb-867d-60e01042f683.png\" alt=\"image\"></p>\n<p>回车</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752615-75790100-9006-11eb-929d-c71e08fc5a1c.png\" alt=\"image\"></p>\n<p>不检测键盘（用英文键盘就好），回车。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752620-7dd13c00-9006-11eb-89d1-aedfb1e4db93.png\" alt=\"image\"></p>\n<p>回车</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752628-86c20d80-9006-11eb-95c9-0990729f4ed2.png\" alt=\"image\"></p>\n<p>等待</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752634-8e81b200-9006-11eb-9fb5-8fd8889f8c3d.png\" alt=\"image\"></p>\n<p>设置主机名（各位大爷随意）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752650-980b1a00-9006-11eb-8cb3-c4fdabc8b666.png\" alt=\"image\"></p>\n<p>用户名（各位大爷随意）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752662-a6f1cc80-9006-11eb-9ec8-455ba097eefc.png\" alt=\"image\"></p>\n<p>设置账号（各位大爷随意，登录时用）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752666-aeb17100-9006-11eb-88a1-f5f97176dc72.png\" alt=\"image\"></p>\n<p>设置密码（随意，但是一定要记住哦）要输两次</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752676-ba9d3300-9006-11eb-84da-1988fe85cf0c.png\" alt=\"image\"></p>\n<p>是否选择弱密码，选择 yes, 回车。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752683-c4bf3180-9006-11eb-8512-d07da8646670.png\" alt=\"image\"></p>\n<p>等待</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752688-cbe63f80-9006-11eb-8b68-25ad04792a9c.png\" alt=\"image\"></p>\n<p>你的时区是否是重庆，选择 yes。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752691-d3a5e400-9006-11eb-8aff-d6c8a5cd3c7a.png\" alt=\"image\"></p>\n<p>回车就好</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752694-db658880-9006-11eb-8328-cab1d7a89c51.png\" alt=\"image\"></p>\n<p>回车</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752706-e1f40000-9006-11eb-9d21-59468a83211f.png\" alt=\"image\"></p>\n<p>选择 yes</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752715-eb7d6800-9006-11eb-9e1d-684a7b9f7fad.png\" alt=\"image\"></p>\n<p>回车</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752720-f33d0c80-9006-11eb-91b7-081ce15d1d03.png\" alt=\"image\"></p>\n<p>选择 yes</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752728-fa641a80-9006-11eb-9093-6cf229e8ca6a.png\" alt=\"image\"></p>\n<p>等待</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752739-018b2880-9007-11eb-8759-55af4fb11e43.png\" alt=\"image\"></p>\n<p>设置 http 代理，没有就直接回车喽</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752746-0c45bd80-9007-11eb-8469-79437aa6b203.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752751-15cf2580-9007-11eb-8deb-395fd62662a9.png\" alt=\"image\"></p>\n<p>这一步等待时间有点长，（可以点回车试试，能否跳过）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752760-1cf63380-9007-11eb-9dd9-4f76e01ba28d.png\" alt=\"image\"></p>\n<p>选择不自动更新系统</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752763-241d4180-9007-11eb-883c-5fcbb5141e93.png\" alt=\"image\"></p>\n<p>注意：openSSH server 一定要选择（点空格可选中），<br>\nLAMP(linux + apache + mysql + php)，<br>\nVirtual Machine host 不要选，本来就是虚拟机（在虚拟机上搞虚拟肯定有问题噻）。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752773-34cdb780-9007-11eb-8974-23096e4cae8e.png\" alt=\"image\"></p>\n<p>等待</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752787-4adb7800-9007-11eb-8502-2c0fa03ca05d.png\" alt=\"image\"></p>\n<p>设置 mysql root 密码（一定要记住哦）要输两次</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752792-5169ef80-9007-11eb-8f99-75f63ead5766.png\" alt=\"image\"></p>\n<p>回车</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752800-59299400-9007-11eb-849c-ea5e13deb230.png\" alt=\"image\"></p>\n<p>回车</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752810-60e93880-9007-11eb-894a-b8447e42e85e.png\" alt=\"image\"></p>\n<p>装好了。输入用户名，密码登录。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752813-69417380-9007-11eb-9848-6bd0f54d46e1.png\" alt=\"image\"></p>\n<p>注意：在 Linux 上输入密码时，是不回显的（屏幕没啥反应），如果输错了直接回车，重新输就好。</p>\n<p><strong>3. 连接服务器</strong></p>\n<p>由于虚拟机显示的命令行看起来有些恼火，so 我给各位大爷找了个工具 MobaXterm【公众号回复 shell 即可获得】（来源于互联网）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752835-7eb69d80-9007-11eb-8350-f11724fe9822.png\" alt=\"image\"></p>\n<p>点击左上角 session。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752837-85ddab80-9007-11eb-9685-4c1b689ef3d7.png\" alt=\"image\"></p>\n<p>点击 SSH</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752843-8c6c2300-9007-11eb-8006-65d9c2018b1c.png\" alt=\"image\"></p>\n<p>在虚拟机输入命令 ifconfig，查看 ip。我的 ip 为 192.168.190.132</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752847-942bc780-9007-11eb-83b6-2bd1b12551b7.png\" alt=\"image\"></p>\n<p>填写 ip 与用户名，点击 OK。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752852-9aba3f00-9007-11eb-9939-b6b3adb27fc0.png\" alt=\"image\"></p>\n<p>输入密码。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752859-a3127a00-9007-11eb-8b55-6e723d654dbd.png\" alt=\"image\"></p>\n<p>sudo su 切换为 root ($ 是普通用户，# 是 root 用户)</p>\n<p>输入命令 vim /etc/apt/sources.list (换个国内源，提升安装软件的速度)，把原来的删喽或者用 #注释了。</p>\n<p><strong>vim 的简单使用请自行上网查询，谢谢</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main</span><br><span class=\"line\">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main</span><br><span class=\"line\"></span><br><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main</span><br><span class=\"line\">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main</span><br><span class=\"line\"></span><br><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial universe</span><br><span class=\"line\">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial universe</span><br><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates universe</span><br><span class=\"line\">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates universe</span><br><span class=\"line\"></span><br><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main</span><br><span class=\"line\">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main</span><br><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security universe</span><br><span class=\"line\">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security universe</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752876-b32a5980-9007-11eb-9c1c-69b0fa8902b5.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752887-c0dfdf00-9007-11eb-87de-90775281b905.png\" alt=\"image\"></p>\n<p>执行 apt-get update (更新一下)。</p>\n<p>OK，今天的文章就肝到这里。</p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B1%E2%80%94%E2%80%94WordPress/",
            "url": "https://blog.wuhen.one/2021/05/08/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B1%E2%80%94%E2%80%94WordPress/",
            "title": "个人博客搭建保姆级教程1——WordPress",
            "date_published": "2021-05-07T19:50:11.578Z",
            "content_html": "<h2 id=\"个人博客搭建保姆级教程1wordpress\"><a class=\"markdownIt-Anchor\" href=\"#个人博客搭建保姆级教程1wordpress\">#</a> 个人博客搭建保姆级教程 1——WordPress</h2>\n<p>今天用 WordPress 搭建一个个人博客站。废话不说了，开搞。</p>\n<p><em><strong>一、Windows 教程</strong></em></p>\n<p><strong>1. 环境准备</strong></p>\n<blockquote>\n<p>1.<a href=\"https://www.xp.cn/\">phpstudy</a> (一个集成了 PHP MySQL Redis Apache Nginx 等一系列工具的软件，让服务器配置简单化。)</p>\n<p>2.<a href=\"https://github.com/WordPress/WordPress\">WordPress</a> (由于是开源项目，我们直接 clone 就好。)</p>\n</blockquote>\n<p>phpstudy 安装，一路下一步就好。<br>\nWord Press 下载，如果装了 git，直接输入以下命令就好。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone  https:&#x2F;&#x2F;github.com&#x2F;WordPress&#x2F;WordPress.git</span><br></pre></td></tr></table></figure>\n<p>没有 git，那就打开网站（<a href=\"https://github.com/WordPress/WordPress%EF%BC%89\">https://github.com/WordPress/WordPress）</a></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758340-728b0a00-9020-11eb-8b47-a29bd20749dd.png\" alt=\"image\"></p>\n<p>点击冒绿光的 Code，然后点击 Download ZIP，然后解压得到源码。</p>\n<span id=\"more\"></span>\n<p><strong>2. 搭建环境</strong></p>\n<p>打开 phpstudy</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758346-7d459f00-9020-11eb-9d99-ca20dec648c7.png\" alt=\"image\"></p>\n<p>开启 apache</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758356-89c9f780-9020-11eb-8e03-c98cd6f0c024.png\" alt=\"image\"></p>\n<p><strong>注意：如果出现端口被占用，解决方案：1.netstat -ano （cmd 执行，找到占用端口进程的 PID，打开任务管理器，点击结束，之后启动 apache)</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758374-a403d580-9020-11eb-8cf4-21bf011e40c0.png\" alt=\"image\"></p>\n<p>创建网站：</p>\n<p><strong>域名：</strong> （<a href=\"http://wordpress.myblog.com\">wordpress.myblog.com</a>）（这玩意自己编一个，外网无法访问哦 (当然通过某些骚操作也可以)，如果要用外网访问，需要公网 ip，改天出个购买服务器与域名的文章）</p>\n<p><strong>端口：</strong> 默认 80，如果改了其他端口，在浏览器访问时需要加端口号。ex：<a href=\"http://wordpress.myblog.com\">http://wordpress.myblog.com</a>：10000</p>\n<p><strong>根目录：</strong> 随意，我用默认的。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758379-b2ea8800-9020-11eb-8cf9-06f707938831.png\" alt=\"image\"></p>\n<p>访问一下，成功了。（如果没有出来，刷新一下呦）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758384-bd0c8680-9020-11eb-89cf-9f9b8491d8df.png\" alt=\"image\"></p>\n<p>安装部署 wordpress，将下载的源码解压，移动到网站的根目录。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758392-c5fd5800-9020-11eb-98b3-161cfb61b17d.png\" alt=\"image\"></p>\n<p>在浏览器打开 <a href=\"http://wordpress.myblog.com/wp-admin/setup-config.php\">http://wordpress.myblog.com/wp-admin/setup-config.php</a> (把域名换成自己的)</p>\n<p>点击 let’s go</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758405-d6153780-9020-11eb-9bf7-93415fa906bd.png\" alt=\"image\"></p>\n<p>数据库名：WPmyblog（随意，稍后得去创建，要与后面创建数据库一致）</p>\n<p>数据库用户名：wuhen（随意，要与后面创建数据库一致）</p>\n<p>密码：123456（自己填，要与后面创建数据库一致）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758415-e0373600-9020-11eb-9e69-d6eeb28625fc.png\" alt=\"image\"></p>\n<p>先去安装，启动 mysql，创建对应数据库。phpstudy 集成了 mysql，直接安装就好。我这装了 mysql8.0.12。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758424-e9c09e00-9020-11eb-9416-c72b8865304d.png\" alt=\"image\"></p>\n<p>创建数据库，要与前面表格填写的一致。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758429-f3e29c80-9020-11eb-948f-6a5bc42b6d27.png\" alt=\"image\"></p>\n<p>点击 submit, 看到此页面。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758439-fcd36e00-9020-11eb-81dc-ebe166c24e5d.png\" alt=\"image\"></p>\n<p>点击 Run…，等待。填写好信息，点击 Install</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758445-05c43f80-9021-11eb-92cd-cf6ec171ce55.png\" alt=\"image\"></p>\n<p>成功了！！！恭喜</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758453-0d83e400-9021-11eb-8a4e-c88fd828978c.png\" alt=\"image\"></p>\n<p>点击 Log in</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758458-15438880-9021-11eb-8b6f-32b324719cea.png\" alt=\"image\"></p>\n<p>成功进入。在这你可以将语言更改为中文，也可以更改主题，自己去尽情地探索吧，奥里给。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758469-22f90e00-9021-11eb-8997-ab0281ae7f0c.png\" alt=\"image\"></p>\n<p><em><strong>二、Linux 教程</strong></em></p>\n<p><strong>1. 环境准备</strong></p>\n<blockquote>\n<p>1.<a href=\"https://blog.csdn.net/qq_43938052/article/details/107326122\">ubuntu16.04</a> (看我博客有教程)</p>\n<p>2.LAMP 环境，装系统时默认装了。</p>\n</blockquote>\n<p><strong>2. 环境搭建</strong></p>\n<p>执行命令，切换为 root</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758491-4ae87180-9021-11eb-94a2-de20edef3832.png\" alt=\"image\"></p>\n<p>执行命令，查看下 ip，我的 ip 是 192.168.190.132</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758500-576cca00-9021-11eb-9cb1-9b2db7bd8930.png\" alt=\"image\"></p>\n<p>在浏览器访问 192.168.190.132，可以看到默认页面，根目录在 /var/www/html/，该页面是 index.html 提供的。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758514-65bae600-9021-11eb-83c7-38b23c17ce85.png\" alt=\"image\"></p>\n<p>执行命令，切换目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;var&#x2F;www&#x2F;html</span><br></pre></td></tr></table></figure>\n<p>然后执行命令，将 WordPress clone 下来。由于某种原因，clone 有些慢。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;WordPress&#x2F;WordPress.git</span><br></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://192.168.190.132/WordPress/wp-admin/install.php\">http://192.168.190.132/WordPress/wp-admin/install.php</a> ，接下来的操作与 windows 相似，重点说下创建数据库。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758527-7ff4c400-9021-11eb-8ba5-95dbd8fbec94.png\" alt=\"image\"></p>\n<p>创建数据库，执行命令，输入 MySQL 密码，然后连接。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758534-8c791c80-9021-11eb-9e29-e664df852edd.png\" alt=\"image\"></p>\n<p>执行命令，创建数据库（数据库名随意，与安装时填一致就好，数据库默认 root，密码是安装<a href=\"https://blog.csdn.net/qq_43938052/article/details/107326122\"> Ubuntu16.04</a> 时你自己设的）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database WPmyblog;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758550-9bf86580-9021-11eb-8f74-9cd8f2002db5.png\" alt=\"image\"></p>\n<p>输入命令，查看是否成功。成功后输入 exit 退出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show databases;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758562-a9adeb00-9021-11eb-9d99-a311786f9549.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758567-b2062600-9021-11eb-8f65-7de6bae2bfdd.png\" alt=\"image\"></p>\n<p>好啦，WordPress 的教程到此为止，希望可以帮到大家。</p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "博客搭建"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B2%E2%80%94%E2%80%94halo/",
            "url": "https://blog.wuhen.one/2021/05/08/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B2%E2%80%94%E2%80%94halo/",
            "title": "个人博客搭建保姆级教程2——halo",
            "date_published": "2021-05-07T19:50:11.578Z",
            "content_html": "<h2 id=\"个人博客搭建保姆级教程2halo\"><a class=\"markdownIt-Anchor\" href=\"#个人博客搭建保姆级教程2halo\">#</a> 个人博客搭建保姆级教程 2——halo</h2>\n<p>halo：java 开发的一个优秀的开源博客应用。需要 jdk 环境，与 tomcat。废话不说了，直接开搞。</p>\n<p><strong>Linux 部署</strong></p>\n<p><strong>1. 环境准备</strong></p>\n<blockquote>\n<p>1.<a href=\"https://blog.csdn.net/qq_43938052/article/details/107326122\">ubuntu16.04</a></p>\n<p>2.<a href=\"https://us.mirrors.quenda.co/apache/tomcat/tomcat-8/v8.5.57/bin/apache-tomcat-8.5.57.tar.gz\">tomcat8.5.57</a></p>\n<p>3.JDK8</p>\n<p>4.<a href=\"https://github.com/halo-dev/halo/releases/download/v1.3.2/halo-1.3.2.jar\">halo1.3.2 (jar 包)</a></p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 安装 JDK8</strong></p>\n<p>执行命令，输入密码，切换 root 权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758871-09f15c80-9023-11eb-918a-6504938fd2a0.png\" alt=\"image\"></p>\n<p>执行命令，安装 JDK8，需要等待一会。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758880-14135b00-9023-11eb-9572-075db14eea03.png\" alt=\"image\"></p>\n<p>执行命令，查看 JDK 是否安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758885-1bd2ff80-9023-11eb-9888-5fbea3e040cc.png\" alt=\"image\"></p>\n<p><strong>3. 安装 tomcat</strong></p>\n<p>执行以下命令，切换目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758894-27bec180-9023-11eb-90e3-c4adca794603.png\" alt=\"image\"></p>\n<p>执行命令，创建 tomcat 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir tomcat</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758908-3311ed00-9023-11eb-9148-09a731903e05.png\" alt=\"image\"></p>\n<p>执行命令，切换到 tomcat 路径下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd tomcat</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758913-3b6a2800-9023-11eb-813b-1409e6395394.png\" alt=\"image\"></p>\n<p>执行命令，下载 tomcat</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;us.mirrors.quenda.co&#x2F;apache&#x2F;tomcat&#x2F;tomcat-8&#x2F;v8.5.57&#x2F;bin&#x2F;apache-tomcat-8.5.57.tar.gz</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758924-4c1a9e00-9023-11eb-962b-11cde63befea.png\" alt=\"image\"></p>\n<p>执行命令，解压 tomcat</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvzf apache-tomcat-8.5.57.tar.gz</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758927-550b6f80-9023-11eb-963d-73143906acb5.png\" alt=\"image\"></p>\n<p><strong>4. 安装 halo</strong></p>\n<p>执行命令，切换目录到 webapps</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd apache-tomcat-8.5.57&#x2F;webapps&#x2F;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758956-72d8d480-9023-11eb-96a1-07eec55d1a1b.png\" alt=\"image\"></p>\n<p>执行命令，下载<a href=\"https://github.com/halo-dev/halo/releases/download/v1.3.2/halo-1.3.2.jar\"> halo1.3.2</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;github.com&#x2F;halo-dev&#x2F;halo&#x2F;releases&#x2F;download&#x2F;v1.3.2&#x2F;halo-1.3.2.jar -O halo-latest.jar</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758967-83894a80-9023-11eb-9bdc-af5327463d89.png\" alt=\"image\"></p>\n<p><strong>5. 运行 halo</strong></p>\n<p>执行命令，启动 tomcat。(只要执行 startup.sh 就好，方法随意)，成功如下图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-8.5.57&#x2F;bin&#x2F;startup.sh</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758971-8c7a1c00-9023-11eb-838d-b5d4dc943f89.png\" alt=\"image\"></p>\n<p>执行 halo-latest.jar (一定要把路径切换到 webapps，否则会找不到 jar 包)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar halo-latest.jar</span><br></pre></td></tr></table></figure>\n<p>开始启动了。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758980-956aed80-9023-11eb-915a-fcb669031abc.png\" alt=\"image\"></p>\n<p>启动成功，打开浏览器访 http://192.168.190.132:8090（ip 换成你自己的，服务器都连到了，应该不会不知道 IP 吧）端口是 8090，不要搞忘了。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758989-a3207300-9023-11eb-89b5-12d883b7696b.png\" alt=\"image\"></p>\n<p>填写信息</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112758994-aa478100-9023-11eb-837c-e46c3bd52e7f.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759000-b29fbc00-9023-11eb-8d49-409486795d27.png\" alt=\"image\"></p>\n<p>安装</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759009-b9c6ca00-9023-11eb-903d-7569c4785d5d.png\" alt=\"image\"></p>\n<p>登录</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759018-c0edd800-9023-11eb-85cd-f5a41079d87e.png\" alt=\"image\"></p>\n<p>成功了，nice，释放你的激情，尽情地探索吧！！！（可以换主题啥的，自己去玩吧）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759039-d6630200-9023-11eb-835c-fa03672c53a1.png\" alt=\"image\"></p>\n<p><strong>windows 部署</strong></p>\n<p><strong>1. 环境准备</strong></p>\n<blockquote>\n<p>1.<a href=\"https://mirrors.sonic.net/apache/tomcat/tomcat-8/v8.5.57/bin/apache-tomcat-8.5.57-windows-x64.zip\">tomcat-8.5.57</a></p>\n<p>2.JDK8 (这个网上一搜就有了，我就不写了)</p>\n<p>3.<a href=\"https://github.com/halo-dev/halo/releases/download/v1.3.2/halo-1.3.2.jar\">halo-1.3.2</a></p>\n</blockquote>\n<p><strong>2.tomcat</strong></p>\n<p>下载（<a href=\"https://mirrors.sonic.net/apache/tomcat/tomcat-8/v8.5.57/bin/apache-tomcat-8.5.57-windows-x64.zip%EF%BC%89%EF%BC%8C%E8%A7%A3%E5%8E%8B%EF%BC%8COK%E3%80%82\">https://mirrors.sonic.net/apache/tomcat/tomcat-8/v8.5.57/bin/apache-tomcat-8.5.57-windows-x64.zip），解压，OK。</a></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759076-f4306700-9023-11eb-8095-478e7fb1fb1e.png\" alt=\"image\"></p>\n<p><strong>3.halo</strong></p>\n<p>下载（<a href=\"https://github.com/halo-dev/halo/releases/download/v1.3.2/halo-1.3.2.jar%EF%BC%89%EF%BC%8C%E6%94%BE%E5%88%B0tomcat\">https://github.com/halo-dev/halo/releases/download/v1.3.2/halo-1.3.2.jar），放到 tomcat</a> 下的 webapps 目录。</p>\n<p><strong>4. 运行</strong></p>\n<p>启动 tomcat，双击 bin 目录下 startup.bat</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759109-188c4380-9024-11eb-912b-09bf363b005f.png\" alt=\"image\"></p>\n<p>启动 halo，（cmd 或 power shell 执行下面命令），其实双击下载的 jar 包也可以，只是看不到日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar (jar包路径)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>访问 http://127.0.0.1:8090/    成功了。后面的操作请参考 Linux 部署教程。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759117-25109c00-9024-11eb-951b-2efbc65ec047.png\" alt=\"image\"></p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "博客搭建"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B3%E2%80%94%E2%80%94hexo/",
            "url": "https://blog.wuhen.one/2021/05/08/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B3%E2%80%94%E2%80%94hexo/",
            "title": "个人博客搭建保姆级教程3——hexo",
            "date_published": "2021-05-07T19:50:11.578Z",
            "content_html": "<h2 id=\"个人博客搭建保姆级教程3hexo\"><a class=\"markdownIt-Anchor\" href=\"#个人博客搭建保姆级教程3hexo\">#</a> 个人博客搭建保姆级教程 3——hexo</h2>\n<p>About :A fast, simple &amp; powerful blog framework, powered by Node.js.(官网介绍)<br>\n 今天的目标是：白嫖！白嫖！<br>\n白嫖服务器！！白嫖域名！！</p>\n<p><strong>Linux 部署</strong></p>\n<p><strong>1. 环境部署</strong></p>\n<blockquote>\n<p>1.<a href=\"https://blog.csdn.net/qq_43938052/article/details/107326122\">ubuntu16.04</a></p>\n<p>2.<a href=\"https://nodejs.org/dist/v12.18.2/node-v12.18.2-linux-x64.tar.xz\">node.js-12.18.2</a></p>\n<p>3.hexo</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 安装 node.js</strong></p>\n<p>执行命令，切换目录，创建文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local</span><br><span class=\"line\">mkdir node</span><br><span class=\"line\">cd node</span><br></pre></td></tr></table></figure>\n<p>下载（<a href=\"https://nodejs.org/dist/v12.18.2/node-v12.18.2-linux-x64.tar.xz%EF%BC%89\">https://nodejs.org/dist/v12.18.2/node-v12.18.2-linux-x64.tar.xz）</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v12.18.2&#x2F;node-v12.18.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<p>解压</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xJvf node-v12.18.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<p>配置，修改～/.bash_profile 文件，加入以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Nodejs</span><br><span class=\"line\">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;node&#x2F;node-v12.16.3-linux-x64&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759195-8a648d00-9024-11eb-8ff0-3d3abf3dc3ce.png\" alt=\"image\"></p>\n<p>更新环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>\n<p>检验</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759201-93555e80-9024-11eb-9293-cc7cae714686.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759210-99e3d600-9024-11eb-95f8-eee4eb64d010.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm version</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759221-a1a37a80-9024-11eb-92ee-fa59a28ca34f.png\" alt=\"image\"></p>\n<p>成功了</p>\n<p><strong>3. 安装 hexo</strong></p>\n<p><strong>在下述步骤中，若出现已经安装了 node 和 hexo，但是使用时出现找不到命令，请执行 source ~/.bash_profile，刷新。</strong></p>\n<p><strong>注意，所有的安装过程都在 blog 文件夹里搞，如果出了什么问题，你可以直接干掉 blog 目录，重新创建一个。</strong></p>\n<p>创建个博客目录，切换到该目录下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~&#x2F;blog</span><br><span class=\"line\">cd  ~&#x2F;blog</span><br></pre></td></tr></table></figure>\n<p>NPM 下载速度不太友好，执行命令，安装 CNPM。淘宝有个 NPM 的镜像源 CNPM，速度可以。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>查看一下是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759232-b122c380-9024-11eb-9e9f-09a2f5c68075.png\" alt=\"image\"></p>\n<p>安装 hexo-cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759244-bbdd5880-9024-11eb-8c16-be60b634e7a4.png\" alt=\"image\"></p>\n<p>执行命令，检查一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759280-dc0d1780-9024-11eb-8866-d0b6f2ecd308.png\" alt=\"image\"></p>\n<p>安装 hexo-server (随着 Hexo 3 的发布，服务器已与主模块分离。要开始使用服务器，您首先必须安装 hexo-server。)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install hexo-server --save</span><br></pre></td></tr></table></figure>\n<p>初始化一个博客，在建好的 blog 文件夹下。ls 查看会出现以下文件。执行 hexo init 后一定要执行 cnpm install。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\">cnpm install</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759294-e7604300-9024-11eb-9b8e-f4e63c67bcee.png\" alt=\"image\"></p>\n<p>启动 hexo 服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759302-f0511480-9024-11eb-82fc-7cbd5e83abc3.png\" alt=\"image\"></p>\n<p>打开浏览器，访问 http://(服务器 ip):4000</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759309-f7782280-9024-11eb-9ca1-b97054c6e23f.png\" alt=\"image\"></p>\n<p>新建一个博客，hexo 会建一个 markdown 文件（在 source/_post/ 目录下）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;博客标题&quot;</span><br></pre></td></tr></table></figure>\n<p>将博客内容搞进去 (为了演示，这里我将以前写的博客搞了进去)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim source&#x2F;_post&#x2F;博客标题.md</span><br></pre></td></tr></table></figure>\n<p>执行命令，生成静态文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n<p>启动服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759318-065ed500-9025-11eb-9d07-c144513ed3f7.png\" alt=\"image\"></p>\n<p>成功！！！！</p>\n<p><strong>4. 更换主题</strong></p>\n<p>如果不喜欢默认主题，可以自己换一个，网上有很多主题，下面我来演示以下。<br>\n<a href=\"https://hexo.io/themes/\">主题官网</a>自己上去找自己喜欢的。<br>\n<img src=\"https://user-images.githubusercontent.com/48900845/112759335-1676b480-9025-11eb-94f1-7cf0de434a26.png\" alt=\"image\"></p>\n<p>我以 Tranquilpeak 举例（不同主题可能安装有所不同，自行参照教程）<br>\nhexo 主题都是在 themes 目录下，配置文件在_config.yml 里，有个 theme。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd themes</span><br></pre></td></tr></table></figure>\n<p>landscape 为默认主题</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759347-29898480-9025-11eb-81ad-a4368583cf0c.png\" alt=\"image\"></p>\n<p><a href=\"https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak.git\">下载 tranquilpeak 主题</a> 请将目录 cd 到 themes</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;LouisBarranqueiro&#x2F;hexo-theme-tranquilpeak.git tranquilpeak</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>修改配置文件（blog 下_config.yml）theme 修改为 tranquilpeak</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ..&#x2F;_config.yml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759359-36a67380-9025-11eb-8f7a-339abbc90ed0.png\" alt=\"image\"></p>\n<p>执行命令 (一定要在 tranquilpeak 文件夹)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd tranquilpeak</span><br><span class=\"line\">cnpm install &amp;&amp; cnpm run prod</span><br></pre></td></tr></table></figure>\n<p>等待</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759365-41f99f00-9025-11eb-9e34-6c511fef0517.png\" alt=\"image\"></p>\n<p>启动服务 (如果你在 tranquilpeak 目录无法启动服务，<br>\n请执行 cd 命令回到上一级目录，再执行。)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>访问，这个主题蛮好看。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759385-550c6f00-9025-11eb-9e0d-123534069018.png\" alt=\"image\"></p>\n<p><strong>5. 白嫖 github 服务器及域名</strong></p>\n<p>你需要有个 GitHub 的账号，自己去搞一个。</p>\n<p>Create a new repository，repository name 必须是 <strong>（<a href=\"http://xn--eqr924avxo.github.io\">用户名.github.io</a>）</strong>  选不选 public 自己随意。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759405-68b7d580-9025-11eb-9d91-784677602573.png\" alt=\"image\"></p>\n<p>点击 create (下面冒绿光的)</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759407-6fdee380-9025-11eb-89df-82d4b32bed6c.png\" alt=\"image\"></p>\n<p>仓库已建好。<br>\n执行命令，安装工具 hexo-deployer-git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm insatll --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759419-78371e80-9025-11eb-8282-3db6b3625eae.png\" alt=\"image\"></p>\n<p>配置 blog 目录下的_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim _config.yml</span><br></pre></td></tr></table></figure>\n<p>在# Deployment 下加入以下内容，repo 填自己仓库的地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;ndb000901&#x2F;ndb000901.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759429-8422e080-9025-11eb-91d4-090b0eeb117e.png\" alt=\"image\"></p>\n<p>执行命令，把博客推送到 github 仓库。这时可能会出现以下报错，解决方案：<a href=\"https://blog.csdn.net/qq_43938052/article/details/106485840\">初学 git 安装与配置 windows 版</a>，配置一下 git， 在你 git 上面增加 SSH key 就可（生成的 key 在～/.ssh/id_rsa.pub）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759446-94d35680-9025-11eb-9b18-e15ed4f5b968.png\" alt=\"image\"></p>\n<p>配置好 git 后执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>刷新仓库，多了些东东</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759456-a4529f80-9025-11eb-985c-af7df83c48d7.png\" alt=\"image\"></p>\n<p>访问 https://(用户名).github.io/</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759475-b8969c80-9025-11eb-8fde-e7b34a9107de.png\" alt=\"image\"></p>\n<p>OK，白嫖服务器与域名结束了。放开手脚去打造属于你的 hexo 吧。</p>\n<p><strong>Windows 部署</strong></p>\n<p><strong>1. 安装 node.js</strong></p>\n<p><a href=\"https://nodejs.org/dist/v12.18.3/node-v12.18.3-x64.msi\">下载 win 版安装包</a></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759489-ca783f80-9025-11eb-9aa3-1adaf904ada0.png\" alt=\"image\"></p>\n<p>点击 next</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759506-d401a780-9025-11eb-8593-ecbad1d6bcb2.png\" alt=\"image\"></p>\n<p>勾选接受，next</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759511-dcf27900-9025-11eb-9ef7-f6453d0201fc.png\" alt=\"image\"></p>\n<p>直接 next，安装程序会帮你 Add to PATH (添加环境变量)</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759517-e54ab400-9025-11eb-9a95-5c23f53e4643.png\" alt=\"image\"></p>\n<p>next</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759521-eda2ef00-9025-11eb-9e54-6484613b180a.png\" alt=\"image\"></p>\n<p>打开 cmd，或者 power shell 执行命令，操作与 Linux 部署相似。请参考 Linux 部署。</p>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "博客搭建"
            ]
        },
        {
            "id": "https://blog.wuhen.one/2021/05/08/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B4%E2%80%94%E2%80%94hugo/",
            "url": "https://blog.wuhen.one/2021/05/08/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B4%E2%80%94%E2%80%94hugo/",
            "title": "个人博客搭建保姆级教程4——hugo",
            "date_published": "2021-05-07T19:50:11.578Z",
            "content_html": "<h2 id=\"个人博客搭建保姆级教程4hugo\"><a class=\"markdownIt-Anchor\" href=\"#个人博客搭建保姆级教程4hugo\">#</a> 个人博客搭建保姆级教程 4——hugo</h2>\n<p><strong>官方介绍：</strong> The world’s fastest framework for building websites.</p>\n<hr>\n<p><strong>Linux 部署</strong></p>\n<p><strong>1. 环境</strong></p>\n<blockquote>\n<p>1.<a href=\"https://blog.csdn.net/qq_43938052/article/details/107326122\">ubuntu16.04</a></p>\n<p>2.<a href=\"https://github.com/gohugoio/hugo/releases/tag/v0.74.3\">hugo-v0.74.3</a></p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>2. 安装 hugo</strong></p>\n<p>我们可以下载<a href=\"https://github.com/gohugoio/hugo/releases/tag/v0.74.3\"> hugo-v0.74.3</a> 的软件包进行安装。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759571-2d69d680-9026-11eb-97ca-aeebd7d72d9d.png\" alt=\"image\"></p>\n<p>执行以下命令（需先切换至 root），先创建一个目录，然后下载安装包。(<strong>由于某种原因，下载速度有点慢</strong>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~&#x2F;</span><br><span class=\"line\">mkdir hugo </span><br><span class=\"line\">cd hugo</span><br><span class=\"line\">wget https:&#x2F;&#x2F;github.com&#x2F;gohugoio&#x2F;hugo&#x2F;releases&#x2F;download&#x2F;v0.74.3&#x2F;hugo_0.74.3_Linux-64bit.deb</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759579-38bd0200-9026-11eb-8366-077ce1c42ab4.png\" alt=\"image\"></p>\n<p>现在开始安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i hugo_0.74.3_Linux-64bit.deb</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759587-41153d00-9026-11eb-9448-0dca9340ded8.png\" alt=\"image\"></p>\n<p>执行命令，检查是否安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo version</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759595-483c4b00-9026-11eb-9655-e301c9ac6cf1.png\" alt=\"image\"></p>\n<p>安装成功了。</p>\n<p><strong>3. 生成一个站点</strong></p>\n<p>在 hugo 目录下，执行命令。</p>\n<p><strong>注意：blog（执行命令后，会在当前路径新建 blog 文件夹，你也可以写个路径名）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new site blog</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759607-57bb9400-9026-11eb-8456-202abcdd1fed.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759612-5c804800-9026-11eb-820f-acc1babb536c.png\" alt=\"image\"></p>\n<p>切换目录到 blog 文件夹</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759618-630ebf80-9026-11eb-8a69-0ccf0a0c5ad5.png\" alt=\"image\"></p>\n<p><strong>4. 搞个主题</strong></p>\n<p><strong>注意：各种骚气主题安装可能略有不同，仔细看安装文档。</strong></p>\n<p><strong><a href=\"https://themes.gohugo.io/\">主题官网</a></strong></p>\n<p>很多好看的主题，自己选一个哦。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759628-728e0880-9026-11eb-8db9-affc217e02ad.png\" alt=\"image\"></p>\n<p>我用<a href=\"https://themes.gohugo.io/cupper-hugo-theme/\"> cupper 主题</a> 举个例子。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759633-7b7eda00-9026-11eb-908e-a739fc992be8.png\" alt=\"image\"></p>\n<p>执行命令，将目录切换至 blog 目录下的 themes，下载主题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd themes</span><br><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;zwbetz-gh&#x2F;cupper-hugo-theme.git cupper</span><br></pre></td></tr></table></figure>\n<p>回到 blog 目录，执行命令，启动服务。8080 是端口，你可以自己写个别的。ip 写你自己的。</p>\n<p><strong>端口范围：0~65535，建议大于 1024。如果端口被占用，换个别的。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~&#x2F;hugo&#x2F;blog</span><br><span class=\"line\">hugo server -D --bind 192.168.190.129 -p 8080 --baseURL&#x3D;http:&#x2F;&#x2F;192.168.190.129:8080 --buildDrafts --theme&#x3D;cupper</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>访问 http://192.168.190.129:8080/（用你自己的 IP，主题找你自己喜欢的，我只是随便做个演示。）</p>\n<p>想换站点标题，请修改 blog 下的 config.toml 文件。修改 title 后面的字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim config.toml</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759647-8fc2d700-9026-11eb-9f17-e9dd8927a581.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759649-92bdc780-9026-11eb-8949-2c77ede8025d.png\" alt=\"image\"></p>\n<p><strong>5. 如何发文章</strong></p>\n<p>hugo 支持 markdown 语法。</p>\n<p>执行命令，新建一篇文章。（我用以前的文章做个演示）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new post&#x2F;Linux如何使用U盘等外接储存设备.md</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759661-a0734d00-9026-11eb-930a-daaa005ab1cf.png\" alt=\"image\"></p>\n<p>新建成功，文件在 content 目录下，现在我们来编辑一下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim content&#x2F;post&#x2F;Linux如何使用U盘等外接储存设备.md</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759670-a79a5b00-9026-11eb-91cf-d8bf2bd3ac65.png\" alt=\"image\"></p>\n<p>保存文件，然后开启服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo server -D --bind 192.168.190.129 -p 8080 --baseURL&#x3D;http:&#x2F;&#x2F;192.168.190.129:8080 --buildDrafts --theme&#x3D;cupper</span><br></pre></td></tr></table></figure>\n<p>访问<strong><a href=\"http://192.168.190.129:8080/post/\"> http://192.168.190.129:8080/post/</a></strong><br>\n<strong> 注意：一定要加 post 目录哦</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759691-bed94880-9026-11eb-817c-ee0cf8dc1187.png\" alt=\"image\"></p>\n<p>访问第一篇文章。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759699-c567c000-9026-11eb-892c-bb5a17ee9544.png\" alt=\"image\"></p>\n<p><strong>6. 部署到 github</strong></p>\n<p><strong>需要配置好 git <a href=\"https://blog.csdn.net/qq_43938052/article/details/106485840\">看这个教程</a></strong></p>\n<p>你需要有个 GitHub 的账号，自己去搞一个。</p>\n<p>Create a new repository，repository name 必须是 <strong>（<a href=\"http://xn--eqr924avxo.github.io\">用户名.github.io</a>）</strong>  选不选 public 自己随意。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759711-d3b5dc00-9026-11eb-9333-ee0ef081fb5c.png\" alt=\"image\"></p>\n<p>点击 create (下面冒绿光的)</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759717-dadcea00-9026-11eb-85ab-0ee2de719e8d.png\" alt=\"image\"></p>\n<p>仓库已建好。<br>\n执行命令，生成静态文件。在 public 文件夹下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo --theme&#x3D;cupper --baseUrl&#x3D;&quot;https:&#x2F;&#x2F;ndb000901.github.io&#x2F;&quot; --buildDrafts</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759725-e3cdbb80-9026-11eb-966f-ea17b008dcdf.png\" alt=\"image\"></p>\n<p>切换目录到 public 下，初始化 git 仓库，将站点部署到仓库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;第一次提交&quot;</span><br><span class=\"line\">git remote add origin git@github.com:ndb000901&#x2F;ndb000901.github.io.git #将用户名换成你自己的</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>访问<strong><a href=\"https://ndb000901.github.io/post\"> https://ndb000901.github.io/post</a></strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759738-f1834100-9026-11eb-94b9-da2f76eae921.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759743-f647f500-9026-11eb-8247-582a76cdec5a.png\" alt=\"image\"></p>\n<p>成功部署。</p>\n<hr>\n<p><strong>Windows 部署</strong></p>\n<p><strong>1. 下载 hugo</strong><br>\n<a href=\"https://github.com/gohugoio/hugo/releases/tag/v0.74.3\">hugo 下载</a>，解压。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759748-0233b700-9027-11eb-91a6-9040ecaa2cb0.png\" alt=\"image\"></p>\n<p>打开文件管理</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759755-0a8bf200-9027-11eb-96ec-943c4aeb2ae2.png\" alt=\"image\"></p>\n<p>右击此电脑，点击属性</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759761-1081d300-9027-11eb-8578-dd1cc1213a75.png\" alt=\"image\"></p>\n<p>点击高级系统设置</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759765-17a8e100-9027-11eb-8edc-ba4ad9329dde.png\" alt=\"image\"></p>\n<p>点击环境变量</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759773-1e375880-9027-11eb-96ee-944ae0899ad9.png\" alt=\"image\"></p>\n<p>选择 PATH，点击编辑。没有 PATH，自己新建一个。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759781-268f9380-9027-11eb-9f43-5398f191fe8a.png\" alt=\"image\"></p>\n<p>新建一个，加入解压出 hugo.exe 的路径。然后保存。</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759790-2e4f3800-9027-11eb-9183-198d1dba7ae0.png\" alt=\"image\"></p>\n<p>打开 cmd，或者 powershell。验证环境变量是否添加成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo version</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759811-3f984480-9027-11eb-9d4f-fef59d3f12d5.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112759814-445cf880-9027-11eb-8e5d-b0607b8a8a74.png\" alt=\"image\"></p>\n<p>接下来的工作与 linux 部署类似。请参考 Linux 部署。</p>\n<hr>\n<blockquote>\n<p>作者 info</p>\n<p>作者：DebugWuhen</p>\n<p>原创公众号：『DebugWuhen』，专注于记录有趣的编程技术和有益的程序人生，期待你的关注。</p>\n<p>转载说明：务必注明来源（注明：来源于公众号：DebugWuhen， 作者：DebugWuhen）</p>\n<p><img src=\"https://user-images.githubusercontent.com/48900845/112752163-3b0e6480-9004-11eb-899d-66ddef749c2b.png\" alt=\"image\"></p>\n</blockquote>\n",
            "tags": [
                "博客搭建"
            ]
        }
    ]
}